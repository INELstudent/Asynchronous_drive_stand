
asinchr1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006864  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000824  080069ec  080069ec  000169ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007210  08007210  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007210  08007210  00017210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007218  08007218  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007218  08007218  00017218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800721c  0800721c  0001721c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  2000007c  0800729c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  0800729c  000203ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d99  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cf1  00000000  00000000  00034e45  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fd8  00000000  00000000  00037b38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0002102b  00000000  00000000  00038b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000df3f  00000000  00000000  00059b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000d0934  00000000  00000000  00067a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  001383ae  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000e68  00000000  00000000  00138430  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  000042c0  00000000  00000000  00139298  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080069d4 	.word	0x080069d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	080069d4 	.word	0x080069d4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b972 	b.w	8000d00 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9e08      	ldr	r6, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	4688      	mov	r8, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d14b      	bne.n	8000ada <__udivmoddi4+0xa6>
 8000a42:	428a      	cmp	r2, r1
 8000a44:	4615      	mov	r5, r2
 8000a46:	d967      	bls.n	8000b18 <__udivmoddi4+0xe4>
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0720 	rsb	r7, r2, #32
 8000a52:	fa01 f302 	lsl.w	r3, r1, r2
 8000a56:	fa20 f707 	lsr.w	r7, r0, r7
 8000a5a:	4095      	lsls	r5, r2
 8000a5c:	ea47 0803 	orr.w	r8, r7, r3
 8000a60:	4094      	lsls	r4, r2
 8000a62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a66:	0c23      	lsrs	r3, r4, #16
 8000a68:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a6c:	fa1f fc85 	uxth.w	ip, r5
 8000a70:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a74:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a78:	fb07 f10c 	mul.w	r1, r7, ip
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	d909      	bls.n	8000a94 <__udivmoddi4+0x60>
 8000a80:	18eb      	adds	r3, r5, r3
 8000a82:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a86:	f080 811b 	bcs.w	8000cc0 <__udivmoddi4+0x28c>
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	f240 8118 	bls.w	8000cc0 <__udivmoddi4+0x28c>
 8000a90:	3f02      	subs	r7, #2
 8000a92:	442b      	add	r3, r5
 8000a94:	1a5b      	subs	r3, r3, r1
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000aa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aa8:	45a4      	cmp	ip, r4
 8000aaa:	d909      	bls.n	8000ac0 <__udivmoddi4+0x8c>
 8000aac:	192c      	adds	r4, r5, r4
 8000aae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab2:	f080 8107 	bcs.w	8000cc4 <__udivmoddi4+0x290>
 8000ab6:	45a4      	cmp	ip, r4
 8000ab8:	f240 8104 	bls.w	8000cc4 <__udivmoddi4+0x290>
 8000abc:	3802      	subs	r0, #2
 8000abe:	442c      	add	r4, r5
 8000ac0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ac4:	eba4 040c 	sub.w	r4, r4, ip
 8000ac8:	2700      	movs	r7, #0
 8000aca:	b11e      	cbz	r6, 8000ad4 <__udivmoddi4+0xa0>
 8000acc:	40d4      	lsrs	r4, r2
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e9c6 4300 	strd	r4, r3, [r6]
 8000ad4:	4639      	mov	r1, r7
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d909      	bls.n	8000af2 <__udivmoddi4+0xbe>
 8000ade:	2e00      	cmp	r6, #0
 8000ae0:	f000 80eb 	beq.w	8000cba <__udivmoddi4+0x286>
 8000ae4:	2700      	movs	r7, #0
 8000ae6:	e9c6 0100 	strd	r0, r1, [r6]
 8000aea:	4638      	mov	r0, r7
 8000aec:	4639      	mov	r1, r7
 8000aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af2:	fab3 f783 	clz	r7, r3
 8000af6:	2f00      	cmp	r7, #0
 8000af8:	d147      	bne.n	8000b8a <__udivmoddi4+0x156>
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d302      	bcc.n	8000b04 <__udivmoddi4+0xd0>
 8000afe:	4282      	cmp	r2, r0
 8000b00:	f200 80fa 	bhi.w	8000cf8 <__udivmoddi4+0x2c4>
 8000b04:	1a84      	subs	r4, r0, r2
 8000b06:	eb61 0303 	sbc.w	r3, r1, r3
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	4698      	mov	r8, r3
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d0e0      	beq.n	8000ad4 <__udivmoddi4+0xa0>
 8000b12:	e9c6 4800 	strd	r4, r8, [r6]
 8000b16:	e7dd      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000b18:	b902      	cbnz	r2, 8000b1c <__udivmoddi4+0xe8>
 8000b1a:	deff      	udf	#255	; 0xff
 8000b1c:	fab2 f282 	clz	r2, r2
 8000b20:	2a00      	cmp	r2, #0
 8000b22:	f040 808f 	bne.w	8000c44 <__udivmoddi4+0x210>
 8000b26:	1b49      	subs	r1, r1, r5
 8000b28:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b2c:	fa1f f885 	uxth.w	r8, r5
 8000b30:	2701      	movs	r7, #1
 8000b32:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b36:	0c23      	lsrs	r3, r4, #16
 8000b38:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b40:	fb08 f10c 	mul.w	r1, r8, ip
 8000b44:	4299      	cmp	r1, r3
 8000b46:	d907      	bls.n	8000b58 <__udivmoddi4+0x124>
 8000b48:	18eb      	adds	r3, r5, r3
 8000b4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x122>
 8000b50:	4299      	cmp	r1, r3
 8000b52:	f200 80cd 	bhi.w	8000cf0 <__udivmoddi4+0x2bc>
 8000b56:	4684      	mov	ip, r0
 8000b58:	1a59      	subs	r1, r3, r1
 8000b5a:	b2a3      	uxth	r3, r4
 8000b5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b60:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b64:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b68:	fb08 f800 	mul.w	r8, r8, r0
 8000b6c:	45a0      	cmp	r8, r4
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0x14c>
 8000b70:	192c      	adds	r4, r5, r4
 8000b72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x14a>
 8000b78:	45a0      	cmp	r8, r4
 8000b7a:	f200 80b6 	bhi.w	8000cea <__udivmoddi4+0x2b6>
 8000b7e:	4618      	mov	r0, r3
 8000b80:	eba4 0408 	sub.w	r4, r4, r8
 8000b84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b88:	e79f      	b.n	8000aca <__udivmoddi4+0x96>
 8000b8a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b8e:	40bb      	lsls	r3, r7
 8000b90:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b94:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b98:	fa01 f407 	lsl.w	r4, r1, r7
 8000b9c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ba0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ba4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ba8:	4325      	orrs	r5, r4
 8000baa:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bae:	0c2c      	lsrs	r4, r5, #16
 8000bb0:	fb08 3319 	mls	r3, r8, r9, r3
 8000bb4:	fa1f fa8e 	uxth.w	sl, lr
 8000bb8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bbc:	fb09 f40a 	mul.w	r4, r9, sl
 8000bc0:	429c      	cmp	r4, r3
 8000bc2:	fa02 f207 	lsl.w	r2, r2, r7
 8000bc6:	fa00 f107 	lsl.w	r1, r0, r7
 8000bca:	d90b      	bls.n	8000be4 <__udivmoddi4+0x1b0>
 8000bcc:	eb1e 0303 	adds.w	r3, lr, r3
 8000bd0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bd4:	f080 8087 	bcs.w	8000ce6 <__udivmoddi4+0x2b2>
 8000bd8:	429c      	cmp	r4, r3
 8000bda:	f240 8084 	bls.w	8000ce6 <__udivmoddi4+0x2b2>
 8000bde:	f1a9 0902 	sub.w	r9, r9, #2
 8000be2:	4473      	add	r3, lr
 8000be4:	1b1b      	subs	r3, r3, r4
 8000be6:	b2ad      	uxth	r5, r5
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000bf4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000bf8:	45a2      	cmp	sl, r4
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x1da>
 8000bfc:	eb1e 0404 	adds.w	r4, lr, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c04:	d26b      	bcs.n	8000cde <__udivmoddi4+0x2aa>
 8000c06:	45a2      	cmp	sl, r4
 8000c08:	d969      	bls.n	8000cde <__udivmoddi4+0x2aa>
 8000c0a:	3802      	subs	r0, #2
 8000c0c:	4474      	add	r4, lr
 8000c0e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c12:	fba0 8902 	umull	r8, r9, r0, r2
 8000c16:	eba4 040a 	sub.w	r4, r4, sl
 8000c1a:	454c      	cmp	r4, r9
 8000c1c:	46c2      	mov	sl, r8
 8000c1e:	464b      	mov	r3, r9
 8000c20:	d354      	bcc.n	8000ccc <__udivmoddi4+0x298>
 8000c22:	d051      	beq.n	8000cc8 <__udivmoddi4+0x294>
 8000c24:	2e00      	cmp	r6, #0
 8000c26:	d069      	beq.n	8000cfc <__udivmoddi4+0x2c8>
 8000c28:	ebb1 050a 	subs.w	r5, r1, sl
 8000c2c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c30:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c34:	40fd      	lsrs	r5, r7
 8000c36:	40fc      	lsrs	r4, r7
 8000c38:	ea4c 0505 	orr.w	r5, ip, r5
 8000c3c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c40:	2700      	movs	r7, #0
 8000c42:	e747      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000c44:	f1c2 0320 	rsb	r3, r2, #32
 8000c48:	fa20 f703 	lsr.w	r7, r0, r3
 8000c4c:	4095      	lsls	r5, r2
 8000c4e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c52:	fa21 f303 	lsr.w	r3, r1, r3
 8000c56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c5a:	4338      	orrs	r0, r7
 8000c5c:	0c01      	lsrs	r1, r0, #16
 8000c5e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c62:	fa1f f885 	uxth.w	r8, r5
 8000c66:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c6e:	fb07 f308 	mul.w	r3, r7, r8
 8000c72:	428b      	cmp	r3, r1
 8000c74:	fa04 f402 	lsl.w	r4, r4, r2
 8000c78:	d907      	bls.n	8000c8a <__udivmoddi4+0x256>
 8000c7a:	1869      	adds	r1, r5, r1
 8000c7c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c80:	d22f      	bcs.n	8000ce2 <__udivmoddi4+0x2ae>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d92d      	bls.n	8000ce2 <__udivmoddi4+0x2ae>
 8000c86:	3f02      	subs	r7, #2
 8000c88:	4429      	add	r1, r5
 8000c8a:	1acb      	subs	r3, r1, r3
 8000c8c:	b281      	uxth	r1, r0
 8000c8e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c92:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c96:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c9a:	fb00 f308 	mul.w	r3, r0, r8
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x27e>
 8000ca2:	1869      	adds	r1, r5, r1
 8000ca4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ca8:	d217      	bcs.n	8000cda <__udivmoddi4+0x2a6>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d915      	bls.n	8000cda <__udivmoddi4+0x2a6>
 8000cae:	3802      	subs	r0, #2
 8000cb0:	4429      	add	r1, r5
 8000cb2:	1ac9      	subs	r1, r1, r3
 8000cb4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cb8:	e73b      	b.n	8000b32 <__udivmoddi4+0xfe>
 8000cba:	4637      	mov	r7, r6
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	e709      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000cc0:	4607      	mov	r7, r0
 8000cc2:	e6e7      	b.n	8000a94 <__udivmoddi4+0x60>
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	e6fb      	b.n	8000ac0 <__udivmoddi4+0x8c>
 8000cc8:	4541      	cmp	r1, r8
 8000cca:	d2ab      	bcs.n	8000c24 <__udivmoddi4+0x1f0>
 8000ccc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cd0:	eb69 020e 	sbc.w	r2, r9, lr
 8000cd4:	3801      	subs	r0, #1
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	e7a4      	b.n	8000c24 <__udivmoddi4+0x1f0>
 8000cda:	4660      	mov	r0, ip
 8000cdc:	e7e9      	b.n	8000cb2 <__udivmoddi4+0x27e>
 8000cde:	4618      	mov	r0, r3
 8000ce0:	e795      	b.n	8000c0e <__udivmoddi4+0x1da>
 8000ce2:	4667      	mov	r7, ip
 8000ce4:	e7d1      	b.n	8000c8a <__udivmoddi4+0x256>
 8000ce6:	4681      	mov	r9, r0
 8000ce8:	e77c      	b.n	8000be4 <__udivmoddi4+0x1b0>
 8000cea:	3802      	subs	r0, #2
 8000cec:	442c      	add	r4, r5
 8000cee:	e747      	b.n	8000b80 <__udivmoddi4+0x14c>
 8000cf0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cf4:	442b      	add	r3, r5
 8000cf6:	e72f      	b.n	8000b58 <__udivmoddi4+0x124>
 8000cf8:	4638      	mov	r0, r7
 8000cfa:	e708      	b.n	8000b0e <__udivmoddi4+0xda>
 8000cfc:	4637      	mov	r7, r6
 8000cfe:	e6e9      	b.n	8000ad4 <__udivmoddi4+0xa0>

08000d00 <__aeabi_idiv0>:
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b092      	sub	sp, #72	; 0x48
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2U;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	089b      	lsrs	r3, r3, #2
 8000d14:	647b      	str	r3, [r7, #68]	; 0x44

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8000d16:	e0ce      	b.n	8000eb6 <arm_cmplx_mag_f32+0x1b2>
  {

    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	1d1a      	adds	r2, r3, #4
 8000d1c:	60fa      	str	r2, [r7, #12]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	1d1a      	adds	r2, r3, #4
 8000d26:	60fa      	str	r2, [r7, #12]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8000d2c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000d30:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000d34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d38:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8000d3c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000d40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	1d1a      	adds	r2, r3, #4
 8000d4c:	60ba      	str	r2, [r7, #8]
 8000d4e:	edc7 7a08 	vstr	s15, [r7, #32]
 8000d52:	61fb      	str	r3, [r7, #28]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8000d54:	edd7 7a08 	vldr	s15, [r7, #32]
 8000d58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d60:	db09      	blt.n	8000d76 <arm_cmplx_mag_f32+0x72>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8000d62:	ed97 0a08 	vldr	s0, [r7, #32]
 8000d66:	f005 fddf 	bl	8006928 <sqrtf>
 8000d6a:	eef0 7a40 	vmov.f32	s15, s0
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	edc3 7a00 	vstr	s15, [r3]
 8000d74:	e003      	b.n	8000d7e <arm_cmplx_mag_f32+0x7a>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	f04f 0200 	mov.w	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]

    realIn = *pSrc++;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	1d1a      	adds	r2, r3, #4
 8000d82:	60fa      	str	r2, [r7, #12]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	1d1a      	adds	r2, r3, #4
 8000d8c:	60fa      	str	r2, [r7, #12]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8000d92:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000d96:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000d9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d9e:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8000da2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000da6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1d1a      	adds	r2, r3, #4
 8000db2:	60ba      	str	r2, [r7, #8]
 8000db4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
    if (in >= 0.0f)
 8000dba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000dbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc6:	db09      	blt.n	8000ddc <arm_cmplx_mag_f32+0xd8>
      *pOut = __builtin_sqrtf(in);
 8000dc8:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8000dcc:	f005 fdac 	bl	8006928 <sqrtf>
 8000dd0:	eef0 7a40 	vmov.f32	s15, s0
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd6:	edc3 7a00 	vstr	s15, [r3]
 8000dda:	e003      	b.n	8000de4 <arm_cmplx_mag_f32+0xe0>
      *pOut = 0.0f;
 8000ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dde:	f04f 0200 	mov.w	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]

    realIn = *pSrc++;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	1d1a      	adds	r2, r3, #4
 8000de8:	60fa      	str	r2, [r7, #12]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	1d1a      	adds	r2, r3, #4
 8000df2:	60fa      	str	r2, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8000df8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000dfc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000e00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e04:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8000e08:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000e0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	1d1a      	adds	r2, r3, #4
 8000e18:	60ba      	str	r2, [r7, #8]
 8000e1a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (in >= 0.0f)
 8000e20:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000e24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e2c:	db09      	blt.n	8000e42 <arm_cmplx_mag_f32+0x13e>
      *pOut = __builtin_sqrtf(in);
 8000e2e:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8000e32:	f005 fd79 	bl	8006928 <sqrtf>
 8000e36:	eef0 7a40 	vmov.f32	s15, s0
 8000e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e3c:	edc3 7a00 	vstr	s15, [r3]
 8000e40:	e003      	b.n	8000e4a <arm_cmplx_mag_f32+0x146>
      *pOut = 0.0f;
 8000e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e44:	f04f 0200 	mov.w	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]

    realIn = *pSrc++;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	1d1a      	adds	r2, r3, #4
 8000e4e:	60fa      	str	r2, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	1d1a      	adds	r2, r3, #4
 8000e58:	60fa      	str	r2, [r7, #12]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8000e5e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000e62:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000e66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e6a:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8000e6e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000e72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	1d1a      	adds	r2, r3, #4
 8000e7e:	60ba      	str	r2, [r7, #8]
 8000e80:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8000e84:	637b      	str	r3, [r7, #52]	; 0x34
    if (in >= 0.0f)
 8000e86:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000e8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e92:	db09      	blt.n	8000ea8 <arm_cmplx_mag_f32+0x1a4>
      *pOut = __builtin_sqrtf(in);
 8000e94:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8000e98:	f005 fd46 	bl	8006928 <sqrtf>
 8000e9c:	eef0 7a40 	vmov.f32	s15, s0
 8000ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ea2:	edc3 7a00 	vstr	s15, [r3]
 8000ea6:	e003      	b.n	8000eb0 <arm_cmplx_mag_f32+0x1ac>
      *pOut = 0.0f;
 8000ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eaa:	f04f 0200 	mov.w	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]


    /* Decrement the loop counter */
    blkCnt--;
 8000eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	647b      	str	r3, [r7, #68]	; 0x44
  while (blkCnt > 0U)
 8000eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f47f af2d 	bne.w	8000d18 <arm_cmplx_mag_f32+0x14>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4U;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f003 0303 	and.w	r3, r3, #3
 8000ec4:	647b      	str	r3, [r7, #68]	; 0x44

  while (blkCnt > 0U)
 8000ec6:	e035      	b.n	8000f34 <arm_cmplx_mag_f32+0x230>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	1d1a      	adds	r2, r3, #4
 8000ecc:	60fa      	str	r2, [r7, #12]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	1d1a      	adds	r2, r3, #4
 8000ed6:	60fa      	str	r2, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8000edc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000ee0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000ee4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ee8:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8000eec:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000ef0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	1d1a      	adds	r2, r3, #4
 8000efc:	60ba      	str	r2, [r7, #8]
 8000efe:	edc7 7a06 	vstr	s15, [r7, #24]
 8000f02:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 8000f04:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f10:	db09      	blt.n	8000f26 <arm_cmplx_mag_f32+0x222>
      *pOut = __builtin_sqrtf(in);
 8000f12:	ed97 0a06 	vldr	s0, [r7, #24]
 8000f16:	f005 fd07 	bl	8006928 <sqrtf>
 8000f1a:	eef0 7a40 	vmov.f32	s15, s0
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	edc3 7a00 	vstr	s15, [r3]
 8000f24:	e003      	b.n	8000f2e <arm_cmplx_mag_f32+0x22a>
      *pOut = 0.0f;
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f04f 0200 	mov.w	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 8000f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f30:	3b01      	subs	r3, #1
 8000f32:	647b      	str	r3, [r7, #68]	; 0x44
  while (blkCnt > 0U)
 8000f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d1c6      	bne.n	8000ec8 <arm_cmplx_mag_f32+0x1c4>
    numSamples--;
  }

#endif /* #if defined (ARM_MATH_DSP) */

}
 8000f3a:	bf00      	nop
 8000f3c:	3748      	adds	r7, #72	; 0x48
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <arm_cos_f32>:
 * @return cos(x).
 */

float32_t arm_cos_f32(
  float32_t x)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b08b      	sub	sp, #44	; 0x2c
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 8000f4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f52:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001030 <arm_cos_f32+0xec>
 8000f56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f5a:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8000f5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f62:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8000f66:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f6e:	ee17 3a90 	vmov	r3, s15
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8000f74:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f80:	d502      	bpl.n	8000f88 <arm_cos_f32+0x44>
  {
    n--;
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	3b01      	subs	r3, #1
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8000f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8a:	ee07 3a90 	vmov	s15, r3
 8000f8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f92:	ed97 7a08 	vldr	s14, [r7, #32]
 8000f96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f9a:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 8000f9e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000fa2:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001034 <arm_cos_f32+0xf0>
 8000fa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000faa:	edc7 7a07 	vstr	s15, [r7, #28]
  index = ((uint16_t)findex) & 0x1ff;
 8000fae:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fb6:	ee17 3a90 	vmov	r3, s15
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000fc0:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8000fc2:	8b7b      	ldrh	r3, [r7, #26]
 8000fc4:	ee07 3a90 	vmov	s15, r3
 8000fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fcc:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fd4:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 8000fd8:	8b7b      	ldrh	r3, [r7, #26]
 8000fda:	4a17      	ldr	r2, [pc, #92]	; (8001038 <arm_cos_f32+0xf4>)
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	4413      	add	r3, r2
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8000fe4:	8b7b      	ldrh	r3, [r7, #26]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	4a13      	ldr	r2, [pc, #76]	; (8001038 <arm_cos_f32+0xf4>)
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  cosVal = (1.0f-fract)*a + fract*b;
 8000ff2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000ff6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ffa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ffe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001002:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001006:	edd7 6a05 	vldr	s13, [r7, #20]
 800100a:	edd7 7a03 	vldr	s15, [r7, #12]
 800100e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001012:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001016:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return the output value */
  return (cosVal);
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	ee07 3a90 	vmov	s15, r3
}
 8001020:	eeb0 0a67 	vmov.f32	s0, s15
 8001024:	372c      	adds	r7, #44	; 0x2c
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	3e22f983 	.word	0x3e22f983
 8001034:	44000000 	.word	0x44000000
 8001038:	080069ec 	.word	0x080069ec

0800103c <arm_sin_f32>:
 * @return  sin(x).
 */

float32_t arm_sin_f32(
  float32_t x)
{
 800103c:	b480      	push	{r7}
 800103e:	b08b      	sub	sp, #44	; 0x2c
 8001040:	af00      	add	r7, sp, #0
 8001042:	ed87 0a01 	vstr	s0, [r7, #4]
  float32_t a, b;                                        /* Two nearest output values */
  int32_t n;
  float32_t findex;

  /* Special case for small negative inputs */
  if ((x < 0.0f) && (x >= -1.9e-7f)) {
 8001046:	edd7 7a01 	vldr	s15, [r7, #4]
 800104a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800104e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001052:	d50a      	bpl.n	800106a <arm_sin_f32+0x2e>
 8001054:	edd7 7a01 	vldr	s15, [r7, #4]
 8001058:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001144 <arm_sin_f32+0x108>
 800105c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001064:	db01      	blt.n	800106a <arm_sin_f32+0x2e>
     return x;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	e062      	b.n	8001130 <arm_sin_f32+0xf4>
  }

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 800106a:	edd7 7a01 	vldr	s15, [r7, #4]
 800106e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001148 <arm_sin_f32+0x10c>
 8001072:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001076:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 800107a:	edd7 7a08 	vldr	s15, [r7, #32]
 800107e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001082:	ee17 3a90 	vmov	r3, s15
 8001086:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if (x < 0.0f)
 8001088:	edd7 7a01 	vldr	s15, [r7, #4]
 800108c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001094:	d502      	bpl.n	800109c <arm_sin_f32+0x60>
  {
    n--;
 8001096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001098:	3b01      	subs	r3, #1
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 800109c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109e:	ee07 3a90 	vmov	s15, r3
 80010a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a6:	ed97 7a08 	vldr	s14, [r7, #32]
 80010aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ae:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 80010b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80010b6:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800114c <arm_sin_f32+0x110>
 80010ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010be:	edc7 7a07 	vstr	s15, [r7, #28]

  index = ((uint16_t)findex) & 0x1ff;
 80010c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80010c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ca:	ee17 3a90 	vmov	r3, s15
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010d4:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 80010d6:	8b7b      	ldrh	r3, [r7, #26]
 80010d8:	ee07 3a90 	vmov	s15, r3
 80010dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010e0:	ed97 7a07 	vldr	s14, [r7, #28]
 80010e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010e8:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 80010ec:	8b7b      	ldrh	r3, [r7, #26]
 80010ee:	4a18      	ldr	r2, [pc, #96]	; (8001150 <arm_sin_f32+0x114>)
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 80010f8:	8b7b      	ldrh	r3, [r7, #26]
 80010fa:	3301      	adds	r3, #1
 80010fc:	4a14      	ldr	r2, [pc, #80]	; (8001150 <arm_sin_f32+0x114>)
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f-fract)*a + fract*b;
 8001106:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800110a:	edd7 7a05 	vldr	s15, [r7, #20]
 800110e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001112:	edd7 7a04 	vldr	s15, [r7, #16]
 8001116:	ee27 7a27 	vmul.f32	s14, s14, s15
 800111a:	edd7 6a05 	vldr	s13, [r7, #20]
 800111e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001122:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800112a:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return the output value */
  return (sinVal);
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	ee07 3a90 	vmov	s15, r3
}
 8001134:	eeb0 0a67 	vmov.f32	s0, s15
 8001138:	372c      	adds	r7, #44	; 0x2c
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	b44c02cd 	.word	0xb44c02cd
 8001148:	3e22f983 	.word	0x3e22f983
 800114c:	44000000 	.word	0x44000000
 8001150:	080069ec 	.word	0x080069ec

08001154 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001158:	f001 fffe 	bl	8003158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115c:	f000 f838 	bl	80011d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001160:	f000 fb70 	bl	8001844 <MX_GPIO_Init>
  MX_DMA_Init();
 8001164:	f000 fb46 	bl	80017f4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001168:	f000 f89c 	bl	80012a4 <MX_ADC1_Init>
  MX_ADC2_Init();
 800116c:	f000 f904 	bl	8001378 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001170:	f000 f94c 	bl	800140c <MX_ADC3_Init>
  MX_TIM1_Init();
 8001174:	f000 f9fa 	bl	800156c <MX_TIM1_Init>
  MX_TIM3_Init();
 8001178:	f000 fab2 	bl	80016e0 <MX_TIM3_Init>
  MX_DAC_Init();
 800117c:	f000 f990 	bl	80014a0 <MX_DAC_Init>
  MX_SPI2_Init();
 8001180:	f000 f9c2 	bl	8001508 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
Device_DAC_ON();
 8001184:	f000 fc7e 	bl	8001a84 <Device_DAC_ON>

Device_ADC_Start(Device_ADC_Buf,3);
 8001188:	2103      	movs	r1, #3
 800118a:	480e      	ldr	r0, [pc, #56]	; (80011c4 <main+0x70>)
 800118c:	f000 fc88 	bl	8001aa0 <Device_ADC_Start>

/*                                    ENCODER SPI-DMA INIT                          */
  HAL_SPI_Init(&hspi2);
 8001190:	480d      	ldr	r0, [pc, #52]	; (80011c8 <main+0x74>)
 8001192:	f003 fe8b 	bl	8004eac <HAL_SPI_Init>
  HAL_SPI_MspInit(&hspi2);
 8001196:	480c      	ldr	r0, [pc, #48]	; (80011c8 <main+0x74>)
 8001198:	f000 fe62 	bl	8001e60 <HAL_SPI_MspInit>
  HAL_NVIC_DisableIRQ(DMA1_Stream3_IRQn);
 800119c:	200e      	movs	r0, #14
 800119e:	f002 fd92 	bl	8003cc6 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(DMA1_Stream4_IRQn);
 80011a2:	200f      	movs	r0, #15
 80011a4:	f002 fd8f 	bl	8003cc6 <HAL_NVIC_DisableIRQ>
  HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)&speed.angle_f[0], 1);
 80011a8:	2201      	movs	r2, #1
 80011aa:	4908      	ldr	r1, [pc, #32]	; (80011cc <main+0x78>)
 80011ac:	4806      	ldr	r0, [pc, #24]	; (80011c8 <main+0x74>)
 80011ae:	f003 fee1 	bl	8004f74 <HAL_SPI_Receive_DMA>


HAL_Delay(600);
 80011b2:	f44f 7016 	mov.w	r0, #600	; 0x258
 80011b6:	f002 f841 	bl	800323c <HAL_Delay>

Device_MainTimerStart();
 80011ba:	f000 fc59 	bl	8001a70 <Device_MainTimerStart>
Device_PWM_Channels_ON();
 80011be:	f000 fcc5 	bl	8001b4c <Device_PWM_Channels_ON>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <main+0x6e>
 80011c4:	200002f0 	.word	0x200002f0
 80011c8:	200001f8 	.word	0x200001f8
 80011cc:	200003ca 	.word	0x200003ca

080011d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b094      	sub	sp, #80	; 0x50
 80011d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d6:	f107 0320 	add.w	r3, r7, #32
 80011da:	2230      	movs	r2, #48	; 0x30
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f005 fb9a 	bl	8006918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	4b28      	ldr	r3, [pc, #160]	; (800129c <SystemClock_Config+0xcc>)
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	4a27      	ldr	r2, [pc, #156]	; (800129c <SystemClock_Config+0xcc>)
 80011fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001202:	6413      	str	r3, [r2, #64]	; 0x40
 8001204:	4b25      	ldr	r3, [pc, #148]	; (800129c <SystemClock_Config+0xcc>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001210:	2300      	movs	r3, #0
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <SystemClock_Config+0xd0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a21      	ldr	r2, [pc, #132]	; (80012a0 <SystemClock_Config+0xd0>)
 800121a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <SystemClock_Config+0xd0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800122c:	2301      	movs	r3, #1
 800122e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001230:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001236:	2302      	movs	r3, #2
 8001238:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800123a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800123e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001240:	2304      	movs	r3, #4
 8001242:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001244:	23a8      	movs	r3, #168	; 0xa8
 8001246:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001248:	2302      	movs	r3, #2
 800124a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800124c:	2304      	movs	r3, #4
 800124e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001250:	f107 0320 	add.w	r3, r7, #32
 8001254:	4618      	mov	r0, r3
 8001256:	f003 f9fb 	bl	8004650 <HAL_RCC_OscConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001260:	f000 fcb0 	bl	8001bc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001264:	230f      	movs	r3, #15
 8001266:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001268:	2302      	movs	r3, #2
 800126a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001270:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001274:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	2105      	movs	r1, #5
 8001282:	4618      	mov	r0, r3
 8001284:	f003 fc54 	bl	8004b30 <HAL_RCC_ClockConfig>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800128e:	f000 fc99 	bl	8001bc4 <Error_Handler>
  }
}
 8001292:	bf00      	nop
 8001294:	3750      	adds	r7, #80	; 0x50
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800
 80012a0:	40007000 	.word	0x40007000

080012a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012c2:	4b2b      	ldr	r3, [pc, #172]	; (8001370 <MX_ADC1_Init+0xcc>)
 80012c4:	4a2b      	ldr	r2, [pc, #172]	; (8001374 <MX_ADC1_Init+0xd0>)
 80012c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012c8:	4b29      	ldr	r3, [pc, #164]	; (8001370 <MX_ADC1_Init+0xcc>)
 80012ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012d0:	4b27      	ldr	r3, [pc, #156]	; (8001370 <MX_ADC1_Init+0xcc>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80012d6:	4b26      	ldr	r3, [pc, #152]	; (8001370 <MX_ADC1_Init+0xcc>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012dc:	4b24      	ldr	r3, [pc, #144]	; (8001370 <MX_ADC1_Init+0xcc>)
 80012de:	2200      	movs	r2, #0
 80012e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012e2:	4b23      	ldr	r3, [pc, #140]	; (8001370 <MX_ADC1_Init+0xcc>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80012ea:	4b21      	ldr	r3, [pc, #132]	; (8001370 <MX_ADC1_Init+0xcc>)
 80012ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_CC1;
 80012f2:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <MX_ADC1_Init+0xcc>)
 80012f4:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80012f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012fa:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <MX_ADC1_Init+0xcc>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <MX_ADC1_Init+0xcc>)
 8001302:	2201      	movs	r2, #1
 8001304:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001306:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <MX_ADC1_Init+0xcc>)
 8001308:	2201      	movs	r2, #1
 800130a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800130e:	4b18      	ldr	r3, [pc, #96]	; (8001370 <MX_ADC1_Init+0xcc>)
 8001310:	2201      	movs	r2, #1
 8001312:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001314:	4816      	ldr	r0, [pc, #88]	; (8001370 <MX_ADC1_Init+0xcc>)
 8001316:	f001 ffb3 	bl	8003280 <HAL_ADC_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8001320:	f000 fc50 	bl	8001bc4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_TRIPLEMODE_REGSIMULT;
 8001324:	2316      	movs	r3, #22
 8001326:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_1;
 8001328:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800132c:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	4619      	mov	r1, r3
 8001338:	480d      	ldr	r0, [pc, #52]	; (8001370 <MX_ADC1_Init+0xcc>)
 800133a:	f002 fadf 	bl	80038fc <HAL_ADCEx_MultiModeConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 8001344:	f000 fc3e 	bl	8001bc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001348:	2301      	movs	r3, #1
 800134a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 800134c:	2301      	movs	r3, #1
 800134e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	4619      	mov	r1, r3
 8001358:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_ADC1_Init+0xcc>)
 800135a:	f001 fff3 	bl	8003344 <HAL_ADC_ConfigChannel>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8001364:	f000 fc2e 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001368:	bf00      	nop
 800136a:	3720      	adds	r7, #32
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200000f4 	.word	0x200000f4
 8001374:	40012000 	.word	0x40012000

08001378 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800137e:	463b      	mov	r3, r7
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800138a:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <MX_ADC2_Init+0x8c>)
 800138c:	4a1e      	ldr	r2, [pc, #120]	; (8001408 <MX_ADC2_Init+0x90>)
 800138e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001390:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <MX_ADC2_Init+0x8c>)
 8001392:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001396:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001398:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <MX_ADC2_Init+0x8c>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800139e:	4b19      	ldr	r3, [pc, #100]	; (8001404 <MX_ADC2_Init+0x8c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80013a4:	4b17      	ldr	r3, [pc, #92]	; (8001404 <MX_ADC2_Init+0x8c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013aa:	4b16      	ldr	r3, [pc, #88]	; (8001404 <MX_ADC2_Init+0x8c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013b2:	4b14      	ldr	r3, [pc, #80]	; (8001404 <MX_ADC2_Init+0x8c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <MX_ADC2_Init+0x8c>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <MX_ADC2_Init+0x8c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <MX_ADC2_Init+0x8c>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80013cc:	480d      	ldr	r0, [pc, #52]	; (8001404 <MX_ADC2_Init+0x8c>)
 80013ce:	f001 ff57 	bl	8003280 <HAL_ADC_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 80013d8:	f000 fbf4 	bl	8001bc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80013dc:	230b      	movs	r3, #11
 80013de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013e0:	2301      	movs	r3, #1
 80013e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013e8:	463b      	mov	r3, r7
 80013ea:	4619      	mov	r1, r3
 80013ec:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_ADC2_Init+0x8c>)
 80013ee:	f001 ffa9 	bl	8003344 <HAL_ADC_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 80013f8:	f000 fbe4 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80013fc:	bf00      	nop
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	200000ac 	.word	0x200000ac
 8001408:	40012100 	.word	0x40012100

0800140c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001412:	463b      	mov	r3, r7
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800141e:	4b1e      	ldr	r3, [pc, #120]	; (8001498 <MX_ADC3_Init+0x8c>)
 8001420:	4a1e      	ldr	r2, [pc, #120]	; (800149c <MX_ADC3_Init+0x90>)
 8001422:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001424:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <MX_ADC3_Init+0x8c>)
 8001426:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800142a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800142c:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <MX_ADC3_Init+0x8c>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001432:	4b19      	ldr	r3, [pc, #100]	; (8001498 <MX_ADC3_Init+0x8c>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001438:	4b17      	ldr	r3, [pc, #92]	; (8001498 <MX_ADC3_Init+0x8c>)
 800143a:	2200      	movs	r2, #0
 800143c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800143e:	4b16      	ldr	r3, [pc, #88]	; (8001498 <MX_ADC3_Init+0x8c>)
 8001440:	2200      	movs	r2, #0
 8001442:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001446:	4b14      	ldr	r3, [pc, #80]	; (8001498 <MX_ADC3_Init+0x8c>)
 8001448:	2200      	movs	r2, #0
 800144a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <MX_ADC3_Init+0x8c>)
 800144e:	2201      	movs	r2, #1
 8001450:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_ADC3_Init+0x8c>)
 8001454:	2200      	movs	r2, #0
 8001456:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800145a:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <MX_ADC3_Init+0x8c>)
 800145c:	2201      	movs	r2, #1
 800145e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001460:	480d      	ldr	r0, [pc, #52]	; (8001498 <MX_ADC3_Init+0x8c>)
 8001462:	f001 ff0d 	bl	8003280 <HAL_ADC_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_ADC3_Init+0x64>
  {
    Error_Handler();
 800146c:	f000 fbaa 	bl	8001bc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001470:	230c      	movs	r3, #12
 8001472:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001474:	2301      	movs	r3, #1
 8001476:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001478:	2300      	movs	r3, #0
 800147a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800147c:	463b      	mov	r3, r7
 800147e:	4619      	mov	r1, r3
 8001480:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_ADC3_Init+0x8c>)
 8001482:	f001 ff5f 	bl	8003344 <HAL_ADC_ConfigChannel>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 800148c:	f000 fb9a 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001490:	bf00      	nop
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	2000013c 	.word	0x2000013c
 800149c:	40012200 	.word	0x40012200

080014a0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80014a6:	463b      	mov	r3, r7
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80014ae:	4b14      	ldr	r3, [pc, #80]	; (8001500 <MX_DAC_Init+0x60>)
 80014b0:	4a14      	ldr	r2, [pc, #80]	; (8001504 <MX_DAC_Init+0x64>)
 80014b2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80014b4:	4812      	ldr	r0, [pc, #72]	; (8001500 <MX_DAC_Init+0x60>)
 80014b6:	f002 fc20 	bl	8003cfa <HAL_DAC_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80014c0:	f000 fb80 	bl	8001bc4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014cc:	463b      	mov	r3, r7
 80014ce:	2200      	movs	r2, #0
 80014d0:	4619      	mov	r1, r3
 80014d2:	480b      	ldr	r0, [pc, #44]	; (8001500 <MX_DAC_Init+0x60>)
 80014d4:	f002 fc99 	bl	8003e0a <HAL_DAC_ConfigChannel>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80014de:	f000 fb71 	bl	8001bc4 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80014e2:	463b      	mov	r3, r7
 80014e4:	2210      	movs	r2, #16
 80014e6:	4619      	mov	r1, r3
 80014e8:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_DAC_Init+0x60>)
 80014ea:	f002 fc8e 	bl	8003e0a <HAL_DAC_ConfigChannel>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80014f4:	f000 fb66 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	200001e4 	.word	0x200001e4
 8001504:	40007400 	.word	0x40007400

08001508 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800150c:	4b15      	ldr	r3, [pc, #84]	; (8001564 <MX_SPI2_Init+0x5c>)
 800150e:	4a16      	ldr	r2, [pc, #88]	; (8001568 <MX_SPI2_Init+0x60>)
 8001510:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8001512:	4b14      	ldr	r3, [pc, #80]	; (8001564 <MX_SPI2_Init+0x5c>)
 8001514:	2200      	movs	r2, #0
 8001516:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <MX_SPI2_Init+0x5c>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <MX_SPI2_Init+0x5c>)
 8001520:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001524:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <MX_SPI2_Init+0x5c>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800152c:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <MX_SPI2_Init+0x5c>)
 800152e:	2200      	movs	r2, #0
 8001530:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <MX_SPI2_Init+0x5c>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001538:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <MX_SPI2_Init+0x5c>)
 800153a:	2200      	movs	r2, #0
 800153c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <MX_SPI2_Init+0x5c>)
 8001540:	2200      	movs	r2, #0
 8001542:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001544:	4b07      	ldr	r3, [pc, #28]	; (8001564 <MX_SPI2_Init+0x5c>)
 8001546:	2200      	movs	r2, #0
 8001548:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <MX_SPI2_Init+0x5c>)
 800154c:	220a      	movs	r2, #10
 800154e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001550:	4804      	ldr	r0, [pc, #16]	; (8001564 <MX_SPI2_Init+0x5c>)
 8001552:	f003 fcab 	bl	8004eac <HAL_SPI_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_SPI2_Init+0x58>
  {
    Error_Handler();
 800155c:	f000 fb32 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}
 8001564:	200001f8 	.word	0x200001f8
 8001568:	40003800 	.word	0x40003800

0800156c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b096      	sub	sp, #88	; 0x58
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001572:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001580:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800158a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	611a      	str	r2, [r3, #16]
 800159a:	615a      	str	r2, [r3, #20]
 800159c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	2220      	movs	r2, #32
 80015a2:	2100      	movs	r1, #0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f005 f9b7 	bl	8006918 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015aa:	4b4b      	ldr	r3, [pc, #300]	; (80016d8 <MX_TIM1_Init+0x16c>)
 80015ac:	4a4b      	ldr	r2, [pc, #300]	; (80016dc <MX_TIM1_Init+0x170>)
 80015ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80015b0:	4b49      	ldr	r3, [pc, #292]	; (80016d8 <MX_TIM1_Init+0x16c>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80015b6:	4b48      	ldr	r3, [pc, #288]	; (80016d8 <MX_TIM1_Init+0x16c>)
 80015b8:	2220      	movs	r2, #32
 80015ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8400;
 80015bc:	4b46      	ldr	r3, [pc, #280]	; (80016d8 <MX_TIM1_Init+0x16c>)
 80015be:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80015c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c4:	4b44      	ldr	r3, [pc, #272]	; (80016d8 <MX_TIM1_Init+0x16c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015ca:	4b43      	ldr	r3, [pc, #268]	; (80016d8 <MX_TIM1_Init+0x16c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d0:	4b41      	ldr	r3, [pc, #260]	; (80016d8 <MX_TIM1_Init+0x16c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015d6:	4840      	ldr	r0, [pc, #256]	; (80016d8 <MX_TIM1_Init+0x16c>)
 80015d8:	f004 f8aa 	bl	8005730 <HAL_TIM_Base_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80015e2:	f000 faef 	bl	8001bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015f0:	4619      	mov	r1, r3
 80015f2:	4839      	ldr	r0, [pc, #228]	; (80016d8 <MX_TIM1_Init+0x16c>)
 80015f4:	f004 fbc2 	bl	8005d7c <HAL_TIM_ConfigClockSource>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80015fe:	f000 fae1 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001602:	4835      	ldr	r0, [pc, #212]	; (80016d8 <MX_TIM1_Init+0x16c>)
 8001604:	f004 f956 	bl	80058b4 <HAL_TIM_PWM_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800160e:	f000 fad9 	bl	8001bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001612:	2310      	movs	r3, #16
 8001614:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001616:	2300      	movs	r3, #0
 8001618:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800161a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800161e:	4619      	mov	r1, r3
 8001620:	482d      	ldr	r0, [pc, #180]	; (80016d8 <MX_TIM1_Init+0x16c>)
 8001622:	f005 f86d 	bl	8006700 <HAL_TIMEx_MasterConfigSynchronization>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800162c:	f000 faca 	bl	8001bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001630:	2360      	movs	r3, #96	; 0x60
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 4200;
 8001634:	f241 0368 	movw	r3, #4200	; 0x1068
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800163a:	2300      	movs	r3, #0
 800163c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800163e:	2300      	movs	r3, #0
 8001640:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001646:	2300      	movs	r3, #0
 8001648:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800164a:	2300      	movs	r3, #0
 800164c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800164e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001652:	2200      	movs	r2, #0
 8001654:	4619      	mov	r1, r3
 8001656:	4820      	ldr	r0, [pc, #128]	; (80016d8 <MX_TIM1_Init+0x16c>)
 8001658:	f004 faca 	bl	8005bf0 <HAL_TIM_PWM_ConfigChannel>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001662:	f000 faaf 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166a:	2204      	movs	r2, #4
 800166c:	4619      	mov	r1, r3
 800166e:	481a      	ldr	r0, [pc, #104]	; (80016d8 <MX_TIM1_Init+0x16c>)
 8001670:	f004 fabe 	bl	8005bf0 <HAL_TIM_PWM_ConfigChannel>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 800167a:	f000 faa3 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800167e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001682:	2208      	movs	r2, #8
 8001684:	4619      	mov	r1, r3
 8001686:	4814      	ldr	r0, [pc, #80]	; (80016d8 <MX_TIM1_Init+0x16c>)
 8001688:	f004 fab2 	bl	8005bf0 <HAL_TIM_PWM_ConfigChannel>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001692:	f000 fa97 	bl	8001bc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001696:	2300      	movs	r3, #0
 8001698:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 250;
 80016a2:	23fa      	movs	r3, #250	; 0xfa
 80016a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	4619      	mov	r1, r3
 80016b8:	4807      	ldr	r0, [pc, #28]	; (80016d8 <MX_TIM1_Init+0x16c>)
 80016ba:	f005 f89d 	bl	80067f8 <HAL_TIMEx_ConfigBreakDeadTime>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 80016c4:	f000 fa7e 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016c8:	4803      	ldr	r0, [pc, #12]	; (80016d8 <MX_TIM1_Init+0x16c>)
 80016ca:	f000 fcb9 	bl	8002040 <HAL_TIM_MspPostInit>

}
 80016ce:	bf00      	nop
 80016d0:	3758      	adds	r7, #88	; 0x58
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200002f8 	.word	0x200002f8
 80016dc:	40010000 	.word	0x40010000

080016e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b092      	sub	sp, #72	; 0x48
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80016f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001704:	f107 031c 	add.w	r3, r7, #28
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800170e:	463b      	mov	r3, r7
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
 800171c:	615a      	str	r2, [r3, #20]
 800171e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001720:	4b32      	ldr	r3, [pc, #200]	; (80017ec <MX_TIM3_Init+0x10c>)
 8001722:	4a33      	ldr	r2, [pc, #204]	; (80017f0 <MX_TIM3_Init+0x110>)
 8001724:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001726:	4b31      	ldr	r3, [pc, #196]	; (80017ec <MX_TIM3_Init+0x10c>)
 8001728:	2200      	movs	r2, #0
 800172a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172c:	4b2f      	ldr	r3, [pc, #188]	; (80017ec <MX_TIM3_Init+0x10c>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4200;
 8001732:	4b2e      	ldr	r3, [pc, #184]	; (80017ec <MX_TIM3_Init+0x10c>)
 8001734:	f241 0268 	movw	r2, #4200	; 0x1068
 8001738:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173a:	4b2c      	ldr	r3, [pc, #176]	; (80017ec <MX_TIM3_Init+0x10c>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001740:	4b2a      	ldr	r3, [pc, #168]	; (80017ec <MX_TIM3_Init+0x10c>)
 8001742:	2200      	movs	r2, #0
 8001744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001746:	4829      	ldr	r0, [pc, #164]	; (80017ec <MX_TIM3_Init+0x10c>)
 8001748:	f003 fff2 	bl	8005730 <HAL_TIM_Base_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001752:	f000 fa37 	bl	8001bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800175a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800175c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001760:	4619      	mov	r1, r3
 8001762:	4822      	ldr	r0, [pc, #136]	; (80017ec <MX_TIM3_Init+0x10c>)
 8001764:	f004 fb0a 	bl	8005d7c <HAL_TIM_ConfigClockSource>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800176e:	f000 fa29 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001772:	481e      	ldr	r0, [pc, #120]	; (80017ec <MX_TIM3_Init+0x10c>)
 8001774:	f004 f82b 	bl	80057ce <HAL_TIM_OC_Init>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 800177e:	f000 fa21 	bl	8001bc4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8001782:	2305      	movs	r3, #5
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001786:	2300      	movs	r3, #0
 8001788:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800178a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178e:	4619      	mov	r1, r3
 8001790:	4816      	ldr	r0, [pc, #88]	; (80017ec <MX_TIM3_Init+0x10c>)
 8001792:	f004 fbaa 	bl	8005eea <HAL_TIM_SlaveConfigSynchro>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 800179c:	f000 fa12 	bl	8001bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80017a4:	2380      	movs	r3, #128	; 0x80
 80017a6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017a8:	f107 031c 	add.w	r3, r7, #28
 80017ac:	4619      	mov	r1, r3
 80017ae:	480f      	ldr	r0, [pc, #60]	; (80017ec <MX_TIM3_Init+0x10c>)
 80017b0:	f004 ffa6 	bl	8006700 <HAL_TIMEx_MasterConfigSynchronization>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80017ba:	f000 fa03 	bl	8001bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80017be:	2330      	movs	r3, #48	; 0x30
 80017c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017ce:	463b      	mov	r3, r7
 80017d0:	2200      	movs	r2, #0
 80017d2:	4619      	mov	r1, r3
 80017d4:	4805      	ldr	r0, [pc, #20]	; (80017ec <MX_TIM3_Init+0x10c>)
 80017d6:	f004 f9ab 	bl	8005b30 <HAL_TIM_OC_ConfigChannel>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80017e0:	f000 f9f0 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017e4:	bf00      	nop
 80017e6:	3748      	adds	r7, #72	; 0x48
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	200002b0 	.word	0x200002b0
 80017f0:	40000400 	.word	0x40000400

080017f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <MX_DMA_Init+0x4c>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a0f      	ldr	r2, [pc, #60]	; (8001840 <MX_DMA_Init+0x4c>)
 8001804:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <MX_DMA_Init+0x4c>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	603b      	str	r3, [r7, #0]
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <MX_DMA_Init+0x4c>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a08      	ldr	r2, [pc, #32]	; (8001840 <MX_DMA_Init+0x4c>)
 8001820:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <MX_DMA_Init+0x4c>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	683b      	ldr	r3, [r7, #0]

}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800

08001844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08c      	sub	sp, #48	; 0x30
 8001848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184a:	f107 031c 	add.w	r3, r7, #28
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
 8001858:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	61bb      	str	r3, [r7, #24]
 800185e:	4b7e      	ldr	r3, [pc, #504]	; (8001a58 <MX_GPIO_Init+0x214>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a7d      	ldr	r2, [pc, #500]	; (8001a58 <MX_GPIO_Init+0x214>)
 8001864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b7b      	ldr	r3, [pc, #492]	; (8001a58 <MX_GPIO_Init+0x214>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001872:	61bb      	str	r3, [r7, #24]
 8001874:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	4b77      	ldr	r3, [pc, #476]	; (8001a58 <MX_GPIO_Init+0x214>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a76      	ldr	r2, [pc, #472]	; (8001a58 <MX_GPIO_Init+0x214>)
 8001880:	f043 0304 	orr.w	r3, r3, #4
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b74      	ldr	r3, [pc, #464]	; (8001a58 <MX_GPIO_Init+0x214>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	4b70      	ldr	r3, [pc, #448]	; (8001a58 <MX_GPIO_Init+0x214>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a6f      	ldr	r2, [pc, #444]	; (8001a58 <MX_GPIO_Init+0x214>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b6d      	ldr	r3, [pc, #436]	; (8001a58 <MX_GPIO_Init+0x214>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	4b69      	ldr	r3, [pc, #420]	; (8001a58 <MX_GPIO_Init+0x214>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a68      	ldr	r2, [pc, #416]	; (8001a58 <MX_GPIO_Init+0x214>)
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b66      	ldr	r3, [pc, #408]	; (8001a58 <MX_GPIO_Init+0x214>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	4b62      	ldr	r3, [pc, #392]	; (8001a58 <MX_GPIO_Init+0x214>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a61      	ldr	r2, [pc, #388]	; (8001a58 <MX_GPIO_Init+0x214>)
 80018d4:	f043 0310 	orr.w	r3, r3, #16
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b5f      	ldr	r3, [pc, #380]	; (8001a58 <MX_GPIO_Init+0x214>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0310 	and.w	r3, r3, #16
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	4b5b      	ldr	r3, [pc, #364]	; (8001a58 <MX_GPIO_Init+0x214>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a5a      	ldr	r2, [pc, #360]	; (8001a58 <MX_GPIO_Init+0x214>)
 80018f0:	f043 0308 	orr.w	r3, r3, #8
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b58      	ldr	r3, [pc, #352]	; (8001a58 <MX_GPIO_Init+0x214>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RESET_3_Pin|LED_4_Pin|LED_3_Pin|LED_1_Pin, GPIO_PIN_RESET);
 8001902:	2200      	movs	r2, #0
 8001904:	f44f 7158 	mov.w	r1, #864	; 0x360
 8001908:	4854      	ldr	r0, [pc, #336]	; (8001a5c <MX_GPIO_Init+0x218>)
 800190a:	f002 fe87 	bl	800461c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_2_GPIO_Port, RESET_2_Pin, GPIO_PIN_RESET);
 800190e:	2200      	movs	r2, #0
 8001910:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001914:	4852      	ldr	r0, [pc, #328]	; (8001a60 <MX_GPIO_Init+0x21c>)
 8001916:	f002 fe81 	bl	800461c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_1_GPIO_Port, RESET_1_Pin, GPIO_PIN_RESET);
 800191a:	2200      	movs	r2, #0
 800191c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001920:	4850      	ldr	r0, [pc, #320]	; (8001a64 <MX_GPIO_Init+0x220>)
 8001922:	f002 fe7b 	bl	800461c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, O_D_Led1_Pin|O_D_Led2_Pin|O_D_Led3_Pin|O_D_Led4_Pin, GPIO_PIN_RESET);
 8001926:	2200      	movs	r2, #0
 8001928:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800192c:	484e      	ldr	r0, [pc, #312]	; (8001a68 <MX_GPIO_Init+0x224>)
 800192e:	f002 fe75 	bl	800461c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001932:	2200      	movs	r2, #0
 8001934:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001938:	484c      	ldr	r0, [pc, #304]	; (8001a6c <MX_GPIO_Init+0x228>)
 800193a:	f002 fe6f 	bl	800461c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FAULT_3_Pin */
  GPIO_InitStruct.Pin = FAULT_3_Pin;
 800193e:	2340      	movs	r3, #64	; 0x40
 8001940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001942:	2300      	movs	r3, #0
 8001944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(FAULT_3_GPIO_Port, &GPIO_InitStruct);
 800194a:	f107 031c 	add.w	r3, r7, #28
 800194e:	4619      	mov	r1, r3
 8001950:	4846      	ldr	r0, [pc, #280]	; (8001a6c <MX_GPIO_Init+0x228>)
 8001952:	f002 fcb1 	bl	80042b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_3_Pin LED_4_Pin LED_3_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = RESET_3_Pin|LED_4_Pin|LED_3_Pin|LED_1_Pin;
 8001956:	f44f 7358 	mov.w	r3, #864	; 0x360
 800195a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195c:	2301      	movs	r3, #1
 800195e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001964:	2300      	movs	r3, #0
 8001966:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001968:	f107 031c 	add.w	r3, r7, #28
 800196c:	4619      	mov	r1, r3
 800196e:	483b      	ldr	r0, [pc, #236]	; (8001a5c <MX_GPIO_Init+0x218>)
 8001970:	f002 fca2 	bl	80042b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FAULT_2_Pin */
  GPIO_InitStruct.Pin = FAULT_2_Pin;
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001978:	2300      	movs	r3, #0
 800197a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(FAULT_2_GPIO_Port, &GPIO_InitStruct);
 8001980:	f107 031c 	add.w	r3, r7, #28
 8001984:	4619      	mov	r1, r3
 8001986:	4836      	ldr	r0, [pc, #216]	; (8001a60 <MX_GPIO_Init+0x21c>)
 8001988:	f002 fc96 	bl	80042b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_2_Pin */
  GPIO_InitStruct.Pin = RESET_2_Pin;
 800198c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001992:	2301      	movs	r3, #1
 8001994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199a:	2300      	movs	r3, #0
 800199c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RESET_2_GPIO_Port, &GPIO_InitStruct);
 800199e:	f107 031c 	add.w	r3, r7, #28
 80019a2:	4619      	mov	r1, r3
 80019a4:	482e      	ldr	r0, [pc, #184]	; (8001a60 <MX_GPIO_Init+0x21c>)
 80019a6:	f002 fc87 	bl	80042b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FAULT_1_Pin */
  GPIO_InitStruct.Pin = FAULT_1_Pin;
 80019aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b0:	2300      	movs	r3, #0
 80019b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(FAULT_1_GPIO_Port, &GPIO_InitStruct);
 80019b8:	f107 031c 	add.w	r3, r7, #28
 80019bc:	4619      	mov	r1, r3
 80019be:	4829      	ldr	r0, [pc, #164]	; (8001a64 <MX_GPIO_Init+0x220>)
 80019c0:	f002 fc7a 	bl	80042b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_1_Pin */
  GPIO_InitStruct.Pin = RESET_1_Pin;
 80019c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ca:	2301      	movs	r3, #1
 80019cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2300      	movs	r3, #0
 80019d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RESET_1_GPIO_Port, &GPIO_InitStruct);
 80019d6:	f107 031c 	add.w	r3, r7, #28
 80019da:	4619      	mov	r1, r3
 80019dc:	4821      	ldr	r0, [pc, #132]	; (8001a64 <MX_GPIO_Init+0x220>)
 80019de:	f002 fc6b 	bl	80042b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : O_D_Led1_Pin O_D_Led2_Pin O_D_Led3_Pin O_D_Led4_Pin */
  GPIO_InitStruct.Pin = O_D_Led1_Pin|O_D_Led2_Pin|O_D_Led3_Pin|O_D_Led4_Pin;
 80019e2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80019e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e8:	2301      	movs	r3, #1
 80019ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019f4:	f107 031c 	add.w	r3, r7, #28
 80019f8:	4619      	mov	r1, r3
 80019fa:	481b      	ldr	r0, [pc, #108]	; (8001a68 <MX_GPIO_Init+0x224>)
 80019fc:	f002 fc5c 	bl	80042b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_2_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin;
 8001a00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a06:	2301      	movs	r3, #1
 8001a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_2_GPIO_Port, &GPIO_InitStruct);
 8001a12:	f107 031c 	add.w	r3, r7, #28
 8001a16:	4619      	mov	r1, r3
 8001a18:	4814      	ldr	r0, [pc, #80]	; (8001a6c <MX_GPIO_Init+0x228>)
 8001a1a:	f002 fc4d 	bl	80042b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : KM_Pin QF_Pin */
  GPIO_InitStruct.Pin = KM_Pin|QF_Pin;
 8001a1e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a24:	2300      	movs	r3, #0
 8001a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	4619      	mov	r1, r3
 8001a32:	480a      	ldr	r0, [pc, #40]	; (8001a5c <MX_GPIO_Init+0x218>)
 8001a34:	f002 fc40 	bl	80042b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SB_1_Pin SB_2_Pin */
  GPIO_InitStruct.Pin = SB_1_Pin|SB_2_Pin;
 8001a38:	2305      	movs	r3, #5
 8001a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a44:	f107 031c 	add.w	r3, r7, #28
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4807      	ldr	r0, [pc, #28]	; (8001a68 <MX_GPIO_Init+0x224>)
 8001a4c:	f002 fc34 	bl	80042b8 <HAL_GPIO_Init>

}
 8001a50:	bf00      	nop
 8001a52:	3730      	adds	r7, #48	; 0x30
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40020800 	.word	0x40020800
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40020400 	.word	0x40020400
 8001a68:	40020c00 	.word	0x40020c00
 8001a6c:	40020000 	.word	0x40020000

08001a70 <Device_MainTimerStart>:

/* USER CODE BEGIN 4 */
void Device_MainTimerStart(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
HAL_TIM_Base_Start_IT(&htim1); 
 8001a74:	4802      	ldr	r0, [pc, #8]	; (8001a80 <Device_MainTimerStart+0x10>)
 8001a76:	f003 fe86 	bl	8005786 <HAL_TIM_Base_Start_IT>
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200002f8 	.word	0x200002f8

08001a84 <Device_DAC_ON>:
{
HAL_TIM_Base_Stop_IT(&htim1); 
}

void Device_DAC_ON(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4804      	ldr	r0, [pc, #16]	; (8001a9c <Device_DAC_ON+0x18>)
 8001a8c:	f002 f957 	bl	8003d3e <HAL_DAC_Start>
  HAL_DAC_Start(&hdac,DAC_CHANNEL_2);
 8001a90:	2110      	movs	r1, #16
 8001a92:	4802      	ldr	r0, [pc, #8]	; (8001a9c <Device_DAC_ON+0x18>)
 8001a94:	f002 f953 	bl	8003d3e <HAL_DAC_Start>
}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	200001e4 	.word	0x200001e4

08001aa0 <Device_ADC_Start>:
void Device_ADC_Start(unsigned short *Device_ADC_Buf,unsigned short Lenght)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	807b      	strh	r3, [r7, #2]
  /*  x        1        x        x
ADC1  x,       iU,      x,       x.
ADC2  x,       iV,      x,       x.
ADC3  x,       iW,      x,       x.
*/
        __HAL_ADC_ENABLE(&hadc2);
 8001aac:	4b22      	ldr	r3, [pc, #136]	; (8001b38 <Device_ADC_Start+0x98>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <Device_ADC_Start+0x98>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0201 	orr.w	r2, r2, #1
 8001aba:	609a      	str	r2, [r3, #8]
	__HAL_ADC_ENABLE(&hadc3);
 8001abc:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <Device_ADC_Start+0x9c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	4b1e      	ldr	r3, [pc, #120]	; (8001b3c <Device_ADC_Start+0x9c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0201 	orr.w	r2, r2, #1
 8001aca:	609a      	str	r2, [r3, #8]
HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*)Device_ADC_Buf, Lenght);
 8001acc:	887b      	ldrh	r3, [r7, #2]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	481b      	ldr	r0, [pc, #108]	; (8001b40 <Device_ADC_Start+0xa0>)
 8001ad4:	f001 fe54 	bl	8003780 <HAL_ADCEx_MultiModeStart_DMA>
__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_TC);
 8001ad8:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <Device_ADC_Start+0xa4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <Device_ADC_Start+0xa4>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 0210 	bic.w	r2, r2, #16
 8001ae6:	601a      	str	r2, [r3, #0]
__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_HT);
 8001ae8:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <Device_ADC_Start+0xa4>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <Device_ADC_Start+0xa4>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0208 	bic.w	r2, r2, #8
 8001af6:	601a      	str	r2, [r3, #0]
__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_TE);
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <Device_ADC_Start+0xa4>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <Device_ADC_Start+0xa4>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0204 	bic.w	r2, r2, #4
 8001b06:	601a      	str	r2, [r3, #0]
__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_FE);
 8001b08:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <Device_ADC_Start+0xa4>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	695a      	ldr	r2, [r3, #20]
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <Device_ADC_Start+0xa4>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b16:	615a      	str	r2, [r3, #20]
__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_DME);
 8001b18:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <Device_ADC_Start+0xa4>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <Device_ADC_Start+0xa4>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0202 	bic.w	r2, r2, #2
 8001b26:	601a      	str	r2, [r3, #0]
HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);  
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4807      	ldr	r0, [pc, #28]	; (8001b48 <Device_ADC_Start+0xa8>)
 8001b2c:	f003 fe84 	bl	8005838 <HAL_TIM_OC_Start>
}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	200000ac 	.word	0x200000ac
 8001b3c:	2000013c 	.word	0x2000013c
 8001b40:	200000f4 	.word	0x200000f4
 8001b44:	20000184 	.word	0x20000184
 8001b48:	200002b0 	.word	0x200002b0

08001b4c <Device_PWM_Channels_ON>:

void Device_PWM_Channels_ON(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
TIM_CCxChannelCmd(TIM1, TIM_CHANNEL_1, TIM_CCx_ENABLE | TIM_CCxN_ENABLE);
 8001b50:	2205      	movs	r2, #5
 8001b52:	2100      	movs	r1, #0
 8001b54:	480b      	ldr	r0, [pc, #44]	; (8001b84 <Device_PWM_Channels_ON+0x38>)
 8001b56:	f004 fdad 	bl	80066b4 <TIM_CCxChannelCmd>
TIM_CCxChannelCmd(TIM1, TIM_CHANNEL_2, TIM_CCx_ENABLE | TIM_CCxN_ENABLE);
 8001b5a:	2205      	movs	r2, #5
 8001b5c:	2104      	movs	r1, #4
 8001b5e:	4809      	ldr	r0, [pc, #36]	; (8001b84 <Device_PWM_Channels_ON+0x38>)
 8001b60:	f004 fda8 	bl	80066b4 <TIM_CCxChannelCmd>
TIM_CCxChannelCmd(TIM1, TIM_CHANNEL_3, TIM_CCx_ENABLE | TIM_CCxN_ENABLE);
 8001b64:	2205      	movs	r2, #5
 8001b66:	2108      	movs	r1, #8
 8001b68:	4806      	ldr	r0, [pc, #24]	; (8001b84 <Device_PWM_Channels_ON+0x38>)
 8001b6a:	f004 fda3 	bl	80066b4 <TIM_CCxChannelCmd>
__HAL_TIM_MOE_ENABLE(&htim1);
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <Device_PWM_Channels_ON+0x3c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <Device_PWM_Channels_ON+0x3c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b7c:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40010000 	.word	0x40010000
 8001b88:	200002f8 	.word	0x200002f8

08001b8c <Device_DAC_Out_PA4_CH1>:
{
  LED_GPIO_Port->BSRR = LED_Pin<<16;
}

void Device_DAC_Out_PA4_CH1(float PA4_ch1)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	ed87 0a01 	vstr	s0, [r7, #4]
    HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,(int)(PA4_ch1*4096.0f));
 8001b96:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b9a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001bbc <Device_DAC_Out_PA4_CH1+0x30>
 8001b9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ba2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ba6:	ee17 3a90 	vmov	r3, s15
 8001baa:	2200      	movs	r2, #0
 8001bac:	2100      	movs	r1, #0
 8001bae:	4804      	ldr	r0, [pc, #16]	; (8001bc0 <Device_DAC_Out_PA4_CH1+0x34>)
 8001bb0:	f002 f978 	bl	8003ea4 <HAL_DAC_SetValue>
}
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	45800000 	.word	0x45800000
 8001bc0:	200001e4 	.word	0x200001e4

08001bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	607b      	str	r3, [r7, #4]
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <HAL_MspInit+0x4c>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	4a0f      	ldr	r2, [pc, #60]	; (8001c20 <HAL_MspInit+0x4c>)
 8001be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <HAL_MspInit+0x4c>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf2:	607b      	str	r3, [r7, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	603b      	str	r3, [r7, #0]
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_MspInit+0x4c>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	4a08      	ldr	r2, [pc, #32]	; (8001c20 <HAL_MspInit+0x4c>)
 8001c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c04:	6413      	str	r3, [r2, #64]	; 0x40
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_MspInit+0x4c>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	603b      	str	r3, [r7, #0]
 8001c10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800

08001c24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08e      	sub	sp, #56	; 0x38
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a5d      	ldr	r2, [pc, #372]	; (8001db8 <HAL_ADC_MspInit+0x194>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d158      	bne.n	8001cf8 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	623b      	str	r3, [r7, #32]
 8001c4a:	4b5c      	ldr	r3, [pc, #368]	; (8001dbc <HAL_ADC_MspInit+0x198>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	4a5b      	ldr	r2, [pc, #364]	; (8001dbc <HAL_ADC_MspInit+0x198>)
 8001c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c54:	6453      	str	r3, [r2, #68]	; 0x44
 8001c56:	4b59      	ldr	r3, [pc, #356]	; (8001dbc <HAL_ADC_MspInit+0x198>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5e:	623b      	str	r3, [r7, #32]
 8001c60:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
 8001c66:	4b55      	ldr	r3, [pc, #340]	; (8001dbc <HAL_ADC_MspInit+0x198>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	4a54      	ldr	r2, [pc, #336]	; (8001dbc <HAL_ADC_MspInit+0x198>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	6313      	str	r3, [r2, #48]	; 0x30
 8001c72:	4b52      	ldr	r3, [pc, #328]	; (8001dbc <HAL_ADC_MspInit+0x198>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	61fb      	str	r3, [r7, #28]
 8001c7c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = IU_Pin|Id_Pin;
 8001c7e:	230a      	movs	r3, #10
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c82:	2303      	movs	r3, #3
 8001c84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c8e:	4619      	mov	r1, r3
 8001c90:	484b      	ldr	r0, [pc, #300]	; (8001dc0 <HAL_ADC_MspInit+0x19c>)
 8001c92:	f002 fb11 	bl	80042b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001c96:	4b4b      	ldr	r3, [pc, #300]	; (8001dc4 <HAL_ADC_MspInit+0x1a0>)
 8001c98:	4a4b      	ldr	r2, [pc, #300]	; (8001dc8 <HAL_ADC_MspInit+0x1a4>)
 8001c9a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001c9c:	4b49      	ldr	r3, [pc, #292]	; (8001dc4 <HAL_ADC_MspInit+0x1a0>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ca2:	4b48      	ldr	r3, [pc, #288]	; (8001dc4 <HAL_ADC_MspInit+0x1a0>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ca8:	4b46      	ldr	r3, [pc, #280]	; (8001dc4 <HAL_ADC_MspInit+0x1a0>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cae:	4b45      	ldr	r3, [pc, #276]	; (8001dc4 <HAL_ADC_MspInit+0x1a0>)
 8001cb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cb4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cb6:	4b43      	ldr	r3, [pc, #268]	; (8001dc4 <HAL_ADC_MspInit+0x1a0>)
 8001cb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cbc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cbe:	4b41      	ldr	r3, [pc, #260]	; (8001dc4 <HAL_ADC_MspInit+0x1a0>)
 8001cc0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cc4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001cc6:	4b3f      	ldr	r3, [pc, #252]	; (8001dc4 <HAL_ADC_MspInit+0x1a0>)
 8001cc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ccc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001cce:	4b3d      	ldr	r3, [pc, #244]	; (8001dc4 <HAL_ADC_MspInit+0x1a0>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cd4:	4b3b      	ldr	r3, [pc, #236]	; (8001dc4 <HAL_ADC_MspInit+0x1a0>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001cda:	483a      	ldr	r0, [pc, #232]	; (8001dc4 <HAL_ADC_MspInit+0x1a0>)
 8001cdc:	f002 f908 	bl	8003ef0 <HAL_DMA_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001ce6:	f7ff ff6d 	bl	8001bc4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a35      	ldr	r2, [pc, #212]	; (8001dc4 <HAL_ADC_MspInit+0x1a0>)
 8001cee:	639a      	str	r2, [r3, #56]	; 0x38
 8001cf0:	4a34      	ldr	r2, [pc, #208]	; (8001dc4 <HAL_ADC_MspInit+0x1a0>)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001cf6:	e05a      	b.n	8001dae <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC2)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a33      	ldr	r2, [pc, #204]	; (8001dcc <HAL_ADC_MspInit+0x1a8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d128      	bne.n	8001d54 <HAL_ADC_MspInit+0x130>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	61bb      	str	r3, [r7, #24]
 8001d06:	4b2d      	ldr	r3, [pc, #180]	; (8001dbc <HAL_ADC_MspInit+0x198>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	4a2c      	ldr	r2, [pc, #176]	; (8001dbc <HAL_ADC_MspInit+0x198>)
 8001d0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d10:	6453      	str	r3, [r2, #68]	; 0x44
 8001d12:	4b2a      	ldr	r3, [pc, #168]	; (8001dbc <HAL_ADC_MspInit+0x198>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d1a:	61bb      	str	r3, [r7, #24]
 8001d1c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	4b26      	ldr	r3, [pc, #152]	; (8001dbc <HAL_ADC_MspInit+0x198>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	4a25      	ldr	r2, [pc, #148]	; (8001dbc <HAL_ADC_MspInit+0x198>)
 8001d28:	f043 0304 	orr.w	r3, r3, #4
 8001d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2e:	4b23      	ldr	r3, [pc, #140]	; (8001dbc <HAL_ADC_MspInit+0x198>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	f003 0304 	and.w	r3, r3, #4
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = IV_Pin;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IV_GPIO_Port, &GPIO_InitStruct);
 8001d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4820      	ldr	r0, [pc, #128]	; (8001dd0 <HAL_ADC_MspInit+0x1ac>)
 8001d4e:	f002 fab3 	bl	80042b8 <HAL_GPIO_Init>
}
 8001d52:	e02c      	b.n	8001dae <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a1e      	ldr	r2, [pc, #120]	; (8001dd4 <HAL_ADC_MspInit+0x1b0>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d127      	bne.n	8001dae <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <HAL_ADC_MspInit+0x198>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	4a15      	ldr	r2, [pc, #84]	; (8001dbc <HAL_ADC_MspInit+0x198>)
 8001d68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d6e:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <HAL_ADC_MspInit+0x198>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <HAL_ADC_MspInit+0x198>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	4a0e      	ldr	r2, [pc, #56]	; (8001dbc <HAL_ADC_MspInit+0x198>)
 8001d84:	f043 0304 	orr.w	r3, r3, #4
 8001d88:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <HAL_ADC_MspInit+0x198>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IW_Pin;
 8001d96:	2304      	movs	r3, #4
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IW_GPIO_Port, &GPIO_InitStruct);
 8001da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da6:	4619      	mov	r1, r3
 8001da8:	4809      	ldr	r0, [pc, #36]	; (8001dd0 <HAL_ADC_MspInit+0x1ac>)
 8001daa:	f002 fa85 	bl	80042b8 <HAL_GPIO_Init>
}
 8001dae:	bf00      	nop
 8001db0:	3738      	adds	r7, #56	; 0x38
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40012000 	.word	0x40012000
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40020000 	.word	0x40020000
 8001dc4:	20000184 	.word	0x20000184
 8001dc8:	40026410 	.word	0x40026410
 8001dcc:	40012100 	.word	0x40012100
 8001dd0:	40020800 	.word	0x40020800
 8001dd4:	40012200 	.word	0x40012200

08001dd8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	; 0x28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a17      	ldr	r2, [pc, #92]	; (8001e54 <HAL_DAC_MspInit+0x7c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d127      	bne.n	8001e4a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <HAL_DAC_MspInit+0x80>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	4a15      	ldr	r2, [pc, #84]	; (8001e58 <HAL_DAC_MspInit+0x80>)
 8001e04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e08:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0a:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <HAL_DAC_MspInit+0x80>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <HAL_DAC_MspInit+0x80>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a0e      	ldr	r2, [pc, #56]	; (8001e58 <HAL_DAC_MspInit+0x80>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <HAL_DAC_MspInit+0x80>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001e32:	2330      	movs	r3, #48	; 0x30
 8001e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e36:	2303      	movs	r3, #3
 8001e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3e:	f107 0314 	add.w	r3, r7, #20
 8001e42:	4619      	mov	r1, r3
 8001e44:	4805      	ldr	r0, [pc, #20]	; (8001e5c <HAL_DAC_MspInit+0x84>)
 8001e46:	f002 fa37 	bl	80042b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001e4a:	bf00      	nop
 8001e4c:	3728      	adds	r7, #40	; 0x28
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40007400 	.word	0x40007400
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40020000 	.word	0x40020000

08001e60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08a      	sub	sp, #40	; 0x28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a4a      	ldr	r2, [pc, #296]	; (8001fa8 <HAL_SPI_MspInit+0x148>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	f040 808d 	bne.w	8001f9e <HAL_SPI_MspInit+0x13e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e84:	2300      	movs	r3, #0
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	4b48      	ldr	r3, [pc, #288]	; (8001fac <HAL_SPI_MspInit+0x14c>)
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	4a47      	ldr	r2, [pc, #284]	; (8001fac <HAL_SPI_MspInit+0x14c>)
 8001e8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e92:	6413      	str	r3, [r2, #64]	; 0x40
 8001e94:	4b45      	ldr	r3, [pc, #276]	; (8001fac <HAL_SPI_MspInit+0x14c>)
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	4b41      	ldr	r3, [pc, #260]	; (8001fac <HAL_SPI_MspInit+0x14c>)
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea8:	4a40      	ldr	r2, [pc, #256]	; (8001fac <HAL_SPI_MspInit+0x14c>)
 8001eaa:	f043 0302 	orr.w	r3, r3, #2
 8001eae:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb0:	4b3e      	ldr	r3, [pc, #248]	; (8001fac <HAL_SPI_MspInit+0x14c>)
 8001eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8001ebc:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 8001ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ece:	2305      	movs	r3, #5
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed2:	f107 0314 	add.w	r3, r7, #20
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4835      	ldr	r0, [pc, #212]	; (8001fb0 <HAL_SPI_MspInit+0x150>)
 8001eda:	f002 f9ed 	bl	80042b8 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001ede:	4b35      	ldr	r3, [pc, #212]	; (8001fb4 <HAL_SPI_MspInit+0x154>)
 8001ee0:	4a35      	ldr	r2, [pc, #212]	; (8001fb8 <HAL_SPI_MspInit+0x158>)
 8001ee2:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001ee4:	4b33      	ldr	r3, [pc, #204]	; (8001fb4 <HAL_SPI_MspInit+0x154>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001eea:	4b32      	ldr	r3, [pc, #200]	; (8001fb4 <HAL_SPI_MspInit+0x154>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ef0:	4b30      	ldr	r3, [pc, #192]	; (8001fb4 <HAL_SPI_MspInit+0x154>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ef6:	4b2f      	ldr	r3, [pc, #188]	; (8001fb4 <HAL_SPI_MspInit+0x154>)
 8001ef8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001efc:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001efe:	4b2d      	ldr	r3, [pc, #180]	; (8001fb4 <HAL_SPI_MspInit+0x154>)
 8001f00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f04:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f06:	4b2b      	ldr	r3, [pc, #172]	; (8001fb4 <HAL_SPI_MspInit+0x154>)
 8001f08:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f0c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001f0e:	4b29      	ldr	r3, [pc, #164]	; (8001fb4 <HAL_SPI_MspInit+0x154>)
 8001f10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f14:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f16:	4b27      	ldr	r3, [pc, #156]	; (8001fb4 <HAL_SPI_MspInit+0x154>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f1c:	4b25      	ldr	r3, [pc, #148]	; (8001fb4 <HAL_SPI_MspInit+0x154>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001f22:	4824      	ldr	r0, [pc, #144]	; (8001fb4 <HAL_SPI_MspInit+0x154>)
 8001f24:	f001 ffe4 	bl	8003ef0 <HAL_DMA_Init>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_SPI_MspInit+0xd2>
    {
      Error_Handler();
 8001f2e:	f7ff fe49 	bl	8001bc4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a1f      	ldr	r2, [pc, #124]	; (8001fb4 <HAL_SPI_MspInit+0x154>)
 8001f36:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f38:	4a1e      	ldr	r2, [pc, #120]	; (8001fb4 <HAL_SPI_MspInit+0x154>)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001f3e:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <HAL_SPI_MspInit+0x15c>)
 8001f40:	4a1f      	ldr	r2, [pc, #124]	; (8001fc0 <HAL_SPI_MspInit+0x160>)
 8001f42:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001f44:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <HAL_SPI_MspInit+0x15c>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f4a:	4b1c      	ldr	r3, [pc, #112]	; (8001fbc <HAL_SPI_MspInit+0x15c>)
 8001f4c:	2240      	movs	r2, #64	; 0x40
 8001f4e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f50:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <HAL_SPI_MspInit+0x15c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f56:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <HAL_SPI_MspInit+0x15c>)
 8001f58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f5c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f5e:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <HAL_SPI_MspInit+0x15c>)
 8001f60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f64:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <HAL_SPI_MspInit+0x15c>)
 8001f68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f6c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001f6e:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <HAL_SPI_MspInit+0x15c>)
 8001f70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f74:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f76:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <HAL_SPI_MspInit+0x15c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <HAL_SPI_MspInit+0x15c>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001f82:	480e      	ldr	r0, [pc, #56]	; (8001fbc <HAL_SPI_MspInit+0x15c>)
 8001f84:	f001 ffb4 	bl	8003ef0 <HAL_DMA_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_SPI_MspInit+0x132>
    {
      Error_Handler();
 8001f8e:	f7ff fe19 	bl	8001bc4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a09      	ldr	r2, [pc, #36]	; (8001fbc <HAL_SPI_MspInit+0x15c>)
 8001f96:	649a      	str	r2, [r3, #72]	; 0x48
 8001f98:	4a08      	ldr	r2, [pc, #32]	; (8001fbc <HAL_SPI_MspInit+0x15c>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001f9e:	bf00      	nop
 8001fa0:	3728      	adds	r7, #40	; 0x28
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40003800 	.word	0x40003800
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40020400 	.word	0x40020400
 8001fb4:	20000250 	.word	0x20000250
 8001fb8:	40026058 	.word	0x40026058
 8001fbc:	20000338 	.word	0x20000338
 8001fc0:	40026070 	.word	0x40026070

08001fc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a18      	ldr	r2, [pc, #96]	; (8002034 <HAL_TIM_Base_MspInit+0x70>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d116      	bne.n	8002004 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	4b17      	ldr	r3, [pc, #92]	; (8002038 <HAL_TIM_Base_MspInit+0x74>)
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	4a16      	ldr	r2, [pc, #88]	; (8002038 <HAL_TIM_Base_MspInit+0x74>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fe6:	4b14      	ldr	r3, [pc, #80]	; (8002038 <HAL_TIM_Base_MspInit+0x74>)
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	2019      	movs	r0, #25
 8001ff8:	f001 fe3b 	bl	8003c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ffc:	2019      	movs	r0, #25
 8001ffe:	f001 fe54 	bl	8003caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002002:	e012      	b.n	800202a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a0c      	ldr	r2, [pc, #48]	; (800203c <HAL_TIM_Base_MspInit+0x78>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d10d      	bne.n	800202a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	4b09      	ldr	r3, [pc, #36]	; (8002038 <HAL_TIM_Base_MspInit+0x74>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	4a08      	ldr	r2, [pc, #32]	; (8002038 <HAL_TIM_Base_MspInit+0x74>)
 8002018:	f043 0302 	orr.w	r3, r3, #2
 800201c:	6413      	str	r3, [r2, #64]	; 0x40
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <HAL_TIM_Base_MspInit+0x74>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	68bb      	ldr	r3, [r7, #8]
}
 800202a:	bf00      	nop
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40010000 	.word	0x40010000
 8002038:	40023800 	.word	0x40023800
 800203c:	40000400 	.word	0x40000400

08002040 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08a      	sub	sp, #40	; 0x28
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a21      	ldr	r2, [pc, #132]	; (80020e4 <HAL_TIM_MspPostInit+0xa4>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d13c      	bne.n	80020dc <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	4b20      	ldr	r3, [pc, #128]	; (80020e8 <HAL_TIM_MspPostInit+0xa8>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	4a1f      	ldr	r2, [pc, #124]	; (80020e8 <HAL_TIM_MspPostInit+0xa8>)
 800206c:	f043 0302 	orr.w	r3, r3, #2
 8002070:	6313      	str	r3, [r2, #48]	; 0x30
 8002072:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <HAL_TIM_MspPostInit+0xa8>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <HAL_TIM_MspPostInit+0xa8>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	4a18      	ldr	r2, [pc, #96]	; (80020e8 <HAL_TIM_MspPostInit+0xa8>)
 8002088:	f043 0310 	orr.w	r3, r3, #16
 800208c:	6313      	str	r3, [r2, #48]	; 0x30
 800208e:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <HAL_TIM_MspPostInit+0xa8>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f003 0310 	and.w	r3, r3, #16
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = VL_Pin|WL_Pin;
 800209a:	2303      	movs	r3, #3
 800209c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209e:	2302      	movs	r3, #2
 80020a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a6:	2300      	movs	r3, #0
 80020a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020aa:	2301      	movs	r3, #1
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ae:	f107 0314 	add.w	r3, r7, #20
 80020b2:	4619      	mov	r1, r3
 80020b4:	480d      	ldr	r0, [pc, #52]	; (80020ec <HAL_TIM_MspPostInit+0xac>)
 80020b6:	f002 f8ff 	bl	80042b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UL_Pin|UH_Pin|VH_Pin|WH_Pin;
 80020ba:	f44f 532c 	mov.w	r3, #11008	; 0x2b00
 80020be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c0:	2302      	movs	r3, #2
 80020c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c8:	2300      	movs	r3, #0
 80020ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020cc:	2301      	movs	r3, #1
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020d0:	f107 0314 	add.w	r3, r7, #20
 80020d4:	4619      	mov	r1, r3
 80020d6:	4806      	ldr	r0, [pc, #24]	; (80020f0 <HAL_TIM_MspPostInit+0xb0>)
 80020d8:	f002 f8ee 	bl	80042b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80020dc:	bf00      	nop
 80020de:	3728      	adds	r7, #40	; 0x28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40010000 	.word	0x40010000
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40020400 	.word	0x40020400
 80020f0:	40021000 	.word	0x40021000

080020f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002106:	e7fe      	b.n	8002106 <HardFault_Handler+0x4>

08002108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800210c:	e7fe      	b.n	800210c <MemManage_Handler+0x4>

0800210e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002112:	e7fe      	b.n	8002112 <BusFault_Handler+0x4>

08002114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002118:	e7fe      	b.n	8002118 <UsageFault_Handler+0x4>

0800211a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800211a:	b480      	push	{r7}
 800211c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002148:	f001 f858 	bl	80031fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}

08002150 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

static float Bufer_A_B[2];
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002154:	488a      	ldr	r0, [pc, #552]	; (8002380 <TIM1_UP_TIM10_IRQHandler+0x230>)
 8002156:	f003 fbe2 	bl	800591e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  /*########################################################################*/
  
  Speed_measure(&speed);
 800215a:	488a      	ldr	r0, [pc, #552]	; (8002384 <TIM1_UP_TIM10_IRQHandler+0x234>)
 800215c:	f000 f9f2 	bl	8002544 <Speed_measure>
    Current_measure(i_ABC,Device_ADC_Buf);
 8002160:	4989      	ldr	r1, [pc, #548]	; (8002388 <TIM1_UP_TIM10_IRQHandler+0x238>)
 8002162:	488a      	ldr	r0, [pc, #552]	; (800238c <TIM1_UP_TIM10_IRQHandler+0x23c>)
 8002164:	f000 fa94 	bl	8002690 <Current_measure>
   
    DSP_K_Conv_ABC_to_ab(i_ABC,i_ab);
 8002168:	4989      	ldr	r1, [pc, #548]	; (8002390 <TIM1_UP_TIM10_IRQHandler+0x240>)
 800216a:	4888      	ldr	r0, [pc, #544]	; (800238c <TIM1_UP_TIM10_IRQHandler+0x23c>)
 800216c:	f000 f9c6 	bl	80024fc <DSP_K_Conv_ABC_to_ab>
    
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0) == 1){
 8002170:	2101      	movs	r1, #1
 8002172:	4888      	ldr	r0, [pc, #544]	; (8002394 <TIM1_UP_TIM10_IRQHandler+0x244>)
 8002174:	f002 fa3a 	bl	80045ec <HAL_GPIO_ReadPin>
 8002178:	4603      	mov	r3, r0
 800217a:	2b01      	cmp	r3, #1
 800217c:	d102      	bne.n	8002184 <TIM1_UP_TIM10_IRQHandler+0x34>
    	neww = 50.0f;
 800217e:	4b86      	ldr	r3, [pc, #536]	; (8002398 <TIM1_UP_TIM10_IRQHandler+0x248>)
 8002180:	4a86      	ldr	r2, [pc, #536]	; (800239c <TIM1_UP_TIM10_IRQHandler+0x24c>)
 8002182:	601a      	str	r2, [r3, #0]
    }

    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 1){
 8002184:	2104      	movs	r1, #4
 8002186:	4883      	ldr	r0, [pc, #524]	; (8002394 <TIM1_UP_TIM10_IRQHandler+0x244>)
 8002188:	f002 fa30 	bl	80045ec <HAL_GPIO_ReadPin>
 800218c:	4603      	mov	r3, r0
 800218e:	2b01      	cmp	r3, #1
 8002190:	d103      	bne.n	800219a <TIM1_UP_TIM10_IRQHandler+0x4a>
    	neww = 0.0f;
 8002192:	4b81      	ldr	r3, [pc, #516]	; (8002398 <TIM1_UP_TIM10_IRQHandler+0x248>)
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
    }

  
  if(cnt <= 98){
 800219a:	4b81      	ldr	r3, [pc, #516]	; (80023a0 <TIM1_UP_TIM10_IRQHandler+0x250>)
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	2b62      	cmp	r3, #98	; 0x62
 80021a0:	d806      	bhi.n	80021b0 <TIM1_UP_TIM10_IRQHandler+0x60>
    cnt++;
 80021a2:	4b7f      	ldr	r3, [pc, #508]	; (80023a0 <TIM1_UP_TIM10_IRQHandler+0x250>)
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	3301      	adds	r3, #1
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	4b7d      	ldr	r3, [pc, #500]	; (80023a0 <TIM1_UP_TIM10_IRQHandler+0x250>)
 80021ac:	801a      	strh	r2, [r3, #0]
 80021ae:	e057      	b.n	8002260 <TIM1_UP_TIM10_IRQHandler+0x110>
  }
  else {
    if ((flag != 0.1f)){
 80021b0:	4b7c      	ldr	r3, [pc, #496]	; (80023a4 <TIM1_UP_TIM10_IRQHandler+0x254>)
 80021b2:	edd3 7a00 	vldr	s15, [r3]
 80021b6:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 80023a8 <TIM1_UP_TIM10_IRQHandler+0x258>
 80021ba:	eef4 7a47 	vcmp.f32	s15, s14
 80021be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c2:	d00d      	beq.n	80021e0 <TIM1_UP_TIM10_IRQHandler+0x90>
      if ((flag != 0.5f)){
 80021c4:	4b77      	ldr	r3, [pc, #476]	; (80023a4 <TIM1_UP_TIM10_IRQHandler+0x254>)
 80021c6:	edd3 7a00 	vldr	s15, [r3]
 80021ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80021ce:	eef4 7a47 	vcmp.f32	s15, s14
 80021d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d6:	d003      	beq.n	80021e0 <TIM1_UP_TIM10_IRQHandler+0x90>
        
        flag = 0;
 80021d8:	4b72      	ldr	r3, [pc, #456]	; (80023a4 <TIM1_UP_TIM10_IRQHandler+0x254>)
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
        
      }
    }
   
    if((Freq < neww) && (Freq >= 0)){
 80021e0:	4b72      	ldr	r3, [pc, #456]	; (80023ac <TIM1_UP_TIM10_IRQHandler+0x25c>)
 80021e2:	ed93 7a00 	vldr	s14, [r3]
 80021e6:	4b6c      	ldr	r3, [pc, #432]	; (8002398 <TIM1_UP_TIM10_IRQHandler+0x248>)
 80021e8:	edd3 7a00 	vldr	s15, [r3]
 80021ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f4:	d513      	bpl.n	800221e <TIM1_UP_TIM10_IRQHandler+0xce>
 80021f6:	4b6d      	ldr	r3, [pc, #436]	; (80023ac <TIM1_UP_TIM10_IRQHandler+0x25c>)
 80021f8:	edd3 7a00 	vldr	s15, [r3]
 80021fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002204:	db0b      	blt.n	800221e <TIM1_UP_TIM10_IRQHandler+0xce>
      Freq = Freq + flag;
 8002206:	4b69      	ldr	r3, [pc, #420]	; (80023ac <TIM1_UP_TIM10_IRQHandler+0x25c>)
 8002208:	ed93 7a00 	vldr	s14, [r3]
 800220c:	4b65      	ldr	r3, [pc, #404]	; (80023a4 <TIM1_UP_TIM10_IRQHandler+0x254>)
 800220e:	edd3 7a00 	vldr	s15, [r3]
 8002212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002216:	4b65      	ldr	r3, [pc, #404]	; (80023ac <TIM1_UP_TIM10_IRQHandler+0x25c>)
 8002218:	edc3 7a00 	vstr	s15, [r3]
 800221c:	e01d      	b.n	800225a <TIM1_UP_TIM10_IRQHandler+0x10a>
    }
    else if((Freq > neww) && (Freq > 0)){
 800221e:	4b63      	ldr	r3, [pc, #396]	; (80023ac <TIM1_UP_TIM10_IRQHandler+0x25c>)
 8002220:	ed93 7a00 	vldr	s14, [r3]
 8002224:	4b5c      	ldr	r3, [pc, #368]	; (8002398 <TIM1_UP_TIM10_IRQHandler+0x248>)
 8002226:	edd3 7a00 	vldr	s15, [r3]
 800222a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800222e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002232:	dd12      	ble.n	800225a <TIM1_UP_TIM10_IRQHandler+0x10a>
 8002234:	4b5d      	ldr	r3, [pc, #372]	; (80023ac <TIM1_UP_TIM10_IRQHandler+0x25c>)
 8002236:	edd3 7a00 	vldr	s15, [r3]
 800223a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800223e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002242:	dd0a      	ble.n	800225a <TIM1_UP_TIM10_IRQHandler+0x10a>
        Freq = Freq - flag;
 8002244:	4b59      	ldr	r3, [pc, #356]	; (80023ac <TIM1_UP_TIM10_IRQHandler+0x25c>)
 8002246:	ed93 7a00 	vldr	s14, [r3]
 800224a:	4b56      	ldr	r3, [pc, #344]	; (80023a4 <TIM1_UP_TIM10_IRQHandler+0x254>)
 800224c:	edd3 7a00 	vldr	s15, [r3]
 8002250:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002254:	4b55      	ldr	r3, [pc, #340]	; (80023ac <TIM1_UP_TIM10_IRQHandler+0x25c>)
 8002256:	edc3 7a00 	vstr	s15, [r3]
    }
  cnt = 0;
 800225a:	4b51      	ldr	r3, [pc, #324]	; (80023a0 <TIM1_UP_TIM10_IRQHandler+0x250>)
 800225c:	2200      	movs	r2, #0
 800225e:	801a      	strh	r2, [r3, #0]
  }
  
  if (Freq <= 0.0f){
 8002260:	4b52      	ldr	r3, [pc, #328]	; (80023ac <TIM1_UP_TIM10_IRQHandler+0x25c>)
 8002262:	edd3 7a00 	vldr	s15, [r3]
 8002266:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800226a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800226e:	d803      	bhi.n	8002278 <TIM1_UP_TIM10_IRQHandler+0x128>
      Freq = 0.0f;
 8002270:	4b4e      	ldr	r3, [pc, #312]	; (80023ac <TIM1_UP_TIM10_IRQHandler+0x25c>)
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
    }
  
  if (Freq >= 250.0f){
 8002278:	4b4c      	ldr	r3, [pc, #304]	; (80023ac <TIM1_UP_TIM10_IRQHandler+0x25c>)
 800227a:	edd3 7a00 	vldr	s15, [r3]
 800227e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80023b0 <TIM1_UP_TIM10_IRQHandler+0x260>
 8002282:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228a:	db02      	blt.n	8002292 <TIM1_UP_TIM10_IRQHandler+0x142>
      Freq = 250.0f;
 800228c:	4b47      	ldr	r3, [pc, #284]	; (80023ac <TIM1_UP_TIM10_IRQHandler+0x25c>)
 800228e:	4a49      	ldr	r2, [pc, #292]	; (80023b4 <TIM1_UP_TIM10_IRQHandler+0x264>)
 8002290:	601a      	str	r2, [r3, #0]
    }
  
  if(Freq <= 50.0f){
 8002292:	4b46      	ldr	r3, [pc, #280]	; (80023ac <TIM1_UP_TIM10_IRQHandler+0x25c>)
 8002294:	edd3 7a00 	vldr	s15, [r3]
 8002298:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80023b8 <TIM1_UP_TIM10_IRQHandler+0x268>
 800229c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a4:	d80a      	bhi.n	80022bc <TIM1_UP_TIM10_IRQHandler+0x16c>
    Amp = Freq/50.0f;
 80022a6:	4b41      	ldr	r3, [pc, #260]	; (80023ac <TIM1_UP_TIM10_IRQHandler+0x25c>)
 80022a8:	ed93 7a00 	vldr	s14, [r3]
 80022ac:	eddf 6a42 	vldr	s13, [pc, #264]	; 80023b8 <TIM1_UP_TIM10_IRQHandler+0x268>
 80022b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022b4:	4b41      	ldr	r3, [pc, #260]	; (80023bc <TIM1_UP_TIM10_IRQHandler+0x26c>)
 80022b6:	edc3 7a00 	vstr	s15, [r3]
 80022ba:	e003      	b.n	80022c4 <TIM1_UP_TIM10_IRQHandler+0x174>
  }
  else{
    Amp = 50.0f/50.0f;
 80022bc:	4b3f      	ldr	r3, [pc, #252]	; (80023bc <TIM1_UP_TIM10_IRQHandler+0x26c>)
 80022be:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80022c2:	601a      	str	r2, [r3, #0]
  }
  
  /*########################################################################*/
  AngleSpeedMax = 2.0f*PI*50;
 80022c4:	4b3e      	ldr	r3, [pc, #248]	; (80023c0 <TIM1_UP_TIM10_IRQHandler+0x270>)
 80022c6:	4a3f      	ldr	r2, [pc, #252]	; (80023c4 <TIM1_UP_TIM10_IRQHandler+0x274>)
 80022c8:	601a      	str	r2, [r3, #0]
  AngleSpeed = 2.0f*PI*Freq;
 80022ca:	4b38      	ldr	r3, [pc, #224]	; (80023ac <TIM1_UP_TIM10_IRQHandler+0x25c>)
 80022cc:	edd3 7a00 	vldr	s15, [r3]
 80022d0:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80023c8 <TIM1_UP_TIM10_IRQHandler+0x278>
 80022d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022d8:	4b3c      	ldr	r3, [pc, #240]	; (80023cc <TIM1_UP_TIM10_IRQHandler+0x27c>)
 80022da:	edc3 7a00 	vstr	s15, [r3]
  Delta_Angle = AngleSpeed*0.0001f;
 80022de:	4b3b      	ldr	r3, [pc, #236]	; (80023cc <TIM1_UP_TIM10_IRQHandler+0x27c>)
 80022e0:	edd3 7a00 	vldr	s15, [r3]
 80022e4:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80023d0 <TIM1_UP_TIM10_IRQHandler+0x280>
 80022e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022ec:	4b39      	ldr	r3, [pc, #228]	; (80023d4 <TIM1_UP_TIM10_IRQHandler+0x284>)
 80022ee:	edc3 7a00 	vstr	s15, [r3]

  DSP_K_Polar_to_AB(Amp, El_Angle, Bufer_A_B);
 80022f2:	4b32      	ldr	r3, [pc, #200]	; (80023bc <TIM1_UP_TIM10_IRQHandler+0x26c>)
 80022f4:	edd3 7a00 	vldr	s15, [r3]
 80022f8:	4b37      	ldr	r3, [pc, #220]	; (80023d8 <TIM1_UP_TIM10_IRQHandler+0x288>)
 80022fa:	ed93 7a00 	vldr	s14, [r3]
 80022fe:	4837      	ldr	r0, [pc, #220]	; (80023dc <TIM1_UP_TIM10_IRQHandler+0x28c>)
 8002300:	eef0 0a47 	vmov.f32	s1, s14
 8002304:	eeb0 0a67 	vmov.f32	s0, s15
 8002308:	f000 f8d1 	bl	80024ae <DSP_K_Polar_to_AB>
  El_Angle+=Delta_Angle*Delta_Angle_Gain;
 800230c:	4b31      	ldr	r3, [pc, #196]	; (80023d4 <TIM1_UP_TIM10_IRQHandler+0x284>)
 800230e:	ed93 7a00 	vldr	s14, [r3]
 8002312:	4b33      	ldr	r3, [pc, #204]	; (80023e0 <TIM1_UP_TIM10_IRQHandler+0x290>)
 8002314:	edd3 7a00 	vldr	s15, [r3]
 8002318:	ee27 7a27 	vmul.f32	s14, s14, s15
 800231c:	4b2e      	ldr	r3, [pc, #184]	; (80023d8 <TIM1_UP_TIM10_IRQHandler+0x288>)
 800231e:	edd3 7a00 	vldr	s15, [r3]
 8002322:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002326:	4b2c      	ldr	r3, [pc, #176]	; (80023d8 <TIM1_UP_TIM10_IRQHandler+0x288>)
 8002328:	edc3 7a00 	vstr	s15, [r3]

  DSP_K_SVPWM(TIM1, Bufer_A_B[0], Bufer_A_B[1]);
 800232c:	4b2b      	ldr	r3, [pc, #172]	; (80023dc <TIM1_UP_TIM10_IRQHandler+0x28c>)
 800232e:	edd3 7a00 	vldr	s15, [r3]
 8002332:	4b2a      	ldr	r3, [pc, #168]	; (80023dc <TIM1_UP_TIM10_IRQHandler+0x28c>)
 8002334:	ed93 7a01 	vldr	s14, [r3, #4]
 8002338:	eef0 0a47 	vmov.f32	s1, s14
 800233c:	eeb0 0a67 	vmov.f32	s0, s15
 8002340:	4828      	ldr	r0, [pc, #160]	; (80023e4 <TIM1_UP_TIM10_IRQHandler+0x294>)
 8002342:	f000 f9e9 	bl	8002718 <DSP_K_SVPWM>
  // Вывод значения угловой скорости




  Device_DAC_Out_PA4_CH1((speed.speed) / (55.0f));
 8002346:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <TIM1_UP_TIM10_IRQHandler+0x234>)
 8002348:	edd3 7a05 	vldr	s15, [r3, #20]
 800234c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80023e8 <TIM1_UP_TIM10_IRQHandler+0x298>
 8002350:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002354:	eeb0 0a66 	vmov.f32	s0, s13
 8002358:	f7ff fc18 	bl	8001b8c <Device_DAC_Out_PA4_CH1>
   //Device_DAC_Out_PA5_CH2(Delta_Angle);

  // Вывод значения задания скорости
     //Device_DAC_Out_PA5_CH2(neww);

 if(El_Angle>=8*PI) El_Angle = 0.0f;
 800235c:	4b1e      	ldr	r3, [pc, #120]	; (80023d8 <TIM1_UP_TIM10_IRQHandler+0x288>)
 800235e:	edd3 7a00 	vldr	s15, [r3]
 8002362:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80023ec <TIM1_UP_TIM10_IRQHandler+0x29c>
 8002366:	eef4 7ac7 	vcmpe.f32	s15, s14
 800236a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800236e:	da00      	bge.n	8002372 <TIM1_UP_TIM10_IRQHandler+0x222>
  
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002370:	e003      	b.n	800237a <TIM1_UP_TIM10_IRQHandler+0x22a>
 if(El_Angle>=8*PI) El_Angle = 0.0f;
 8002372:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <TIM1_UP_TIM10_IRQHandler+0x288>)
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	200002f8 	.word	0x200002f8
 8002384:	200003c8 	.word	0x200003c8
 8002388:	200002f0 	.word	0x200002f0
 800238c:	200003b0 	.word	0x200003b0
 8002390:	200003a0 	.word	0x200003a0
 8002394:	40020c00 	.word	0x40020c00
 8002398:	200003e4 	.word	0x200003e4
 800239c:	42480000 	.word	0x42480000
 80023a0:	200003a8 	.word	0x200003a8
 80023a4:	20000004 	.word	0x20000004
 80023a8:	3dcccccd 	.word	0x3dcccccd
 80023ac:	200003bc 	.word	0x200003bc
 80023b0:	437a0000 	.word	0x437a0000
 80023b4:	437a0000 	.word	0x437a0000
 80023b8:	42480000 	.word	0x42480000
 80023bc:	200003ac 	.word	0x200003ac
 80023c0:	2000039c 	.word	0x2000039c
 80023c4:	439d1463 	.word	0x439d1463
 80023c8:	40c90fdb 	.word	0x40c90fdb
 80023cc:	20000398 	.word	0x20000398
 80023d0:	38d1b717 	.word	0x38d1b717
 80023d4:	200003c0 	.word	0x200003c0
 80023d8:	200003c4 	.word	0x200003c4
 80023dc:	20000098 	.word	0x20000098
 80023e0:	20000000 	.word	0x20000000
 80023e4:	40010000 	.word	0x40010000
 80023e8:	425c0000 	.word	0x425c0000
 80023ec:	41c90fdb 	.word	0x41c90fdb

080023f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023f4:	4b16      	ldr	r3, [pc, #88]	; (8002450 <SystemInit+0x60>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fa:	4a15      	ldr	r2, [pc, #84]	; (8002450 <SystemInit+0x60>)
 80023fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002404:	4b13      	ldr	r3, [pc, #76]	; (8002454 <SystemInit+0x64>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a12      	ldr	r2, [pc, #72]	; (8002454 <SystemInit+0x64>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002410:	4b10      	ldr	r3, [pc, #64]	; (8002454 <SystemInit+0x64>)
 8002412:	2200      	movs	r2, #0
 8002414:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002416:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <SystemInit+0x64>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a0e      	ldr	r2, [pc, #56]	; (8002454 <SystemInit+0x64>)
 800241c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002424:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002426:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <SystemInit+0x64>)
 8002428:	4a0b      	ldr	r2, [pc, #44]	; (8002458 <SystemInit+0x68>)
 800242a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800242c:	4b09      	ldr	r3, [pc, #36]	; (8002454 <SystemInit+0x64>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a08      	ldr	r2, [pc, #32]	; (8002454 <SystemInit+0x64>)
 8002432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002436:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002438:	4b06      	ldr	r3, [pc, #24]	; (8002454 <SystemInit+0x64>)
 800243a:	2200      	movs	r2, #0
 800243c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800243e:	4b04      	ldr	r3, [pc, #16]	; (8002450 <SystemInit+0x60>)
 8002440:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002444:	609a      	str	r2, [r3, #8]
#endif
}
 8002446:	bf00      	nop
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000ed00 	.word	0xe000ed00
 8002454:	40023800 	.word	0x40023800
 8002458:	24003010 	.word	0x24003010

0800245c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800245c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002494 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002460:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002462:	e003      	b.n	800246c <LoopCopyDataInit>

08002464 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002464:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002466:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002468:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800246a:	3104      	adds	r1, #4

0800246c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800246c:	480b      	ldr	r0, [pc, #44]	; (800249c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800246e:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002470:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002472:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002474:	d3f6      	bcc.n	8002464 <CopyDataInit>
  ldr  r2, =_sbss
 8002476:	4a0b      	ldr	r2, [pc, #44]	; (80024a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002478:	e002      	b.n	8002480 <LoopFillZerobss>

0800247a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800247a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800247c:	f842 3b04 	str.w	r3, [r2], #4

08002480 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002480:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002482:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002484:	d3f9      	bcc.n	800247a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002486:	f7ff ffb3 	bl	80023f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800248a:	f004 fa21 	bl	80068d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800248e:	f7fe fe61 	bl	8001154 <main>
  bx  lr    
 8002492:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002494:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002498:	08007220 	.word	0x08007220
  ldr  r0, =_sdata
 800249c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80024a0:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 80024a4:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 80024a8:	200003ec 	.word	0x200003ec

080024ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024ac:	e7fe      	b.n	80024ac <ADC_IRQHandler>

080024ae <DSP_K_Polar_to_AB>:
}
/*
DSP_K_Polar_to_AB
*/
void DSP_K_Polar_to_AB(float Amp, float Rad, float *Bufer_A_B)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b084      	sub	sp, #16
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	ed87 0a03 	vstr	s0, [r7, #12]
 80024b8:	edc7 0a02 	vstr	s1, [r7, #8]
 80024bc:	6078      	str	r0, [r7, #4]
*Bufer_A_B     = Amp * arm_cos_f32(Rad);
 80024be:	ed97 0a02 	vldr	s0, [r7, #8]
 80024c2:	f7fe fd3f 	bl	8000f44 <arm_cos_f32>
 80024c6:	eeb0 7a40 	vmov.f32	s14, s0
 80024ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80024ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	edc3 7a00 	vstr	s15, [r3]
*(Bufer_A_B+1) = Amp * arm_sin_f32(Rad);
 80024d8:	ed97 0a02 	vldr	s0, [r7, #8]
 80024dc:	f7fe fdae 	bl	800103c <arm_sin_f32>
 80024e0:	eeb0 7a40 	vmov.f32	s14, s0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3304      	adds	r3, #4
 80024e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80024ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f0:	edc3 7a00 	vstr	s15, [r3]
}
 80024f4:	bf00      	nop
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <DSP_K_Conv_ABC_to_ab>:
/*
DSP_K_Conv_ABC_to_ab

*/
void DSP_K_Conv_ABC_to_ab(float *A_B_C, float *a_b)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]

a_b[0] = A_B_C[0]*1.0f;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	601a      	str	r2, [r3, #0]
a_b[1] = 1.0f/SQRT3*(A_B_C[1]-A_B_C[2])*1.0f;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3304      	adds	r3, #4
 8002512:	ed93 7a00 	vldr	s14, [r3]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3308      	adds	r3, #8
 800251a:	edd3 7a00 	vldr	s15, [r3]
 800251e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	3304      	adds	r3, #4
 8002526:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002540 <DSP_K_Conv_ABC_to_ab+0x44>
 800252a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800252e:	edc3 7a00 	vstr	s15, [r3]

}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	3f13cd3a 	.word	0x3f13cd3a

08002544 <Speed_measure>:

/*
Encoder KUBLER speed measure
*/

void Speed_measure(Speed_structure *Spd){
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
    
  
 if(Spd->cnt_s < 19){
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	2b12      	cmp	r3, #18
 8002552:	d806      	bhi.n	8002562 <Speed_measure+0x1e>
    Spd->cnt_s++;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	3301      	adds	r3, #1
 800255a:	b29a      	uxth	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	801a      	strh	r2, [r3, #0]
    Spd->speed_el = 0;
  }
  Spd->cnt_s = 0;
  }

}
 8002560:	e08b      	b.n	800267a <Speed_measure+0x136>
  Spd->angle_f[4] = Spd->angle_f[3];
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	891a      	ldrh	r2, [r3, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	815a      	strh	r2, [r3, #10]
  Spd->angle_f[3] = Spd->angle_f[2];
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	88da      	ldrh	r2, [r3, #6]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	811a      	strh	r2, [r3, #8]
  Spd->angle_f[2] = Spd->angle_f[1];
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	889a      	ldrh	r2, [r3, #4]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	80da      	strh	r2, [r3, #6]
  Spd->angle_f[1] = Spd->angle_f[0];
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	885a      	ldrh	r2, [r3, #2]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	809a      	strh	r2, [r3, #4]
  if(Spd->angle_f[0] != Spd->angle_f[1]){
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	885a      	ldrh	r2, [r3, #2]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	889b      	ldrh	r3, [r3, #4]
 800258a:	429a      	cmp	r2, r3
 800258c:	d007      	beq.n	800259e <Speed_measure+0x5a>
    Spd->angle_d[0] = Spd->angle_f[0] - Spd->angle_f[1];
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	885a      	ldrh	r2, [r3, #2]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	889b      	ldrh	r3, [r3, #4]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	b29a      	uxth	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	819a      	strh	r2, [r3, #12]
  if(Spd->angle_f[1] != Spd->angle_f[2]){
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	889a      	ldrh	r2, [r3, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	88db      	ldrh	r3, [r3, #6]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d007      	beq.n	80025ba <Speed_measure+0x76>
    Spd->angle_d[1] = Spd->angle_f[1] - Spd->angle_f[2];
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	889a      	ldrh	r2, [r3, #4]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	88db      	ldrh	r3, [r3, #6]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	81da      	strh	r2, [r3, #14]
  if(Spd->angle_f[2] != Spd->angle_f[3]){
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	88da      	ldrh	r2, [r3, #6]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	891b      	ldrh	r3, [r3, #8]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d007      	beq.n	80025d6 <Speed_measure+0x92>
    Spd->angle_d[2] = Spd->angle_f[2] - Spd->angle_f[3];
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	88da      	ldrh	r2, [r3, #6]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	891b      	ldrh	r3, [r3, #8]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	821a      	strh	r2, [r3, #16]
  if(Spd->angle_f[3] != Spd->angle_f[4]){
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	891a      	ldrh	r2, [r3, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	895b      	ldrh	r3, [r3, #10]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d007      	beq.n	80025f2 <Speed_measure+0xae>
    Spd->angle_d[3] = Spd->angle_f[3] - Spd->angle_f[4];
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	891a      	ldrh	r2, [r3, #8]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	895b      	ldrh	r3, [r3, #10]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	825a      	strh	r2, [r3, #18]
  if((Spd->angle_d[0] - Spd->angle_d[1]) < 2){
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	899b      	ldrh	r3, [r3, #12]
 80025f6:	461a      	mov	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	89db      	ldrh	r3, [r3, #14]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b01      	cmp	r3, #1
 8002600:	dc1c      	bgt.n	800263c <Speed_measure+0xf8>
    if((Spd->angle_d[1] - Spd->angle_d[2]) < 2){
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	89db      	ldrh	r3, [r3, #14]
 8002606:	461a      	mov	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	8a1b      	ldrh	r3, [r3, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b01      	cmp	r3, #1
 8002610:	dc14      	bgt.n	800263c <Speed_measure+0xf8>
      if((Spd->angle_d[2] - Spd->angle_d[3]) < 2){
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	8a1b      	ldrh	r3, [r3, #16]
 8002616:	461a      	mov	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	8a5b      	ldrh	r3, [r3, #18]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b01      	cmp	r3, #1
 8002620:	dc0c      	bgt.n	800263c <Speed_measure+0xf8>
        Spd->speed = Spd->angle_d[2]*0.061f;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	8a1b      	ldrh	r3, [r3, #16]
 8002626:	ee07 3a90 	vmov	s15, r3
 800262a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800262e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002688 <Speed_measure+0x144>
 8002632:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	edc3 7a05 	vstr	s15, [r3, #20]
  Spd->speed_el = Spd->speed*3.0f;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002642:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002646:	ee67 7a87 	vmul.f32	s15, s15, s14
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	edc3 7a06 	vstr	s15, [r3, #24]
  if(Spd->speed_el > 200){
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	edd3 7a06 	vldr	s15, [r3, #24]
 8002656:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800268c <Speed_measure+0x148>
 800265a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800265e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002662:	dd07      	ble.n	8002674 <Speed_measure+0x130>
    Spd->speed = 0;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	615a      	str	r2, [r3, #20]
    Spd->speed_el = 0;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f04f 0200 	mov.w	r2, #0
 8002672:	619a      	str	r2, [r3, #24]
  Spd->cnt_s = 0;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	801a      	strh	r2, [r3, #0]
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	3d79db23 	.word	0x3d79db23
 800268c:	43480000 	.word	0x43480000

08002690 <Current_measure>:

void Current_measure(float *iABC, unsigned short *ADC_Buf){
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
    
  iABC[0] = (float)((ADC_Buf[0]>>2) - 589) / 512;            //i_U
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	089b      	lsrs	r3, r3, #2
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	f2a3 234d 	subw	r3, r3, #589	; 0x24d
 80026a6:	ee07 3a90 	vmov	s15, r3
 80026aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026ae:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002714 <Current_measure+0x84>
 80026b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	edc3 7a00 	vstr	s15, [r3]
  iABC[1] = (float)((ADC_Buf[1]>>2) - 587) / 512;            //i_V
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	3302      	adds	r3, #2
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	089b      	lsrs	r3, r3, #2
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	f2a3 234b 	subw	r3, r3, #587	; 0x24b
 80026ca:	ee07 3a90 	vmov	s15, r3
 80026ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3304      	adds	r3, #4
 80026d6:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8002714 <Current_measure+0x84>
 80026da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026de:	edc3 7a00 	vstr	s15, [r3]
  iABC[2] = (float)((ADC_Buf[2]>>2) - 585) / 512;            //i_W
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	3304      	adds	r3, #4
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	089b      	lsrs	r3, r3, #2
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80026f0:	ee07 3a90 	vmov	s15, r3
 80026f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3308      	adds	r3, #8
 80026fc:	eddf 6a05 	vldr	s13, [pc, #20]	; 8002714 <Current_measure+0x84>
 8002700:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002704:	edc3 7a00 	vstr	s15, [r3]
  
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	44000000 	.word	0x44000000

08002718 <DSP_K_SVPWM>:

/*
DSP_K_PWM_TIM1_Blocked_4VT
*/
void DSP_K_SVPWM(TIM_TypeDef *Tim, float A, float B)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b08e      	sub	sp, #56	; 0x38
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	ed87 0a02 	vstr	s0, [r7, #8]
 8002724:	edc7 0a01 	vstr	s1, [r7, #4]
 
static float bufer[2];

float f_sin      = 0.0f;
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	637b      	str	r3, [r7, #52]	; 0x34
float f_sin_0_60 = 0.0f;
 800272e:	f04f 0300 	mov.w	r3, #0
 8002732:	633b      	str	r3, [r7, #48]	; 0x30

float f_cos      = 0.0f;
 8002734:	f04f 0300 	mov.w	r3, #0
 8002738:	62fb      	str	r3, [r7, #44]	; 0x2c
float f_cos_0_60 = 0.0f;
 800273a:	f04f 0300 	mov.w	r3, #0
 800273e:	62bb      	str	r3, [r7, #40]	; 0x28
 
static float module     = 0.0f;

float Tb1 = 0.0f;
 8002740:	f04f 0300 	mov.w	r3, #0
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
float Tb2 = 0.0f;
 8002746:	f04f 0300 	mov.w	r3, #0
 800274a:	623b      	str	r3, [r7, #32]
float T0  = 0.0f;
 800274c:	f04f 0300 	mov.w	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]

float t1 = 0.0f;
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	61bb      	str	r3, [r7, #24]
float t2 = 0.0f;
 8002758:	f04f 0300 	mov.w	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
float t3  = 0.0f;
 800275e:	f04f 0300 	mov.w	r3, #0
 8002762:	613b      	str	r3, [r7, #16]


bufer[0]=A;
 8002764:	4adb      	ldr	r2, [pc, #876]	; (8002ad4 <DSP_K_SVPWM+0x3bc>)
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	6013      	str	r3, [r2, #0]
bufer[1]=B;
 800276a:	4ada      	ldr	r2, [pc, #872]	; (8002ad4 <DSP_K_SVPWM+0x3bc>)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6053      	str	r3, [r2, #4]
arm_cmplx_mag_f32(bufer,&module,2);
 8002770:	2202      	movs	r2, #2
 8002772:	49d9      	ldr	r1, [pc, #868]	; (8002ad8 <DSP_K_SVPWM+0x3c0>)
 8002774:	48d7      	ldr	r0, [pc, #860]	; (8002ad4 <DSP_K_SVPWM+0x3bc>)
 8002776:	f7fe fac5 	bl	8000d04 <arm_cmplx_mag_f32>

f_sin = bufer[1] / module;
 800277a:	4bd6      	ldr	r3, [pc, #856]	; (8002ad4 <DSP_K_SVPWM+0x3bc>)
 800277c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002780:	4bd5      	ldr	r3, [pc, #852]	; (8002ad8 <DSP_K_SVPWM+0x3c0>)
 8002782:	ed93 7a00 	vldr	s14, [r3]
 8002786:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800278a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
f_cos = bufer[0] / module;
 800278e:	4bd1      	ldr	r3, [pc, #836]	; (8002ad4 <DSP_K_SVPWM+0x3bc>)
 8002790:	edd3 6a00 	vldr	s13, [r3]
 8002794:	4bd0      	ldr	r3, [pc, #832]	; (8002ad8 <DSP_K_SVPWM+0x3c0>)
 8002796:	ed93 7a00 	vldr	s14, [r3]
 800279a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800279e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

if(module==0)
 80027a2:	4bcd      	ldr	r3, [pc, #820]	; (8002ad8 <DSP_K_SVPWM+0x3c0>)
 80027a4:	edd3 7a00 	vldr	s15, [r3]
 80027a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b0:	d119      	bne.n	80027e6 <DSP_K_SVPWM+0xce>
{
Tim->CCR1 = (int)Tim->ARR/2;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b6:	0fda      	lsrs	r2, r3, #31
 80027b8:	4413      	add	r3, r2
 80027ba:	105b      	asrs	r3, r3, #1
 80027bc:	461a      	mov	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	635a      	str	r2, [r3, #52]	; 0x34
Tim->CCR2 = (int)Tim->ARR/2;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c6:	0fda      	lsrs	r2, r3, #31
 80027c8:	4413      	add	r3, r2
 80027ca:	105b      	asrs	r3, r3, #1
 80027cc:	461a      	mov	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	639a      	str	r2, [r3, #56]	; 0x38
Tim->CCR3 = (int)Tim->ARR/2;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d6:	0fda      	lsrs	r2, r3, #31
 80027d8:	4413      	add	r3, r2
 80027da:	105b      	asrs	r3, r3, #1
 80027dc:	461a      	mov	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	63da      	str	r2, [r3, #60]	; 0x3c
//sin_data = arm_sin_f32(0.01f);
//Tick=DWT_CYCCNT;



}
 80027e2:	f000 bcad 	b.w	8003140 <DSP_K_SVPWM+0xa28>
 else if((f_sin >= sin_0) && (f_sin < sin_60)  &&\
 80027e6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80027ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f2:	f2c0 80a9 	blt.w	8002948 <DSP_K_SVPWM+0x230>
 80027f6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80027fa:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 8002ae0 <DSP_K_SVPWM+0x3c8>
 80027fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002806:	f140 809f 	bpl.w	8002948 <DSP_K_SVPWM+0x230>
 800280a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800280e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002812:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800281a:	f340 8095 	ble.w	8002948 <DSP_K_SVPWM+0x230>
    (f_cos > cos_60) && (f_cos <= cos_0) )
 800281e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002822:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002826:	eef4 7ac7 	vcmpe.f32	s15, s14
 800282a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800282e:	f200 808b 	bhi.w	8002948 <DSP_K_SVPWM+0x230>
 f_sin_0_60 = f_sin;
 8002832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002834:	633b      	str	r3, [r7, #48]	; 0x30
 f_cos_0_60 = f_cos;
 8002836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002838:	62bb      	str	r3, [r7, #40]	; 0x28
 Tb1 = module * (sin_60 * f_cos_0_60 - cos_60 * f_sin_0_60);
 800283a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800283e:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8002ae0 <DSP_K_SVPWM+0x3c8>
 8002842:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002846:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800284a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800284e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002852:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002856:	4ba0      	ldr	r3, [pc, #640]	; (8002ad8 <DSP_K_SVPWM+0x3c0>)
 8002858:	edd3 7a00 	vldr	s15, [r3]
 800285c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002860:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 Tb2 = module * f_sin_0_60;
 8002864:	4b9c      	ldr	r3, [pc, #624]	; (8002ad8 <DSP_K_SVPWM+0x3c0>)
 8002866:	edd3 7a00 	vldr	s15, [r3]
 800286a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800286e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002872:	edc7 7a08 	vstr	s15, [r7, #32]
 T0  = 0.5f*(1.0f-Tb1-Tb2);
 8002876:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800287a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800287e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002882:	edd7 7a08 	vldr	s15, [r7, #32]
 8002886:	ee77 7a67 	vsub.f32	s15, s14, s15
 800288a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800288e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002892:	edc7 7a07 	vstr	s15, [r7, #28]
 t1 = Tb1+Tb2+T0;
 8002896:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800289a:	edd7 7a08 	vldr	s15, [r7, #32]
 800289e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028a2:	ed97 7a07 	vldr	s14, [r7, #28]
 80028a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028aa:	edc7 7a06 	vstr	s15, [r7, #24]
 t2 = Tb2+T0;
 80028ae:	ed97 7a08 	vldr	s14, [r7, #32]
 80028b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80028b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ba:	edc7 7a05 	vstr	s15, [r7, #20]
 t3 = Tb1+T0;
 80028be:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80028c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80028c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ca:	edc7 7a04 	vstr	s15, [r7, #16]
Tim->CCR1 = (int)(Tim->ARR*t1+0);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d2:	ee07 3a90 	vmov	s15, r3
 80028d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028da:	edd7 7a06 	vldr	s15, [r7, #24]
 80028de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028e2:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8002adc <DSP_K_SVPWM+0x3c4>
 80028e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028ee:	ee17 2a90 	vmov	r2, s15
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	635a      	str	r2, [r3, #52]	; 0x34
Tim->CCR2 = (int)(Tim->ARR*t2+0);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fa:	ee07 3a90 	vmov	s15, r3
 80028fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002902:	edd7 7a05 	vldr	s15, [r7, #20]
 8002906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800290a:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8002adc <DSP_K_SVPWM+0x3c4>
 800290e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002912:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002916:	ee17 2a90 	vmov	r2, s15
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	639a      	str	r2, [r3, #56]	; 0x38
Tim->CCR3 = (int)(Tim->ARR*T0+0);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002922:	ee07 3a90 	vmov	s15, r3
 8002926:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800292a:	edd7 7a07 	vldr	s15, [r7, #28]
 800292e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002932:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8002adc <DSP_K_SVPWM+0x3c4>
 8002936:	ee77 7a87 	vadd.f32	s15, s15, s14
 800293a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800293e:	ee17 2a90 	vmov	r2, s15
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	63da      	str	r2, [r3, #60]	; 0x3c
 8002946:	e3fb      	b.n	8003140 <DSP_K_SVPWM+0xa28>
  else if((f_sin >= sin_60)   &&\
 8002948:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800294c:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8002ae0 <DSP_K_SVPWM+0x3c8>
 8002950:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002958:	f2c0 80c4 	blt.w	8002ae4 <DSP_K_SVPWM+0x3cc>
 800295c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002960:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002964:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296c:	f340 80ba 	ble.w	8002ae4 <DSP_K_SVPWM+0x3cc>
    (f_cos > cos_120) && (f_cos <= cos_60) )
 8002970:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002974:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002978:	eef4 7ac7 	vcmpe.f32	s15, s14
 800297c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002980:	f200 80b0 	bhi.w	8002ae4 <DSP_K_SVPWM+0x3cc>
 f_sin_0_60 = f_sin * cos_60 - sin_60 * f_cos;
 8002984:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002988:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800298c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002990:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002994:	eddf 6a52 	vldr	s13, [pc, #328]	; 8002ae0 <DSP_K_SVPWM+0x3c8>
 8002998:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800299c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 f_cos_0_60 = f_cos * cos_60 + f_sin * sin_60;
 80029a4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80029a8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80029ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029b0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80029b4:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8002ae0 <DSP_K_SVPWM+0x3c8>
 80029b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029c0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 Tb1 = module * (sin_60 * f_cos_0_60 - cos_60 * f_sin_0_60);
 80029c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80029c8:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8002ae0 <DSP_K_SVPWM+0x3c8>
 80029cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029d0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80029d4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80029d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029e0:	4b3d      	ldr	r3, [pc, #244]	; (8002ad8 <DSP_K_SVPWM+0x3c0>)
 80029e2:	edd3 7a00 	vldr	s15, [r3]
 80029e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ea:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 Tb2 = module * f_sin_0_60;
 80029ee:	4b3a      	ldr	r3, [pc, #232]	; (8002ad8 <DSP_K_SVPWM+0x3c0>)
 80029f0:	edd3 7a00 	vldr	s15, [r3]
 80029f4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80029f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029fc:	edc7 7a08 	vstr	s15, [r7, #32]
 T0  = 0.5f*(1.0f-Tb1-Tb2);
 8002a00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a04:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a0c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a14:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a1c:	edc7 7a07 	vstr	s15, [r7, #28]
 t1 = Tb1+Tb2+T0;
 8002a20:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002a24:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a2c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a34:	edc7 7a06 	vstr	s15, [r7, #24]
 t2 = Tb2+T0;
 8002a38:	ed97 7a08 	vldr	s14, [r7, #32]
 8002a3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a44:	edc7 7a05 	vstr	s15, [r7, #20]
 t3 = Tb1+T0;
 8002a48:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002a4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a54:	edc7 7a04 	vstr	s15, [r7, #16]
Tim->CCR1 = (int)(Tim->ARR*t3+0);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	ee07 3a90 	vmov	s15, r3
 8002a60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a64:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a6c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002adc <DSP_K_SVPWM+0x3c4>
 8002a70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a78:	ee17 2a90 	vmov	r2, s15
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	635a      	str	r2, [r3, #52]	; 0x34
Tim->CCR2 = (int)(Tim->ARR*t1+0);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a84:	ee07 3a90 	vmov	s15, r3
 8002a88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a8c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a94:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002adc <DSP_K_SVPWM+0x3c4>
 8002a98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002aa0:	ee17 2a90 	vmov	r2, s15
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	639a      	str	r2, [r3, #56]	; 0x38
Tim->CCR3 = (int)(Tim->ARR*T0+0);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aac:	ee07 3a90 	vmov	s15, r3
 8002ab0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ab4:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002abc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002adc <DSP_K_SVPWM+0x3c4>
 8002ac0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ac4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ac8:	ee17 2a90 	vmov	r2, s15
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ad0:	e336      	b.n	8003140 <DSP_K_SVPWM+0xa28>
 8002ad2:	bf00      	nop
 8002ad4:	200000a0 	.word	0x200000a0
 8002ad8:	200000a8 	.word	0x200000a8
 8002adc:	00000000 	.word	0x00000000
 8002ae0:	3f5db3d7 	.word	0x3f5db3d7
 else if((f_sin > sin_180) && (f_sin <= sin_120)  &&\
 8002ae4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002ae8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af0:	f340 80c5 	ble.w	8002c7e <DSP_K_SVPWM+0x566>
 8002af4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002af8:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8002ae0 <DSP_K_SVPWM+0x3c8>
 8002afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b04:	f200 80bb 	bhi.w	8002c7e <DSP_K_SVPWM+0x566>
 8002b08:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002b0c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002b10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b18:	f340 80b1 	ble.w	8002c7e <DSP_K_SVPWM+0x566>
    (f_cos > cos_180) && (f_cos <= cos_120) )
 8002b1c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002b20:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002b24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b2c:	f200 80a7 	bhi.w	8002c7e <DSP_K_SVPWM+0x566>
 f_sin_0_60 = f_sin * cos_120 - sin_120 * f_cos;
 8002b30:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002b34:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002b38:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b3c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002b40:	ed5f 6a19 	vldr	s13, [pc, #-100]	; 8002ae0 <DSP_K_SVPWM+0x3c8>
 8002b44:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b4c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 f_cos_0_60 = f_cos * cos_120 + f_sin * sin_120;
 8002b50:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002b54:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002b58:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b5c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002b60:	ed5f 6a21 	vldr	s13, [pc, #-132]	; 8002ae0 <DSP_K_SVPWM+0x3c8>
 8002b64:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b6c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 Tb1 = module * (sin_60 * f_cos_0_60 - cos_60 * f_sin_0_60);
 8002b70:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002b74:	ed1f 7a26 	vldr	s14, [pc, #-152]	; 8002ae0 <DSP_K_SVPWM+0x3c8>
 8002b78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b7c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002b80:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002b84:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b8c:	4b9f      	ldr	r3, [pc, #636]	; (8002e0c <DSP_K_SVPWM+0x6f4>)
 8002b8e:	edd3 7a00 	vldr	s15, [r3]
 8002b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b96:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 Tb2 = module * f_sin_0_60;
 8002b9a:	4b9c      	ldr	r3, [pc, #624]	; (8002e0c <DSP_K_SVPWM+0x6f4>)
 8002b9c:	edd3 7a00 	vldr	s15, [r3]
 8002ba0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ba8:	edc7 7a08 	vstr	s15, [r7, #32]
 T0  = 0.5f*(1.0f-Tb1-Tb2);
 8002bac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002bb0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002bb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bb8:	edd7 7a08 	vldr	s15, [r7, #32]
 8002bbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bc0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002bc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bc8:	edc7 7a07 	vstr	s15, [r7, #28]
 t1 = Tb1+Tb2+T0;
 8002bcc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002bd0:	edd7 7a08 	vldr	s15, [r7, #32]
 8002bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd8:	ed97 7a07 	vldr	s14, [r7, #28]
 8002bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be0:	edc7 7a06 	vstr	s15, [r7, #24]
 t2 = Tb2+T0;
 8002be4:	ed97 7a08 	vldr	s14, [r7, #32]
 8002be8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bf0:	edc7 7a05 	vstr	s15, [r7, #20]
 t3 = Tb1+T0;
 8002bf4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002bf8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c00:	edc7 7a04 	vstr	s15, [r7, #16]
Tim->CCR1 = (int)(Tim->ARR*T0+0);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c08:	ee07 3a90 	vmov	s15, r3
 8002c0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c10:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c18:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8002e10 <DSP_K_SVPWM+0x6f8>
 8002c1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c24:	ee17 2a90 	vmov	r2, s15
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	635a      	str	r2, [r3, #52]	; 0x34
Tim->CCR2 = (int)(Tim->ARR*t1+0);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c30:	ee07 3a90 	vmov	s15, r3
 8002c34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c38:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c40:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002e10 <DSP_K_SVPWM+0x6f8>
 8002c44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c4c:	ee17 2a90 	vmov	r2, s15
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	639a      	str	r2, [r3, #56]	; 0x38
Tim->CCR3 = (int)(Tim->ARR*t2+0);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c58:	ee07 3a90 	vmov	s15, r3
 8002c5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c60:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c68:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002e10 <DSP_K_SVPWM+0x6f8>
 8002c6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c74:	ee17 2a90 	vmov	r2, s15
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c7c:	e260      	b.n	8003140 <DSP_K_SVPWM+0xa28>
  else if((f_sin > sin_240) && (f_sin <= sin_180)  &&\
 8002c7e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002c82:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8002e14 <DSP_K_SVPWM+0x6fc>
 8002c86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c8e:	f340 80c5 	ble.w	8002e1c <DSP_K_SVPWM+0x704>
 8002c92:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002c96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c9e:	f200 80bd 	bhi.w	8002e1c <DSP_K_SVPWM+0x704>
 8002ca2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002ca6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002caa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb2:	f2c0 80b3 	blt.w	8002e1c <DSP_K_SVPWM+0x704>
    (f_cos >= cos_180) && (f_cos < cos_240) )
 8002cb6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002cba:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002cbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc6:	f140 80a9 	bpl.w	8002e1c <DSP_K_SVPWM+0x704>
 f_sin_0_60 = f_sin * cos_180 - sin_180 * f_cos;
 8002cca:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002cce:	eeb1 7a67 	vneg.f32	s14, s15
 8002cd2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002cd6:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8002e10 <DSP_K_SVPWM+0x6f8>
 8002cda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ce2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 f_cos_0_60 = f_cos * cos_180 + f_sin * sin_180;
 8002ce6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002cea:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8002e10 <DSP_K_SVPWM+0x6f8>
 8002cee:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cf2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002cf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cfa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 Tb1 = module * (sin_60 * f_cos_0_60 - cos_60 * f_sin_0_60);
 8002cfe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002d02:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8002e18 <DSP_K_SVPWM+0x700>
 8002d06:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d0a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002d0e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002d12:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d1a:	4b3c      	ldr	r3, [pc, #240]	; (8002e0c <DSP_K_SVPWM+0x6f4>)
 8002d1c:	edd3 7a00 	vldr	s15, [r3]
 8002d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d24:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 Tb2 = module * f_sin_0_60;
 8002d28:	4b38      	ldr	r3, [pc, #224]	; (8002e0c <DSP_K_SVPWM+0x6f4>)
 8002d2a:	edd3 7a00 	vldr	s15, [r3]
 8002d2e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d36:	edc7 7a08 	vstr	s15, [r7, #32]
 T0  = 0.5f*(1.0f-Tb1-Tb2);
 8002d3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d3e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002d42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d46:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d4e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d56:	edc7 7a07 	vstr	s15, [r7, #28]
 t1 = Tb1+Tb2+T0;
 8002d5a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002d5e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d66:	ed97 7a07 	vldr	s14, [r7, #28]
 8002d6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d6e:	edc7 7a06 	vstr	s15, [r7, #24]
 t2 = Tb2+T0;
 8002d72:	ed97 7a08 	vldr	s14, [r7, #32]
 8002d76:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d7e:	edc7 7a05 	vstr	s15, [r7, #20]
 t3 = Tb1+T0;
 8002d82:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002d86:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d8e:	edc7 7a04 	vstr	s15, [r7, #16]
Tim->CCR1 = (int)(Tim->ARR*T0+0);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d96:	ee07 3a90 	vmov	s15, r3
 8002d9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d9e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002da6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002e10 <DSP_K_SVPWM+0x6f8>
 8002daa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002dae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002db2:	ee17 2a90 	vmov	r2, s15
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	635a      	str	r2, [r3, #52]	; 0x34
Tim->CCR2 = (int)(Tim->ARR*t3+0);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbe:	ee07 3a90 	vmov	s15, r3
 8002dc2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002dc6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dce:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002e10 <DSP_K_SVPWM+0x6f8>
 8002dd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002dd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dda:	ee17 2a90 	vmov	r2, s15
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	639a      	str	r2, [r3, #56]	; 0x38
Tim->CCR3 = (int)(Tim->ARR*t1+0);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de6:	ee07 3a90 	vmov	s15, r3
 8002dea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002dee:	edd7 7a06 	vldr	s15, [r7, #24]
 8002df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002df6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002e10 <DSP_K_SVPWM+0x6f8>
 8002dfa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002dfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e02:	ee17 2a90 	vmov	r2, s15
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e0a:	e199      	b.n	8003140 <DSP_K_SVPWM+0xa28>
 8002e0c:	200000a8 	.word	0x200000a8
 8002e10:	00000000 	.word	0x00000000
 8002e14:	bf5db3d7 	.word	0xbf5db3d7
 8002e18:	3f5db3d7 	.word	0x3f5db3d7
  else if( (f_sin <=sin_240)  &&\
 8002e1c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002e20:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8002e14 <DSP_K_SVPWM+0x6fc>
 8002e24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2c:	f200 80bb 	bhi.w	8002fa6 <DSP_K_SVPWM+0x88e>
 8002e30:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002e34:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002e38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e40:	f2c0 80b1 	blt.w	8002fa6 <DSP_K_SVPWM+0x88e>
    (f_cos >= cos_240) && (f_cos < cos_300) )
 8002e44:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002e48:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002e4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e54:	f140 80a7 	bpl.w	8002fa6 <DSP_K_SVPWM+0x88e>
 f_sin_0_60 = f_sin * cos_240 - sin_240 * f_cos;
 8002e58:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002e5c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002e60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e64:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002e68:	ed5f 6a15 	vldr	s13, [pc, #-84]	; 8002e18 <DSP_K_SVPWM+0x700>
 8002e6c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e74:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 f_cos_0_60 = f_cos * cos_240 + f_sin * sin_240;
 8002e78:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002e7c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002e80:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e84:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002e88:	ed5f 6a1e 	vldr	s13, [pc, #-120]	; 8002e14 <DSP_K_SVPWM+0x6fc>
 8002e8c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e94:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 Tb1 = module * (sin_60 * f_cos_0_60 - cos_60 * f_sin_0_60);
 8002e98:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002e9c:	ed1f 7a22 	vldr	s14, [pc, #-136]	; 8002e18 <DSP_K_SVPWM+0x700>
 8002ea0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ea4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002ea8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002eac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002eb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002eb4:	4ba4      	ldr	r3, [pc, #656]	; (8003148 <DSP_K_SVPWM+0xa30>)
 8002eb6:	edd3 7a00 	vldr	s15, [r3]
 8002eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ebe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 Tb2 = module * f_sin_0_60;
 8002ec2:	4ba1      	ldr	r3, [pc, #644]	; (8003148 <DSP_K_SVPWM+0xa30>)
 8002ec4:	edd3 7a00 	vldr	s15, [r3]
 8002ec8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ed0:	edc7 7a08 	vstr	s15, [r7, #32]
 T0  = 0.5f*(1.0f-Tb1-Tb2);
 8002ed4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ed8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002edc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ee0:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ee4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ee8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002eec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ef0:	edc7 7a07 	vstr	s15, [r7, #28]
 t1 = Tb1+Tb2+T0;
 8002ef4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002ef8:	edd7 7a08 	vldr	s15, [r7, #32]
 8002efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f00:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f08:	edc7 7a06 	vstr	s15, [r7, #24]
 t2 = Tb2+T0;
 8002f0c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002f10:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f18:	edc7 7a05 	vstr	s15, [r7, #20]
 t3 = Tb1+T0;
 8002f1c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002f20:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f28:	edc7 7a04 	vstr	s15, [r7, #16]
Tim->CCR1 = (int)(Tim->ARR*t2+0);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	ee07 3a90 	vmov	s15, r3
 8002f34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f38:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f40:	ed9f 7a82 	vldr	s14, [pc, #520]	; 800314c <DSP_K_SVPWM+0xa34>
 8002f44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f4c:	ee17 2a90 	vmov	r2, s15
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	635a      	str	r2, [r3, #52]	; 0x34
Tim->CCR2 = (int)(Tim->ARR*T0+0);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f58:	ee07 3a90 	vmov	s15, r3
 8002f5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f60:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f68:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800314c <DSP_K_SVPWM+0xa34>
 8002f6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f74:	ee17 2a90 	vmov	r2, s15
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	639a      	str	r2, [r3, #56]	; 0x38
Tim->CCR3 = (int)(Tim->ARR*t1+0);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	ee07 3a90 	vmov	s15, r3
 8002f84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f88:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f90:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800314c <DSP_K_SVPWM+0xa34>
 8002f94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f9c:	ee17 2a90 	vmov	r2, s15
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002fa4:	e0cc      	b.n	8003140 <DSP_K_SVPWM+0xa28>
 else if((f_sin >= sin_300) && (f_sin < sin_0)  &&\
 8002fa6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002faa:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8003150 <DSP_K_SVPWM+0xa38>
 8002fae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fb6:	da00      	bge.n	8002fba <DSP_K_SVPWM+0x8a2>
}
 8002fb8:	e0c2      	b.n	8003140 <DSP_K_SVPWM+0xa28>
 else if((f_sin >= sin_300) && (f_sin < sin_0)  &&\
 8002fba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002fbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc6:	d400      	bmi.n	8002fca <DSP_K_SVPWM+0x8b2>
}
 8002fc8:	e0ba      	b.n	8003140 <DSP_K_SVPWM+0xa28>
 else if((f_sin >= sin_300) && (f_sin < sin_0)  &&\
 8002fca:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002fce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002fd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fda:	da00      	bge.n	8002fde <DSP_K_SVPWM+0x8c6>
}
 8002fdc:	e0b0      	b.n	8003140 <DSP_K_SVPWM+0xa28>
    (f_cos >= cos_300) && (f_cos < cos_0) )
 8002fde:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002fe2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fe6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fee:	d400      	bmi.n	8002ff2 <DSP_K_SVPWM+0x8da>
}
 8002ff0:	e0a6      	b.n	8003140 <DSP_K_SVPWM+0xa28>
 f_sin_0_60 = f_sin * cos_300 - sin_300 * f_cos;
 8002ff2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002ff6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ffa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ffe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003002:	eddf 6a54 	vldr	s13, [pc, #336]	; 8003154 <DSP_K_SVPWM+0xa3c>
 8003006:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800300a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800300e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 f_cos_0_60 = f_cos * cos_300 + f_sin * sin_300;
 8003012:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003016:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800301a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800301e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003022:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8003150 <DSP_K_SVPWM+0xa38>
 8003026:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800302a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800302e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 Tb1 = module * (sin_60 * f_cos_0_60 - cos_60 * f_sin_0_60);
 8003032:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003036:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003154 <DSP_K_SVPWM+0xa3c>
 800303a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800303e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003042:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003046:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800304a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800304e:	4b3e      	ldr	r3, [pc, #248]	; (8003148 <DSP_K_SVPWM+0xa30>)
 8003050:	edd3 7a00 	vldr	s15, [r3]
 8003054:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003058:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 Tb2 = module * f_sin_0_60;
 800305c:	4b3a      	ldr	r3, [pc, #232]	; (8003148 <DSP_K_SVPWM+0xa30>)
 800305e:	edd3 7a00 	vldr	s15, [r3]
 8003062:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800306a:	edc7 7a08 	vstr	s15, [r7, #32]
 T0  = 0.5f*(1.0f-Tb1-Tb2);
 800306e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003072:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003076:	ee37 7a67 	vsub.f32	s14, s14, s15
 800307a:	edd7 7a08 	vldr	s15, [r7, #32]
 800307e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003082:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003086:	ee67 7a87 	vmul.f32	s15, s15, s14
 800308a:	edc7 7a07 	vstr	s15, [r7, #28]
 t1 = Tb1+Tb2+T0;
 800308e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003092:	edd7 7a08 	vldr	s15, [r7, #32]
 8003096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800309a:	ed97 7a07 	vldr	s14, [r7, #28]
 800309e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030a2:	edc7 7a06 	vstr	s15, [r7, #24]
 t2 = Tb2+T0;
 80030a6:	ed97 7a08 	vldr	s14, [r7, #32]
 80030aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80030ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030b2:	edc7 7a05 	vstr	s15, [r7, #20]
 t3 = Tb1+T0;
 80030b6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80030ba:	edd7 7a07 	vldr	s15, [r7, #28]
 80030be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030c2:	edc7 7a04 	vstr	s15, [r7, #16]
Tim->CCR1 = (int)(Tim->ARR*t1+0);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ca:	ee07 3a90 	vmov	s15, r3
 80030ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80030d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030da:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800314c <DSP_K_SVPWM+0xa34>
 80030de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80030e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030e6:	ee17 2a90 	vmov	r2, s15
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	635a      	str	r2, [r3, #52]	; 0x34
Tim->CCR2 = (int)(Tim->ARR*T0+0);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f2:	ee07 3a90 	vmov	s15, r3
 80030f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80030fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003102:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800314c <DSP_K_SVPWM+0xa34>
 8003106:	ee77 7a87 	vadd.f32	s15, s15, s14
 800310a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800310e:	ee17 2a90 	vmov	r2, s15
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	639a      	str	r2, [r3, #56]	; 0x38
Tim->CCR3 = (int)(Tim->ARR*t3+0);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311a:	ee07 3a90 	vmov	s15, r3
 800311e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003122:	edd7 7a04 	vldr	s15, [r7, #16]
 8003126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800312a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800314c <DSP_K_SVPWM+0xa34>
 800312e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003132:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003136:	ee17 2a90 	vmov	r2, s15
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800313e:	e7ff      	b.n	8003140 <DSP_K_SVPWM+0xa28>
 8003140:	bf00      	nop
 8003142:	3738      	adds	r7, #56	; 0x38
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	200000a8 	.word	0x200000a8
 800314c:	00000000 	.word	0x00000000
 8003150:	bf5db3d7 	.word	0xbf5db3d7
 8003154:	3f5db3d7 	.word	0x3f5db3d7

08003158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800315c:	4b0e      	ldr	r3, [pc, #56]	; (8003198 <HAL_Init+0x40>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a0d      	ldr	r2, [pc, #52]	; (8003198 <HAL_Init+0x40>)
 8003162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003166:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003168:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <HAL_Init+0x40>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a0a      	ldr	r2, [pc, #40]	; (8003198 <HAL_Init+0x40>)
 800316e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003172:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003174:	4b08      	ldr	r3, [pc, #32]	; (8003198 <HAL_Init+0x40>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a07      	ldr	r2, [pc, #28]	; (8003198 <HAL_Init+0x40>)
 800317a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003180:	2003      	movs	r0, #3
 8003182:	f000 fd6b 	bl	8003c5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003186:	2000      	movs	r0, #0
 8003188:	f000 f808 	bl	800319c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800318c:	f7fe fd22 	bl	8001bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40023c00 	.word	0x40023c00

0800319c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031a4:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <HAL_InitTick+0x54>)
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	4b12      	ldr	r3, [pc, #72]	; (80031f4 <HAL_InitTick+0x58>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	4619      	mov	r1, r3
 80031ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80031b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 fd91 	bl	8003ce2 <HAL_SYSTICK_Config>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e00e      	b.n	80031e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b0f      	cmp	r3, #15
 80031ce:	d80a      	bhi.n	80031e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031d0:	2200      	movs	r2, #0
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	f04f 30ff 	mov.w	r0, #4294967295
 80031d8:	f000 fd4b 	bl	8003c72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031dc:	4a06      	ldr	r2, [pc, #24]	; (80031f8 <HAL_InitTick+0x5c>)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	e000      	b.n	80031e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	20000008 	.word	0x20000008
 80031f4:	20000010 	.word	0x20000010
 80031f8:	2000000c 	.word	0x2000000c

080031fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003200:	4b06      	ldr	r3, [pc, #24]	; (800321c <HAL_IncTick+0x20>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <HAL_IncTick+0x24>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4413      	add	r3, r2
 800320c:	4a04      	ldr	r2, [pc, #16]	; (8003220 <HAL_IncTick+0x24>)
 800320e:	6013      	str	r3, [r2, #0]
}
 8003210:	bf00      	nop
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	20000010 	.word	0x20000010
 8003220:	200003e8 	.word	0x200003e8

08003224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return uwTick;
 8003228:	4b03      	ldr	r3, [pc, #12]	; (8003238 <HAL_GetTick+0x14>)
 800322a:	681b      	ldr	r3, [r3, #0]
}
 800322c:	4618      	mov	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	200003e8 	.word	0x200003e8

0800323c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003244:	f7ff ffee 	bl	8003224 <HAL_GetTick>
 8003248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003254:	d005      	beq.n	8003262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003256:	4b09      	ldr	r3, [pc, #36]	; (800327c <HAL_Delay+0x40>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	461a      	mov	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4413      	add	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003262:	bf00      	nop
 8003264:	f7ff ffde 	bl	8003224 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	429a      	cmp	r2, r3
 8003272:	d8f7      	bhi.n	8003264 <HAL_Delay+0x28>
  {
  }
}
 8003274:	bf00      	nop
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	20000010 	.word	0x20000010

08003280 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003288:	2300      	movs	r3, #0
 800328a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e033      	b.n	80032fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	2b00      	cmp	r3, #0
 800329c:	d109      	bne.n	80032b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7fe fcc0 	bl	8001c24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d118      	bne.n	80032f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032c6:	f023 0302 	bic.w	r3, r3, #2
 80032ca:	f043 0202 	orr.w	r2, r3, #2
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f958 	bl	8003588 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	f023 0303 	bic.w	r3, r3, #3
 80032e6:	f043 0201 	orr.w	r2, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	641a      	str	r2, [r3, #64]	; 0x40
 80032ee:	e001      	b.n	80032f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
	...

08003344 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800334e:	2300      	movs	r3, #0
 8003350:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x1c>
 800335c:	2302      	movs	r3, #2
 800335e:	e105      	b.n	800356c <HAL_ADC_ConfigChannel+0x228>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b09      	cmp	r3, #9
 800336e:	d925      	bls.n	80033bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68d9      	ldr	r1, [r3, #12]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	b29b      	uxth	r3, r3
 800337c:	461a      	mov	r2, r3
 800337e:	4613      	mov	r3, r2
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	4413      	add	r3, r2
 8003384:	3b1e      	subs	r3, #30
 8003386:	2207      	movs	r2, #7
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43da      	mvns	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	400a      	ands	r2, r1
 8003394:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68d9      	ldr	r1, [r3, #12]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	4618      	mov	r0, r3
 80033a8:	4603      	mov	r3, r0
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	4403      	add	r3, r0
 80033ae:	3b1e      	subs	r3, #30
 80033b0:	409a      	lsls	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	60da      	str	r2, [r3, #12]
 80033ba:	e022      	b.n	8003402 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6919      	ldr	r1, [r3, #16]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	461a      	mov	r2, r3
 80033ca:	4613      	mov	r3, r2
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	4413      	add	r3, r2
 80033d0:	2207      	movs	r2, #7
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	43da      	mvns	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	400a      	ands	r2, r1
 80033de:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6919      	ldr	r1, [r3, #16]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	4618      	mov	r0, r3
 80033f2:	4603      	mov	r3, r0
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	4403      	add	r3, r0
 80033f8:	409a      	lsls	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b06      	cmp	r3, #6
 8003408:	d824      	bhi.n	8003454 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	3b05      	subs	r3, #5
 800341c:	221f      	movs	r2, #31
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43da      	mvns	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	400a      	ands	r2, r1
 800342a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	b29b      	uxth	r3, r3
 8003438:	4618      	mov	r0, r3
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	3b05      	subs	r3, #5
 8003446:	fa00 f203 	lsl.w	r2, r0, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	635a      	str	r2, [r3, #52]	; 0x34
 8003452:	e04c      	b.n	80034ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2b0c      	cmp	r3, #12
 800345a:	d824      	bhi.n	80034a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	4613      	mov	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	3b23      	subs	r3, #35	; 0x23
 800346e:	221f      	movs	r2, #31
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	43da      	mvns	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	400a      	ands	r2, r1
 800347c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	b29b      	uxth	r3, r3
 800348a:	4618      	mov	r0, r3
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	4613      	mov	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	3b23      	subs	r3, #35	; 0x23
 8003498:	fa00 f203 	lsl.w	r2, r0, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	631a      	str	r2, [r3, #48]	; 0x30
 80034a4:	e023      	b.n	80034ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	3b41      	subs	r3, #65	; 0x41
 80034b8:	221f      	movs	r2, #31
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43da      	mvns	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	400a      	ands	r2, r1
 80034c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	4618      	mov	r0, r3
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	3b41      	subs	r3, #65	; 0x41
 80034e2:	fa00 f203 	lsl.w	r2, r0, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034ee:	4b22      	ldr	r3, [pc, #136]	; (8003578 <HAL_ADC_ConfigChannel+0x234>)
 80034f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a21      	ldr	r2, [pc, #132]	; (800357c <HAL_ADC_ConfigChannel+0x238>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d109      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x1cc>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b12      	cmp	r3, #18
 8003502:	d105      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a19      	ldr	r2, [pc, #100]	; (800357c <HAL_ADC_ConfigChannel+0x238>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d123      	bne.n	8003562 <HAL_ADC_ConfigChannel+0x21e>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2b10      	cmp	r3, #16
 8003520:	d003      	beq.n	800352a <HAL_ADC_ConfigChannel+0x1e6>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2b11      	cmp	r3, #17
 8003528:	d11b      	bne.n	8003562 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b10      	cmp	r3, #16
 800353c:	d111      	bne.n	8003562 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800353e:	4b10      	ldr	r3, [pc, #64]	; (8003580 <HAL_ADC_ConfigChannel+0x23c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a10      	ldr	r2, [pc, #64]	; (8003584 <HAL_ADC_ConfigChannel+0x240>)
 8003544:	fba2 2303 	umull	r2, r3, r2, r3
 8003548:	0c9a      	lsrs	r2, r3, #18
 800354a:	4613      	mov	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003554:	e002      	b.n	800355c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	3b01      	subs	r3, #1
 800355a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1f9      	bne.n	8003556 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	40012300 	.word	0x40012300
 800357c:	40012000 	.word	0x40012000
 8003580:	20000008 	.word	0x20000008
 8003584:	431bde83 	.word	0x431bde83

08003588 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003590:	4b79      	ldr	r3, [pc, #484]	; (8003778 <ADC_Init+0x1f0>)
 8003592:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	431a      	orrs	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6859      	ldr	r1, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	021a      	lsls	r2, r3, #8
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80035e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6859      	ldr	r1, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003602:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6899      	ldr	r1, [r3, #8]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361a:	4a58      	ldr	r2, [pc, #352]	; (800377c <ADC_Init+0x1f4>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d022      	beq.n	8003666 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800362e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6899      	ldr	r1, [r3, #8]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003650:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6899      	ldr	r1, [r3, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	609a      	str	r2, [r3, #8]
 8003664:	e00f      	b.n	8003686 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003674:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003684:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0202 	bic.w	r2, r2, #2
 8003694:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6899      	ldr	r1, [r3, #8]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	7e1b      	ldrb	r3, [r3, #24]
 80036a0:	005a      	lsls	r2, r3, #1
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d01b      	beq.n	80036ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80036d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6859      	ldr	r1, [r3, #4]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	3b01      	subs	r3, #1
 80036e0:	035a      	lsls	r2, r3, #13
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	605a      	str	r2, [r3, #4]
 80036ea:	e007      	b.n	80036fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800370a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	3b01      	subs	r3, #1
 8003718:	051a      	lsls	r2, r3, #20
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003730:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6899      	ldr	r1, [r3, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800373e:	025a      	lsls	r2, r3, #9
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003756:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6899      	ldr	r1, [r3, #8]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	029a      	lsls	r2, r3, #10
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	609a      	str	r2, [r3, #8]
}
 800376c:	bf00      	nop
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	40012300 	.word	0x40012300
 800377c:	0f000001 	.word	0x0f000001

08003780 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData   Pointer to buffer in which transferred from ADC peripheral to memory will be stored. 
  * @param  Length  The length of data to be transferred from ADC peripheral to memory.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003796:	2b01      	cmp	r3, #1
 8003798:	d101      	bne.n	800379e <HAL_ADCEx_MultiModeStart_DMA+0x1e>
 800379a:	2302      	movs	r3, #2
 800379c:	e09e      	b.n	80038dc <HAL_ADCEx_MultiModeStart_DMA+0x15c>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d018      	beq.n	80037e6 <HAL_ADCEx_MultiModeStart_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0201 	orr.w	r2, r2, #1
 80037c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for temperature sensor stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80037c4:	4b47      	ldr	r3, [pc, #284]	; (80038e4 <HAL_ADCEx_MultiModeStart_DMA+0x164>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a47      	ldr	r2, [pc, #284]	; (80038e8 <HAL_ADCEx_MultiModeStart_DMA+0x168>)
 80037ca:	fba2 2303 	umull	r2, r3, r2, r3
 80037ce:	0c9a      	lsrs	r2, r3, #18
 80037d0:	4613      	mov	r3, r2
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	4413      	add	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80037d8:	e002      	b.n	80037e0 <HAL_ADCEx_MultiModeStart_DMA+0x60>
    {
      counter--;
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	3b01      	subs	r3, #1
 80037de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f9      	bne.n	80037da <HAL_ADCEx_MultiModeStart_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d172      	bne.n	80038da <HAL_ADCEx_MultiModeStart_DMA+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80037fc:	f023 0301 	bic.w	r3, r3, #1
 8003800:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003812:	2b00      	cmp	r3, #0
 8003814:	d007      	beq.n	8003826 <HAL_ADCEx_MultiModeStart_DMA+0xa6>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800381e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800382e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003832:	d106      	bne.n	8003842 <HAL_ADCEx_MultiModeStart_DMA+0xc2>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003838:	f023 0206 	bic.w	r2, r3, #6
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	645a      	str	r2, [r3, #68]	; 0x44
 8003840:	e002      	b.n	8003848 <HAL_ADCEx_MultiModeStart_DMA+0xc8>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvCplt;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003854:	4a25      	ldr	r2, [pc, #148]	; (80038ec <HAL_ADCEx_MultiModeStart_DMA+0x16c>)
 8003856:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_MultiModeDMAHalfConvCplt;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	4a24      	ldr	r2, [pc, #144]	; (80038f0 <HAL_ADCEx_MultiModeStart_DMA+0x170>)
 800385e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError ;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003864:	4a23      	ldr	r2, [pc, #140]	; (80038f4 <HAL_ADCEx_MultiModeStart_DMA+0x174>)
 8003866:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f06f 0202 	mvn.w	r2, #2
 8003870:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003880:	605a      	str	r2, [r3, #4]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003882:	4b1d      	ldr	r3, [pc, #116]	; (80038f8 <HAL_ADCEx_MultiModeStart_DMA+0x178>)
 8003884:	617b      	str	r3, [r7, #20]

    if (hadc->Init.DMAContinuousRequests != DISABLE)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800388c:	2b00      	cmp	r3, #0
 800388e:	d006      	beq.n	800389e <HAL_ADCEx_MultiModeStart_DMA+0x11e>
    {
      /* Enable the selected ADC DMA request after last transfer */
      tmpADC_Common->CCR |= ADC_CCR_DDS;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	605a      	str	r2, [r3, #4]
 800389c:	e005      	b.n	80038aa <HAL_ADCEx_MultiModeStart_DMA+0x12a>
    }
    else
    {
      /* Disable the selected ADC EOC rising on each regular channel conversion */
      tmpADC_Common->CCR &= ~ADC_CCR_DDS;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	605a      	str	r2, [r3, #4]
    }
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	3308      	adds	r3, #8
 80038b2:	4619      	mov	r1, r3
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f000 fbc8 	bl	800404c <HAL_DMA_Start_IT>
    
    /* if no external trigger present enable software conversion of regular channels */
    if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d107      	bne.n	80038da <HAL_ADCEx_MultiModeStart_DMA+0x15a>
    {
      /* Enable the selected ADC software conversion for regular group */
      hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80038d8:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3718      	adds	r7, #24
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	20000008 	.word	0x20000008
 80038e8:	431bde83 	.word	0x431bde83
 80038ec:	08003989 	.word	0x08003989
 80038f0:	08003a2f 	.word	0x08003a2f
 80038f4:	08003a4b 	.word	0x08003a4b
 80038f8:	40012300 	.word	0x40012300

080038fc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8003910:	2302      	movs	r3, #2
 8003912:	e031      	b.n	8003978 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800391c:	4b19      	ldr	r3, [pc, #100]	; (8003984 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 800391e:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f023 021f 	bic.w	r2, r3, #31
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	431a      	orrs	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	431a      	orrs	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	431a      	orrs	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	40012300 	.word	0x40012300

08003988 <ADC_MultiModeDMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003994:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d13c      	bne.n	8003a1c <ADC_MultiModeDMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d12b      	bne.n	8003a14 <ADC_MultiModeDMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d127      	bne.n	8003a14 <ADC_MultiModeDMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d006      	beq.n	80039e0 <ADC_MultiModeDMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d119      	bne.n	8003a14 <ADC_MultiModeDMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0220 	bic.w	r2, r2, #32
 80039ee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d105      	bne.n	8003a14 <ADC_MultiModeDMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0c:	f043 0201 	orr.w	r2, r3, #1
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f7ff fc76 	bl	8003306 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003a1a:	e004      	b.n	8003a26 <ADC_MultiModeDMAConvCplt+0x9e>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	4798      	blx	r3
}
 8003a26:	bf00      	nop
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <ADC_MultiModeDMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b084      	sub	sp, #16
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
    ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3a:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
    HAL_ADC_ConvHalfCpltCallback(hadc); 
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f7ff fc6c 	bl	800331a <HAL_ADC_ConvHalfCpltCallback>
}
 8003a42:	bf00      	nop
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <ADC_MultiModeDMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma)   
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
    ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a56:	60fb      	str	r3, [r7, #12]
    hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2240      	movs	r2, #64	; 0x40
 8003a5c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Set ADC error code to DMA error */
    hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a62:	f043 0204 	orr.w	r2, r3, #4
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_ADC_ErrorCallback(hadc); 
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f7ff fc5f 	bl	800332e <HAL_ADC_ErrorCallback>
}
 8003a70:	bf00      	nop
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a88:	4b0c      	ldr	r3, [pc, #48]	; (8003abc <__NVIC_SetPriorityGrouping+0x44>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a94:	4013      	ands	r3, r2
 8003a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aaa:	4a04      	ldr	r2, [pc, #16]	; (8003abc <__NVIC_SetPriorityGrouping+0x44>)
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	60d3      	str	r3, [r2, #12]
}
 8003ab0:	bf00      	nop
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	e000ed00 	.word	0xe000ed00

08003ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ac4:	4b04      	ldr	r3, [pc, #16]	; (8003ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	0a1b      	lsrs	r3, r3, #8
 8003aca:	f003 0307 	and.w	r3, r3, #7
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	e000ed00 	.word	0xe000ed00

08003adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	db0b      	blt.n	8003b06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aee:	79fb      	ldrb	r3, [r7, #7]
 8003af0:	f003 021f 	and.w	r2, r3, #31
 8003af4:	4907      	ldr	r1, [pc, #28]	; (8003b14 <__NVIC_EnableIRQ+0x38>)
 8003af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afa:	095b      	lsrs	r3, r3, #5
 8003afc:	2001      	movs	r0, #1
 8003afe:	fa00 f202 	lsl.w	r2, r0, r2
 8003b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	e000e100 	.word	0xe000e100

08003b18 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	db10      	blt.n	8003b4c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b2a:	79fb      	ldrb	r3, [r7, #7]
 8003b2c:	f003 021f 	and.w	r2, r3, #31
 8003b30:	4909      	ldr	r1, [pc, #36]	; (8003b58 <__NVIC_DisableIRQ+0x40>)
 8003b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	2001      	movs	r0, #1
 8003b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b3e:	3320      	adds	r3, #32
 8003b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003b44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003b48:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	e000e100 	.word	0xe000e100

08003b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	6039      	str	r1, [r7, #0]
 8003b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	db0a      	blt.n	8003b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	490c      	ldr	r1, [pc, #48]	; (8003ba8 <__NVIC_SetPriority+0x4c>)
 8003b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7a:	0112      	lsls	r2, r2, #4
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	440b      	add	r3, r1
 8003b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b84:	e00a      	b.n	8003b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	4908      	ldr	r1, [pc, #32]	; (8003bac <__NVIC_SetPriority+0x50>)
 8003b8c:	79fb      	ldrb	r3, [r7, #7]
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	3b04      	subs	r3, #4
 8003b94:	0112      	lsls	r2, r2, #4
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	440b      	add	r3, r1
 8003b9a:	761a      	strb	r2, [r3, #24]
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	e000e100 	.word	0xe000e100
 8003bac:	e000ed00 	.word	0xe000ed00

08003bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b089      	sub	sp, #36	; 0x24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	f1c3 0307 	rsb	r3, r3, #7
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	bf28      	it	cs
 8003bce:	2304      	movcs	r3, #4
 8003bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	2b06      	cmp	r3, #6
 8003bd8:	d902      	bls.n	8003be0 <NVIC_EncodePriority+0x30>
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	3b03      	subs	r3, #3
 8003bde:	e000      	b.n	8003be2 <NVIC_EncodePriority+0x32>
 8003be0:	2300      	movs	r3, #0
 8003be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be4:	f04f 32ff 	mov.w	r2, #4294967295
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	fa02 f303 	lsl.w	r3, r2, r3
 8003bee:	43da      	mvns	r2, r3
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	401a      	ands	r2, r3
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003c02:	43d9      	mvns	r1, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c08:	4313      	orrs	r3, r2
         );
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3724      	adds	r7, #36	; 0x24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
	...

08003c18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c28:	d301      	bcc.n	8003c2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e00f      	b.n	8003c4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c2e:	4a0a      	ldr	r2, [pc, #40]	; (8003c58 <SysTick_Config+0x40>)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c36:	210f      	movs	r1, #15
 8003c38:	f04f 30ff 	mov.w	r0, #4294967295
 8003c3c:	f7ff ff8e 	bl	8003b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c40:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <SysTick_Config+0x40>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c46:	4b04      	ldr	r3, [pc, #16]	; (8003c58 <SysTick_Config+0x40>)
 8003c48:	2207      	movs	r2, #7
 8003c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	e000e010 	.word	0xe000e010

08003c5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7ff ff07 	bl	8003a78 <__NVIC_SetPriorityGrouping>
}
 8003c6a:	bf00      	nop
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b086      	sub	sp, #24
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	4603      	mov	r3, r0
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	607a      	str	r2, [r7, #4]
 8003c7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c84:	f7ff ff1c 	bl	8003ac0 <__NVIC_GetPriorityGrouping>
 8003c88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	68b9      	ldr	r1, [r7, #8]
 8003c8e:	6978      	ldr	r0, [r7, #20]
 8003c90:	f7ff ff8e 	bl	8003bb0 <NVIC_EncodePriority>
 8003c94:	4602      	mov	r2, r0
 8003c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff ff5d 	bl	8003b5c <__NVIC_SetPriority>
}
 8003ca2:	bf00      	nop
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b082      	sub	sp, #8
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff ff0f 	bl	8003adc <__NVIC_EnableIRQ>
}
 8003cbe:	bf00      	nop
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b082      	sub	sp, #8
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	4603      	mov	r3, r0
 8003cce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff ff1f 	bl	8003b18 <__NVIC_DisableIRQ>
}
 8003cda:	bf00      	nop
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b082      	sub	sp, #8
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7ff ff94 	bl	8003c18 <SysTick_Config>
 8003cf0:	4603      	mov	r3, r0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b082      	sub	sp, #8
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e014      	b.n	8003d36 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	791b      	ldrb	r3, [r3, #4]
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d105      	bne.n	8003d22 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7fe f85b 	bl	8001dd8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2202      	movs	r2, #2
 8003d26:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b085      	sub	sp, #20
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
 8003d46:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	795b      	ldrb	r3, [r3, #5]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_DAC_Start+0x1e>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e050      	b.n	8003dfe <HAL_DAC_Start+0xc0>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2202      	movs	r2, #2
 8003d66:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6819      	ldr	r1, [r3, #0]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	409a      	lsls	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d11a      	bne.n	8003db8 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d98:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d127      	bne.n	8003df0 <HAL_DAC_Start+0xb2>
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2b38      	cmp	r3, #56	; 0x38
 8003da4:	d124      	bne.n	8003df0 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f042 0201 	orr.w	r2, r2, #1
 8003db4:	605a      	str	r2, [r3, #4]
 8003db6:	e01b      	b.n	8003df0 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dc2:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8003dce:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dd6:	d10b      	bne.n	8003df0 <HAL_DAC_Start+0xb2>
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8003dde:	d107      	bne.n	8003df0 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0202 	orr.w	r2, r2, #2
 8003dee:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b087      	sub	sp, #28
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	60f8      	str	r0, [r7, #12]
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	617b      	str	r3, [r7, #20]
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	795b      	ldrb	r3, [r3, #5]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d101      	bne.n	8003e2a <HAL_DAC_ConfigChannel+0x20>
 8003e26:	2302      	movs	r3, #2
 8003e28:	e036      	b.n	8003e98 <HAL_DAC_ConfigChannel+0x8e>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2202      	movs	r2, #2
 8003e34:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003e3e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6819      	ldr	r1, [r3, #0]
 8003e78:	22c0      	movs	r2, #192	; 0xc0
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	43da      	mvns	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	400a      	ands	r2, r1
 8003e88:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	371c      	adds	r7, #28
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8003ea4:	b480      	push	{r7}
 8003ea6:	b087      	sub	sp, #28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d105      	bne.n	8003ece <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	3308      	adds	r3, #8
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	e004      	b.n	8003ed8 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	3314      	adds	r3, #20
 8003ed6:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	461a      	mov	r2, r3
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	371c      	adds	r7, #28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
	...

08003ef0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003efc:	f7ff f992 	bl	8003224 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e099      	b.n	8004040 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 0201 	bic.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f2c:	e00f      	b.n	8003f4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f2e:	f7ff f979 	bl	8003224 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b05      	cmp	r3, #5
 8003f3a:	d908      	bls.n	8003f4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2203      	movs	r2, #3
 8003f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e078      	b.n	8004040 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1e8      	bne.n	8003f2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	4b38      	ldr	r3, [pc, #224]	; (8004048 <HAL_DMA_Init+0x158>)
 8003f68:	4013      	ands	r3, r2
 8003f6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	2b04      	cmp	r3, #4
 8003fa6:	d107      	bne.n	8003fb8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f023 0307 	bic.w	r3, r3, #7
 8003fce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d117      	bne.n	8004012 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00e      	beq.n	8004012 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f8e5 	bl	80041c4 <DMA_CheckFifoParam>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d008      	beq.n	8004012 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2240      	movs	r2, #64	; 0x40
 8004004:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800400e:	2301      	movs	r3, #1
 8004010:	e016      	b.n	8004040 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f89c 	bl	8004158 <DMA_CalcBaseAndBitshift>
 8004020:	4603      	mov	r3, r0
 8004022:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004028:	223f      	movs	r2, #63	; 0x3f
 800402a:	409a      	lsls	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3718      	adds	r7, #24
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	f010803f 	.word	0xf010803f

0800404c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004062:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800406a:	2b01      	cmp	r3, #1
 800406c:	d101      	bne.n	8004072 <HAL_DMA_Start_IT+0x26>
 800406e:	2302      	movs	r3, #2
 8004070:	e040      	b.n	80040f4 <HAL_DMA_Start_IT+0xa8>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b01      	cmp	r3, #1
 8004084:	d12f      	bne.n	80040e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2202      	movs	r2, #2
 800408a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	68b9      	ldr	r1, [r7, #8]
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 f82e 	bl	80040fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a4:	223f      	movs	r2, #63	; 0x3f
 80040a6:	409a      	lsls	r2, r3
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0216 	orr.w	r2, r2, #22
 80040ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d007      	beq.n	80040d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0208 	orr.w	r2, r2, #8
 80040d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f042 0201 	orr.w	r2, r2, #1
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	e005      	b.n	80040f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80040ee:	2302      	movs	r3, #2
 80040f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80040f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3718      	adds	r7, #24
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
 8004108:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004118:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	2b40      	cmp	r3, #64	; 0x40
 8004128:	d108      	bne.n	800413c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800413a:	e007      	b.n	800414c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	60da      	str	r2, [r3, #12]
}
 800414c:	bf00      	nop
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	b2db      	uxtb	r3, r3
 8004166:	3b10      	subs	r3, #16
 8004168:	4a14      	ldr	r2, [pc, #80]	; (80041bc <DMA_CalcBaseAndBitshift+0x64>)
 800416a:	fba2 2303 	umull	r2, r3, r2, r3
 800416e:	091b      	lsrs	r3, r3, #4
 8004170:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004172:	4a13      	ldr	r2, [pc, #76]	; (80041c0 <DMA_CalcBaseAndBitshift+0x68>)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4413      	add	r3, r2
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	461a      	mov	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2b03      	cmp	r3, #3
 8004184:	d909      	bls.n	800419a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800418e:	f023 0303 	bic.w	r3, r3, #3
 8004192:	1d1a      	adds	r2, r3, #4
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	659a      	str	r2, [r3, #88]	; 0x58
 8004198:	e007      	b.n	80041aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041a2:	f023 0303 	bic.w	r3, r3, #3
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	aaaaaaab 	.word	0xaaaaaaab
 80041c0:	08007200 	.word	0x08007200

080041c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d11f      	bne.n	800421e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	2b03      	cmp	r3, #3
 80041e2:	d855      	bhi.n	8004290 <DMA_CheckFifoParam+0xcc>
 80041e4:	a201      	add	r2, pc, #4	; (adr r2, 80041ec <DMA_CheckFifoParam+0x28>)
 80041e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ea:	bf00      	nop
 80041ec:	080041fd 	.word	0x080041fd
 80041f0:	0800420f 	.word	0x0800420f
 80041f4:	080041fd 	.word	0x080041fd
 80041f8:	08004291 	.word	0x08004291
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004200:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d045      	beq.n	8004294 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800420c:	e042      	b.n	8004294 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004212:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004216:	d13f      	bne.n	8004298 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800421c:	e03c      	b.n	8004298 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004226:	d121      	bne.n	800426c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b03      	cmp	r3, #3
 800422c:	d836      	bhi.n	800429c <DMA_CheckFifoParam+0xd8>
 800422e:	a201      	add	r2, pc, #4	; (adr r2, 8004234 <DMA_CheckFifoParam+0x70>)
 8004230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004234:	08004245 	.word	0x08004245
 8004238:	0800424b 	.word	0x0800424b
 800423c:	08004245 	.word	0x08004245
 8004240:	0800425d 	.word	0x0800425d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	73fb      	strb	r3, [r7, #15]
      break;
 8004248:	e02f      	b.n	80042aa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d024      	beq.n	80042a0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800425a:	e021      	b.n	80042a0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004260:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004264:	d11e      	bne.n	80042a4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800426a:	e01b      	b.n	80042a4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2b02      	cmp	r3, #2
 8004270:	d902      	bls.n	8004278 <DMA_CheckFifoParam+0xb4>
 8004272:	2b03      	cmp	r3, #3
 8004274:	d003      	beq.n	800427e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004276:	e018      	b.n	80042aa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	73fb      	strb	r3, [r7, #15]
      break;
 800427c:	e015      	b.n	80042aa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004282:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00e      	beq.n	80042a8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	73fb      	strb	r3, [r7, #15]
      break;
 800428e:	e00b      	b.n	80042a8 <DMA_CheckFifoParam+0xe4>
      break;
 8004290:	bf00      	nop
 8004292:	e00a      	b.n	80042aa <DMA_CheckFifoParam+0xe6>
      break;
 8004294:	bf00      	nop
 8004296:	e008      	b.n	80042aa <DMA_CheckFifoParam+0xe6>
      break;
 8004298:	bf00      	nop
 800429a:	e006      	b.n	80042aa <DMA_CheckFifoParam+0xe6>
      break;
 800429c:	bf00      	nop
 800429e:	e004      	b.n	80042aa <DMA_CheckFifoParam+0xe6>
      break;
 80042a0:	bf00      	nop
 80042a2:	e002      	b.n	80042aa <DMA_CheckFifoParam+0xe6>
      break;   
 80042a4:	bf00      	nop
 80042a6:	e000      	b.n	80042aa <DMA_CheckFifoParam+0xe6>
      break;
 80042a8:	bf00      	nop
    }
  } 
  
  return status; 
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b089      	sub	sp, #36	; 0x24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042ce:	2300      	movs	r3, #0
 80042d0:	61fb      	str	r3, [r7, #28]
 80042d2:	e16b      	b.n	80045ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042d4:	2201      	movs	r2, #1
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	4013      	ands	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	f040 815a 	bne.w	80045a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d00b      	beq.n	8004312 <HAL_GPIO_Init+0x5a>
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d007      	beq.n	8004312 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004306:	2b11      	cmp	r3, #17
 8004308:	d003      	beq.n	8004312 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2b12      	cmp	r3, #18
 8004310:	d130      	bne.n	8004374 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	2203      	movs	r2, #3
 800431e:	fa02 f303 	lsl.w	r3, r2, r3
 8004322:	43db      	mvns	r3, r3
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	4013      	ands	r3, r2
 8004328:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	4313      	orrs	r3, r2
 800433a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004348:	2201      	movs	r2, #1
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	fa02 f303 	lsl.w	r3, r2, r3
 8004350:	43db      	mvns	r3, r3
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	4013      	ands	r3, r2
 8004356:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	091b      	lsrs	r3, r3, #4
 800435e:	f003 0201 	and.w	r2, r3, #1
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	4313      	orrs	r3, r2
 800436c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	2203      	movs	r2, #3
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	43db      	mvns	r3, r3
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	4013      	ands	r3, r2
 800438a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	689a      	ldr	r2, [r3, #8]
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	4313      	orrs	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d003      	beq.n	80043b4 <HAL_GPIO_Init+0xfc>
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2b12      	cmp	r3, #18
 80043b2:	d123      	bne.n	80043fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	08da      	lsrs	r2, r3, #3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3208      	adds	r2, #8
 80043bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	220f      	movs	r2, #15
 80043cc:	fa02 f303 	lsl.w	r3, r2, r3
 80043d0:	43db      	mvns	r3, r3
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	4013      	ands	r3, r2
 80043d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	08da      	lsrs	r2, r3, #3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3208      	adds	r2, #8
 80043f6:	69b9      	ldr	r1, [r7, #24]
 80043f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	2203      	movs	r2, #3
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	43db      	mvns	r3, r3
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	4013      	ands	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f003 0203 	and.w	r2, r3, #3
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	4313      	orrs	r3, r2
 8004428:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 80b4 	beq.w	80045a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800443e:	2300      	movs	r3, #0
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	4b5f      	ldr	r3, [pc, #380]	; (80045c0 <HAL_GPIO_Init+0x308>)
 8004444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004446:	4a5e      	ldr	r2, [pc, #376]	; (80045c0 <HAL_GPIO_Init+0x308>)
 8004448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800444c:	6453      	str	r3, [r2, #68]	; 0x44
 800444e:	4b5c      	ldr	r3, [pc, #368]	; (80045c0 <HAL_GPIO_Init+0x308>)
 8004450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800445a:	4a5a      	ldr	r2, [pc, #360]	; (80045c4 <HAL_GPIO_Init+0x30c>)
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	089b      	lsrs	r3, r3, #2
 8004460:	3302      	adds	r3, #2
 8004462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	220f      	movs	r2, #15
 8004472:	fa02 f303 	lsl.w	r3, r2, r3
 8004476:	43db      	mvns	r3, r3
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	4013      	ands	r3, r2
 800447c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a51      	ldr	r2, [pc, #324]	; (80045c8 <HAL_GPIO_Init+0x310>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d02b      	beq.n	80044de <HAL_GPIO_Init+0x226>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a50      	ldr	r2, [pc, #320]	; (80045cc <HAL_GPIO_Init+0x314>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d025      	beq.n	80044da <HAL_GPIO_Init+0x222>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a4f      	ldr	r2, [pc, #316]	; (80045d0 <HAL_GPIO_Init+0x318>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d01f      	beq.n	80044d6 <HAL_GPIO_Init+0x21e>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a4e      	ldr	r2, [pc, #312]	; (80045d4 <HAL_GPIO_Init+0x31c>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d019      	beq.n	80044d2 <HAL_GPIO_Init+0x21a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a4d      	ldr	r2, [pc, #308]	; (80045d8 <HAL_GPIO_Init+0x320>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d013      	beq.n	80044ce <HAL_GPIO_Init+0x216>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a4c      	ldr	r2, [pc, #304]	; (80045dc <HAL_GPIO_Init+0x324>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d00d      	beq.n	80044ca <HAL_GPIO_Init+0x212>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a4b      	ldr	r2, [pc, #300]	; (80045e0 <HAL_GPIO_Init+0x328>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d007      	beq.n	80044c6 <HAL_GPIO_Init+0x20e>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a4a      	ldr	r2, [pc, #296]	; (80045e4 <HAL_GPIO_Init+0x32c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d101      	bne.n	80044c2 <HAL_GPIO_Init+0x20a>
 80044be:	2307      	movs	r3, #7
 80044c0:	e00e      	b.n	80044e0 <HAL_GPIO_Init+0x228>
 80044c2:	2308      	movs	r3, #8
 80044c4:	e00c      	b.n	80044e0 <HAL_GPIO_Init+0x228>
 80044c6:	2306      	movs	r3, #6
 80044c8:	e00a      	b.n	80044e0 <HAL_GPIO_Init+0x228>
 80044ca:	2305      	movs	r3, #5
 80044cc:	e008      	b.n	80044e0 <HAL_GPIO_Init+0x228>
 80044ce:	2304      	movs	r3, #4
 80044d0:	e006      	b.n	80044e0 <HAL_GPIO_Init+0x228>
 80044d2:	2303      	movs	r3, #3
 80044d4:	e004      	b.n	80044e0 <HAL_GPIO_Init+0x228>
 80044d6:	2302      	movs	r3, #2
 80044d8:	e002      	b.n	80044e0 <HAL_GPIO_Init+0x228>
 80044da:	2301      	movs	r3, #1
 80044dc:	e000      	b.n	80044e0 <HAL_GPIO_Init+0x228>
 80044de:	2300      	movs	r3, #0
 80044e0:	69fa      	ldr	r2, [r7, #28]
 80044e2:	f002 0203 	and.w	r2, r2, #3
 80044e6:	0092      	lsls	r2, r2, #2
 80044e8:	4093      	lsls	r3, r2
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044f0:	4934      	ldr	r1, [pc, #208]	; (80045c4 <HAL_GPIO_Init+0x30c>)
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	089b      	lsrs	r3, r3, #2
 80044f6:	3302      	adds	r3, #2
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044fe:	4b3a      	ldr	r3, [pc, #232]	; (80045e8 <HAL_GPIO_Init+0x330>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	43db      	mvns	r3, r3
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	4013      	ands	r3, r2
 800450c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	4313      	orrs	r3, r2
 8004520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004522:	4a31      	ldr	r2, [pc, #196]	; (80045e8 <HAL_GPIO_Init+0x330>)
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004528:	4b2f      	ldr	r3, [pc, #188]	; (80045e8 <HAL_GPIO_Init+0x330>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	43db      	mvns	r3, r3
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	4013      	ands	r3, r2
 8004536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d003      	beq.n	800454c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	4313      	orrs	r3, r2
 800454a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800454c:	4a26      	ldr	r2, [pc, #152]	; (80045e8 <HAL_GPIO_Init+0x330>)
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004552:	4b25      	ldr	r3, [pc, #148]	; (80045e8 <HAL_GPIO_Init+0x330>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	43db      	mvns	r3, r3
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	4013      	ands	r3, r2
 8004560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	4313      	orrs	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004576:	4a1c      	ldr	r2, [pc, #112]	; (80045e8 <HAL_GPIO_Init+0x330>)
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800457c:	4b1a      	ldr	r3, [pc, #104]	; (80045e8 <HAL_GPIO_Init+0x330>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	43db      	mvns	r3, r3
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	4013      	ands	r3, r2
 800458a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	4313      	orrs	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045a0:	4a11      	ldr	r2, [pc, #68]	; (80045e8 <HAL_GPIO_Init+0x330>)
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	3301      	adds	r3, #1
 80045aa:	61fb      	str	r3, [r7, #28]
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	2b0f      	cmp	r3, #15
 80045b0:	f67f ae90 	bls.w	80042d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045b4:	bf00      	nop
 80045b6:	3724      	adds	r7, #36	; 0x24
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	40023800 	.word	0x40023800
 80045c4:	40013800 	.word	0x40013800
 80045c8:	40020000 	.word	0x40020000
 80045cc:	40020400 	.word	0x40020400
 80045d0:	40020800 	.word	0x40020800
 80045d4:	40020c00 	.word	0x40020c00
 80045d8:	40021000 	.word	0x40021000
 80045dc:	40021400 	.word	0x40021400
 80045e0:	40021800 	.word	0x40021800
 80045e4:	40021c00 	.word	0x40021c00
 80045e8:	40013c00 	.word	0x40013c00

080045ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	460b      	mov	r3, r1
 80045f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691a      	ldr	r2, [r3, #16]
 80045fc:	887b      	ldrh	r3, [r7, #2]
 80045fe:	4013      	ands	r3, r2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d002      	beq.n	800460a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004604:	2301      	movs	r3, #1
 8004606:	73fb      	strb	r3, [r7, #15]
 8004608:	e001      	b.n	800460e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800460a:	2300      	movs	r3, #0
 800460c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800460e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3714      	adds	r7, #20
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	460b      	mov	r3, r1
 8004626:	807b      	strh	r3, [r7, #2]
 8004628:	4613      	mov	r3, r2
 800462a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800462c:	787b      	ldrb	r3, [r7, #1]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004632:	887a      	ldrh	r2, [r7, #2]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004638:	e003      	b.n	8004642 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800463a:	887b      	ldrh	r3, [r7, #2]
 800463c:	041a      	lsls	r2, r3, #16
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	619a      	str	r2, [r3, #24]
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
	...

08004650 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e25b      	b.n	8004b1a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d075      	beq.n	800475a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800466e:	4ba3      	ldr	r3, [pc, #652]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 030c 	and.w	r3, r3, #12
 8004676:	2b04      	cmp	r3, #4
 8004678:	d00c      	beq.n	8004694 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800467a:	4ba0      	ldr	r3, [pc, #640]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004682:	2b08      	cmp	r3, #8
 8004684:	d112      	bne.n	80046ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004686:	4b9d      	ldr	r3, [pc, #628]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800468e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004692:	d10b      	bne.n	80046ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004694:	4b99      	ldr	r3, [pc, #612]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d05b      	beq.n	8004758 <HAL_RCC_OscConfig+0x108>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d157      	bne.n	8004758 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e236      	b.n	8004b1a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b4:	d106      	bne.n	80046c4 <HAL_RCC_OscConfig+0x74>
 80046b6:	4b91      	ldr	r3, [pc, #580]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a90      	ldr	r2, [pc, #576]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80046bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	e01d      	b.n	8004700 <HAL_RCC_OscConfig+0xb0>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046cc:	d10c      	bne.n	80046e8 <HAL_RCC_OscConfig+0x98>
 80046ce:	4b8b      	ldr	r3, [pc, #556]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a8a      	ldr	r2, [pc, #552]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80046d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	4b88      	ldr	r3, [pc, #544]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a87      	ldr	r2, [pc, #540]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80046e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	e00b      	b.n	8004700 <HAL_RCC_OscConfig+0xb0>
 80046e8:	4b84      	ldr	r3, [pc, #528]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a83      	ldr	r2, [pc, #524]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80046ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	4b81      	ldr	r3, [pc, #516]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a80      	ldr	r2, [pc, #512]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80046fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d013      	beq.n	8004730 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004708:	f7fe fd8c 	bl	8003224 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004710:	f7fe fd88 	bl	8003224 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b64      	cmp	r3, #100	; 0x64
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e1fb      	b.n	8004b1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004722:	4b76      	ldr	r3, [pc, #472]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d0f0      	beq.n	8004710 <HAL_RCC_OscConfig+0xc0>
 800472e:	e014      	b.n	800475a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004730:	f7fe fd78 	bl	8003224 <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004738:	f7fe fd74 	bl	8003224 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b64      	cmp	r3, #100	; 0x64
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e1e7      	b.n	8004b1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800474a:	4b6c      	ldr	r3, [pc, #432]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1f0      	bne.n	8004738 <HAL_RCC_OscConfig+0xe8>
 8004756:	e000      	b.n	800475a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d063      	beq.n	800482e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004766:	4b65      	ldr	r3, [pc, #404]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f003 030c 	and.w	r3, r3, #12
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00b      	beq.n	800478a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004772:	4b62      	ldr	r3, [pc, #392]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800477a:	2b08      	cmp	r3, #8
 800477c:	d11c      	bne.n	80047b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800477e:	4b5f      	ldr	r3, [pc, #380]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d116      	bne.n	80047b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800478a:	4b5c      	ldr	r3, [pc, #368]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d005      	beq.n	80047a2 <HAL_RCC_OscConfig+0x152>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d001      	beq.n	80047a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e1bb      	b.n	8004b1a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047a2:	4b56      	ldr	r3, [pc, #344]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	4952      	ldr	r1, [pc, #328]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047b6:	e03a      	b.n	800482e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d020      	beq.n	8004802 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047c0:	4b4f      	ldr	r3, [pc, #316]	; (8004900 <HAL_RCC_OscConfig+0x2b0>)
 80047c2:	2201      	movs	r2, #1
 80047c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c6:	f7fe fd2d 	bl	8003224 <HAL_GetTick>
 80047ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047cc:	e008      	b.n	80047e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ce:	f7fe fd29 	bl	8003224 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e19c      	b.n	8004b1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e0:	4b46      	ldr	r3, [pc, #280]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d0f0      	beq.n	80047ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ec:	4b43      	ldr	r3, [pc, #268]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	00db      	lsls	r3, r3, #3
 80047fa:	4940      	ldr	r1, [pc, #256]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	600b      	str	r3, [r1, #0]
 8004800:	e015      	b.n	800482e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004802:	4b3f      	ldr	r3, [pc, #252]	; (8004900 <HAL_RCC_OscConfig+0x2b0>)
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004808:	f7fe fd0c 	bl	8003224 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004810:	f7fe fd08 	bl	8003224 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e17b      	b.n	8004b1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004822:	4b36      	ldr	r3, [pc, #216]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1f0      	bne.n	8004810 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0308 	and.w	r3, r3, #8
 8004836:	2b00      	cmp	r3, #0
 8004838:	d030      	beq.n	800489c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d016      	beq.n	8004870 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004842:	4b30      	ldr	r3, [pc, #192]	; (8004904 <HAL_RCC_OscConfig+0x2b4>)
 8004844:	2201      	movs	r2, #1
 8004846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004848:	f7fe fcec 	bl	8003224 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004850:	f7fe fce8 	bl	8003224 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e15b      	b.n	8004b1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004862:	4b26      	ldr	r3, [pc, #152]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 8004864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0f0      	beq.n	8004850 <HAL_RCC_OscConfig+0x200>
 800486e:	e015      	b.n	800489c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004870:	4b24      	ldr	r3, [pc, #144]	; (8004904 <HAL_RCC_OscConfig+0x2b4>)
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004876:	f7fe fcd5 	bl	8003224 <HAL_GetTick>
 800487a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800487c:	e008      	b.n	8004890 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800487e:	f7fe fcd1 	bl	8003224 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d901      	bls.n	8004890 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e144      	b.n	8004b1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004890:	4b1a      	ldr	r3, [pc, #104]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 8004892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1f0      	bne.n	800487e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 80a0 	beq.w	80049ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048aa:	2300      	movs	r3, #0
 80048ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ae:	4b13      	ldr	r3, [pc, #76]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10f      	bne.n	80048da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ba:	2300      	movs	r3, #0
 80048bc:	60bb      	str	r3, [r7, #8]
 80048be:	4b0f      	ldr	r3, [pc, #60]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	4a0e      	ldr	r2, [pc, #56]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80048c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c8:	6413      	str	r3, [r2, #64]	; 0x40
 80048ca:	4b0c      	ldr	r3, [pc, #48]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d2:	60bb      	str	r3, [r7, #8]
 80048d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048d6:	2301      	movs	r3, #1
 80048d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048da:	4b0b      	ldr	r3, [pc, #44]	; (8004908 <HAL_RCC_OscConfig+0x2b8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d121      	bne.n	800492a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048e6:	4b08      	ldr	r3, [pc, #32]	; (8004908 <HAL_RCC_OscConfig+0x2b8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a07      	ldr	r2, [pc, #28]	; (8004908 <HAL_RCC_OscConfig+0x2b8>)
 80048ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048f2:	f7fe fc97 	bl	8003224 <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f8:	e011      	b.n	800491e <HAL_RCC_OscConfig+0x2ce>
 80048fa:	bf00      	nop
 80048fc:	40023800 	.word	0x40023800
 8004900:	42470000 	.word	0x42470000
 8004904:	42470e80 	.word	0x42470e80
 8004908:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800490c:	f7fe fc8a 	bl	8003224 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e0fd      	b.n	8004b1a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800491e:	4b81      	ldr	r3, [pc, #516]	; (8004b24 <HAL_RCC_OscConfig+0x4d4>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0f0      	beq.n	800490c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d106      	bne.n	8004940 <HAL_RCC_OscConfig+0x2f0>
 8004932:	4b7d      	ldr	r3, [pc, #500]	; (8004b28 <HAL_RCC_OscConfig+0x4d8>)
 8004934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004936:	4a7c      	ldr	r2, [pc, #496]	; (8004b28 <HAL_RCC_OscConfig+0x4d8>)
 8004938:	f043 0301 	orr.w	r3, r3, #1
 800493c:	6713      	str	r3, [r2, #112]	; 0x70
 800493e:	e01c      	b.n	800497a <HAL_RCC_OscConfig+0x32a>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2b05      	cmp	r3, #5
 8004946:	d10c      	bne.n	8004962 <HAL_RCC_OscConfig+0x312>
 8004948:	4b77      	ldr	r3, [pc, #476]	; (8004b28 <HAL_RCC_OscConfig+0x4d8>)
 800494a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494c:	4a76      	ldr	r2, [pc, #472]	; (8004b28 <HAL_RCC_OscConfig+0x4d8>)
 800494e:	f043 0304 	orr.w	r3, r3, #4
 8004952:	6713      	str	r3, [r2, #112]	; 0x70
 8004954:	4b74      	ldr	r3, [pc, #464]	; (8004b28 <HAL_RCC_OscConfig+0x4d8>)
 8004956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004958:	4a73      	ldr	r2, [pc, #460]	; (8004b28 <HAL_RCC_OscConfig+0x4d8>)
 800495a:	f043 0301 	orr.w	r3, r3, #1
 800495e:	6713      	str	r3, [r2, #112]	; 0x70
 8004960:	e00b      	b.n	800497a <HAL_RCC_OscConfig+0x32a>
 8004962:	4b71      	ldr	r3, [pc, #452]	; (8004b28 <HAL_RCC_OscConfig+0x4d8>)
 8004964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004966:	4a70      	ldr	r2, [pc, #448]	; (8004b28 <HAL_RCC_OscConfig+0x4d8>)
 8004968:	f023 0301 	bic.w	r3, r3, #1
 800496c:	6713      	str	r3, [r2, #112]	; 0x70
 800496e:	4b6e      	ldr	r3, [pc, #440]	; (8004b28 <HAL_RCC_OscConfig+0x4d8>)
 8004970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004972:	4a6d      	ldr	r2, [pc, #436]	; (8004b28 <HAL_RCC_OscConfig+0x4d8>)
 8004974:	f023 0304 	bic.w	r3, r3, #4
 8004978:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d015      	beq.n	80049ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004982:	f7fe fc4f 	bl	8003224 <HAL_GetTick>
 8004986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004988:	e00a      	b.n	80049a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800498a:	f7fe fc4b 	bl	8003224 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	f241 3288 	movw	r2, #5000	; 0x1388
 8004998:	4293      	cmp	r3, r2
 800499a:	d901      	bls.n	80049a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e0bc      	b.n	8004b1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049a0:	4b61      	ldr	r3, [pc, #388]	; (8004b28 <HAL_RCC_OscConfig+0x4d8>)
 80049a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0ee      	beq.n	800498a <HAL_RCC_OscConfig+0x33a>
 80049ac:	e014      	b.n	80049d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ae:	f7fe fc39 	bl	8003224 <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049b4:	e00a      	b.n	80049cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049b6:	f7fe fc35 	bl	8003224 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e0a6      	b.n	8004b1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049cc:	4b56      	ldr	r3, [pc, #344]	; (8004b28 <HAL_RCC_OscConfig+0x4d8>)
 80049ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1ee      	bne.n	80049b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049d8:	7dfb      	ldrb	r3, [r7, #23]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d105      	bne.n	80049ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049de:	4b52      	ldr	r3, [pc, #328]	; (8004b28 <HAL_RCC_OscConfig+0x4d8>)
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	4a51      	ldr	r2, [pc, #324]	; (8004b28 <HAL_RCC_OscConfig+0x4d8>)
 80049e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f000 8092 	beq.w	8004b18 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049f4:	4b4c      	ldr	r3, [pc, #304]	; (8004b28 <HAL_RCC_OscConfig+0x4d8>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f003 030c 	and.w	r3, r3, #12
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d05c      	beq.n	8004aba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d141      	bne.n	8004a8c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a08:	4b48      	ldr	r3, [pc, #288]	; (8004b2c <HAL_RCC_OscConfig+0x4dc>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0e:	f7fe fc09 	bl	8003224 <HAL_GetTick>
 8004a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a14:	e008      	b.n	8004a28 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a16:	f7fe fc05 	bl	8003224 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d901      	bls.n	8004a28 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e078      	b.n	8004b1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a28:	4b3f      	ldr	r3, [pc, #252]	; (8004b28 <HAL_RCC_OscConfig+0x4d8>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1f0      	bne.n	8004a16 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	69da      	ldr	r2, [r3, #28]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	019b      	lsls	r3, r3, #6
 8004a44:	431a      	orrs	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4a:	085b      	lsrs	r3, r3, #1
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	041b      	lsls	r3, r3, #16
 8004a50:	431a      	orrs	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a56:	061b      	lsls	r3, r3, #24
 8004a58:	4933      	ldr	r1, [pc, #204]	; (8004b28 <HAL_RCC_OscConfig+0x4d8>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a5e:	4b33      	ldr	r3, [pc, #204]	; (8004b2c <HAL_RCC_OscConfig+0x4dc>)
 8004a60:	2201      	movs	r2, #1
 8004a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a64:	f7fe fbde 	bl	8003224 <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a6c:	f7fe fbda 	bl	8003224 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e04d      	b.n	8004b1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a7e:	4b2a      	ldr	r3, [pc, #168]	; (8004b28 <HAL_RCC_OscConfig+0x4d8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0f0      	beq.n	8004a6c <HAL_RCC_OscConfig+0x41c>
 8004a8a:	e045      	b.n	8004b18 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a8c:	4b27      	ldr	r3, [pc, #156]	; (8004b2c <HAL_RCC_OscConfig+0x4dc>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a92:	f7fe fbc7 	bl	8003224 <HAL_GetTick>
 8004a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a98:	e008      	b.n	8004aac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a9a:	f7fe fbc3 	bl	8003224 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e036      	b.n	8004b1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aac:	4b1e      	ldr	r3, [pc, #120]	; (8004b28 <HAL_RCC_OscConfig+0x4d8>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1f0      	bne.n	8004a9a <HAL_RCC_OscConfig+0x44a>
 8004ab8:	e02e      	b.n	8004b18 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d101      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e029      	b.n	8004b1a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ac6:	4b18      	ldr	r3, [pc, #96]	; (8004b28 <HAL_RCC_OscConfig+0x4d8>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d11c      	bne.n	8004b14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d115      	bne.n	8004b14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004aee:	4013      	ands	r3, r2
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d10d      	bne.n	8004b14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d106      	bne.n	8004b14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d001      	beq.n	8004b18 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e000      	b.n	8004b1a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3718      	adds	r7, #24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	40007000 	.word	0x40007000
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	42470060 	.word	0x42470060

08004b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e0cc      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b44:	4b68      	ldr	r3, [pc, #416]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 030f 	and.w	r3, r3, #15
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d90c      	bls.n	8004b6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b52:	4b65      	ldr	r3, [pc, #404]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5a:	4b63      	ldr	r3, [pc, #396]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d001      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e0b8      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d020      	beq.n	8004bba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d005      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b84:	4b59      	ldr	r3, [pc, #356]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	4a58      	ldr	r2, [pc, #352]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0308 	and.w	r3, r3, #8
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d005      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b9c:	4b53      	ldr	r3, [pc, #332]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	4a52      	ldr	r2, [pc, #328]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004ba2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ba6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ba8:	4b50      	ldr	r3, [pc, #320]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	494d      	ldr	r1, [pc, #308]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d044      	beq.n	8004c50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d107      	bne.n	8004bde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bce:	4b47      	ldr	r3, [pc, #284]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d119      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e07f      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d003      	beq.n	8004bee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bea:	2b03      	cmp	r3, #3
 8004bec:	d107      	bne.n	8004bfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bee:	4b3f      	ldr	r3, [pc, #252]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d109      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e06f      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bfe:	4b3b      	ldr	r3, [pc, #236]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e067      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c0e:	4b37      	ldr	r3, [pc, #220]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f023 0203 	bic.w	r2, r3, #3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	4934      	ldr	r1, [pc, #208]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c20:	f7fe fb00 	bl	8003224 <HAL_GetTick>
 8004c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c26:	e00a      	b.n	8004c3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c28:	f7fe fafc 	bl	8003224 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e04f      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c3e:	4b2b      	ldr	r3, [pc, #172]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 020c 	and.w	r2, r3, #12
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d1eb      	bne.n	8004c28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c50:	4b25      	ldr	r3, [pc, #148]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 030f 	and.w	r3, r3, #15
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d20c      	bcs.n	8004c78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c5e:	4b22      	ldr	r3, [pc, #136]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c66:	4b20      	ldr	r3, [pc, #128]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 030f 	and.w	r3, r3, #15
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d001      	beq.n	8004c78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e032      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d008      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c84:	4b19      	ldr	r3, [pc, #100]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	4916      	ldr	r1, [pc, #88]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0308 	and.w	r3, r3, #8
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d009      	beq.n	8004cb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ca2:	4b12      	ldr	r3, [pc, #72]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	490e      	ldr	r1, [pc, #56]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cb6:	f000 f821 	bl	8004cfc <HAL_RCC_GetSysClockFreq>
 8004cba:	4601      	mov	r1, r0
 8004cbc:	4b0b      	ldr	r3, [pc, #44]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	091b      	lsrs	r3, r3, #4
 8004cc2:	f003 030f 	and.w	r3, r3, #15
 8004cc6:	4a0a      	ldr	r2, [pc, #40]	; (8004cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8004cc8:	5cd3      	ldrb	r3, [r2, r3]
 8004cca:	fa21 f303 	lsr.w	r3, r1, r3
 8004cce:	4a09      	ldr	r2, [pc, #36]	; (8004cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cd2:	4b09      	ldr	r3, [pc, #36]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fe fa60 	bl	800319c <HAL_InitTick>

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	40023c00 	.word	0x40023c00
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	080071f0 	.word	0x080071f0
 8004cf4:	20000008 	.word	0x20000008
 8004cf8:	2000000c 	.word	0x2000000c

08004cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	607b      	str	r3, [r7, #4]
 8004d06:	2300      	movs	r3, #0
 8004d08:	60fb      	str	r3, [r7, #12]
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d12:	4b63      	ldr	r3, [pc, #396]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 030c 	and.w	r3, r3, #12
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d007      	beq.n	8004d2e <HAL_RCC_GetSysClockFreq+0x32>
 8004d1e:	2b08      	cmp	r3, #8
 8004d20:	d008      	beq.n	8004d34 <HAL_RCC_GetSysClockFreq+0x38>
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f040 80b4 	bne.w	8004e90 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d28:	4b5e      	ldr	r3, [pc, #376]	; (8004ea4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004d2a:	60bb      	str	r3, [r7, #8]
       break;
 8004d2c:	e0b3      	b.n	8004e96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d2e:	4b5e      	ldr	r3, [pc, #376]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004d30:	60bb      	str	r3, [r7, #8]
      break;
 8004d32:	e0b0      	b.n	8004e96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d34:	4b5a      	ldr	r3, [pc, #360]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d3c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d3e:	4b58      	ldr	r3, [pc, #352]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d04a      	beq.n	8004de0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d4a:	4b55      	ldr	r3, [pc, #340]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	099b      	lsrs	r3, r3, #6
 8004d50:	f04f 0400 	mov.w	r4, #0
 8004d54:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	ea03 0501 	and.w	r5, r3, r1
 8004d60:	ea04 0602 	and.w	r6, r4, r2
 8004d64:	4629      	mov	r1, r5
 8004d66:	4632      	mov	r2, r6
 8004d68:	f04f 0300 	mov.w	r3, #0
 8004d6c:	f04f 0400 	mov.w	r4, #0
 8004d70:	0154      	lsls	r4, r2, #5
 8004d72:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d76:	014b      	lsls	r3, r1, #5
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4622      	mov	r2, r4
 8004d7c:	1b49      	subs	r1, r1, r5
 8004d7e:	eb62 0206 	sbc.w	r2, r2, r6
 8004d82:	f04f 0300 	mov.w	r3, #0
 8004d86:	f04f 0400 	mov.w	r4, #0
 8004d8a:	0194      	lsls	r4, r2, #6
 8004d8c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004d90:	018b      	lsls	r3, r1, #6
 8004d92:	1a5b      	subs	r3, r3, r1
 8004d94:	eb64 0402 	sbc.w	r4, r4, r2
 8004d98:	f04f 0100 	mov.w	r1, #0
 8004d9c:	f04f 0200 	mov.w	r2, #0
 8004da0:	00e2      	lsls	r2, r4, #3
 8004da2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004da6:	00d9      	lsls	r1, r3, #3
 8004da8:	460b      	mov	r3, r1
 8004daa:	4614      	mov	r4, r2
 8004dac:	195b      	adds	r3, r3, r5
 8004dae:	eb44 0406 	adc.w	r4, r4, r6
 8004db2:	f04f 0100 	mov.w	r1, #0
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	0262      	lsls	r2, r4, #9
 8004dbc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004dc0:	0259      	lsls	r1, r3, #9
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4614      	mov	r4, r2
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	4621      	mov	r1, r4
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f04f 0400 	mov.w	r4, #0
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	4623      	mov	r3, r4
 8004dd4:	f7fb fe16 	bl	8000a04 <__aeabi_uldivmod>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	460c      	mov	r4, r1
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	e049      	b.n	8004e74 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004de0:	4b2f      	ldr	r3, [pc, #188]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	099b      	lsrs	r3, r3, #6
 8004de6:	f04f 0400 	mov.w	r4, #0
 8004dea:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004dee:	f04f 0200 	mov.w	r2, #0
 8004df2:	ea03 0501 	and.w	r5, r3, r1
 8004df6:	ea04 0602 	and.w	r6, r4, r2
 8004dfa:	4629      	mov	r1, r5
 8004dfc:	4632      	mov	r2, r6
 8004dfe:	f04f 0300 	mov.w	r3, #0
 8004e02:	f04f 0400 	mov.w	r4, #0
 8004e06:	0154      	lsls	r4, r2, #5
 8004e08:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004e0c:	014b      	lsls	r3, r1, #5
 8004e0e:	4619      	mov	r1, r3
 8004e10:	4622      	mov	r2, r4
 8004e12:	1b49      	subs	r1, r1, r5
 8004e14:	eb62 0206 	sbc.w	r2, r2, r6
 8004e18:	f04f 0300 	mov.w	r3, #0
 8004e1c:	f04f 0400 	mov.w	r4, #0
 8004e20:	0194      	lsls	r4, r2, #6
 8004e22:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004e26:	018b      	lsls	r3, r1, #6
 8004e28:	1a5b      	subs	r3, r3, r1
 8004e2a:	eb64 0402 	sbc.w	r4, r4, r2
 8004e2e:	f04f 0100 	mov.w	r1, #0
 8004e32:	f04f 0200 	mov.w	r2, #0
 8004e36:	00e2      	lsls	r2, r4, #3
 8004e38:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004e3c:	00d9      	lsls	r1, r3, #3
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4614      	mov	r4, r2
 8004e42:	195b      	adds	r3, r3, r5
 8004e44:	eb44 0406 	adc.w	r4, r4, r6
 8004e48:	f04f 0100 	mov.w	r1, #0
 8004e4c:	f04f 0200 	mov.w	r2, #0
 8004e50:	02a2      	lsls	r2, r4, #10
 8004e52:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004e56:	0299      	lsls	r1, r3, #10
 8004e58:	460b      	mov	r3, r1
 8004e5a:	4614      	mov	r4, r2
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	4621      	mov	r1, r4
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f04f 0400 	mov.w	r4, #0
 8004e66:	461a      	mov	r2, r3
 8004e68:	4623      	mov	r3, r4
 8004e6a:	f7fb fdcb 	bl	8000a04 <__aeabi_uldivmod>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	460c      	mov	r4, r1
 8004e72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e74:	4b0a      	ldr	r3, [pc, #40]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	0c1b      	lsrs	r3, r3, #16
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	3301      	adds	r3, #1
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e8c:	60bb      	str	r3, [r7, #8]
      break;
 8004e8e:	e002      	b.n	8004e96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e90:	4b04      	ldr	r3, [pc, #16]	; (8004ea4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004e92:	60bb      	str	r3, [r7, #8]
      break;
 8004e94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e96:	68bb      	ldr	r3, [r7, #8]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	00f42400 	.word	0x00f42400
 8004ea8:	007a1200 	.word	0x007a1200

08004eac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e056      	b.n	8004f6c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d106      	bne.n	8004ede <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7fc ffc1 	bl	8001e60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2202      	movs	r2, #2
 8004ee2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ef4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	431a      	orrs	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	431a      	orrs	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	431a      	orrs	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	69db      	ldr	r3, [r3, #28]
 8004f20:	431a      	orrs	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	ea42 0103 	orr.w	r1, r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	0c1b      	lsrs	r3, r3, #16
 8004f3c:	f003 0104 	and.w	r1, r3, #4
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	69da      	ldr	r2, [r3, #28]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f5a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f82:	2300      	movs	r3, #0
 8004f84:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d110      	bne.n	8004fb0 <HAL_SPI_Receive_DMA+0x3c>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f96:	d10b      	bne.n	8004fb0 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2204      	movs	r2, #4
 8004f9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8004fa0:	88fb      	ldrh	r3, [r7, #6]
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	68b9      	ldr	r1, [r7, #8]
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 f8a4 	bl	80050f4 <HAL_SPI_TransmitReceive_DMA>
 8004fac:	4603      	mov	r3, r0
 8004fae:	e097      	b.n	80050e0 <HAL_SPI_Receive_DMA+0x16c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d101      	bne.n	8004fbe <HAL_SPI_Receive_DMA+0x4a>
 8004fba:	2302      	movs	r3, #2
 8004fbc:	e090      	b.n	80050e0 <HAL_SPI_Receive_DMA+0x16c>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d002      	beq.n	8004fd8 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004fd6:	e07e      	b.n	80050d6 <HAL_SPI_Receive_DMA+0x162>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d002      	beq.n	8004fe4 <HAL_SPI_Receive_DMA+0x70>
 8004fde:	88fb      	ldrh	r3, [r7, #6]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d102      	bne.n	8004fea <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004fe8:	e075      	b.n	80050d6 <HAL_SPI_Receive_DMA+0x162>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2204      	movs	r2, #4
 8004fee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	88fa      	ldrh	r2, [r7, #6]
 8005002:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	88fa      	ldrh	r2, [r7, #6]
 8005008:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800502a:	d107      	bne.n	800503c <HAL_SPI_Receive_DMA+0xc8>
  {
    SPI_1LINE_RX(hspi);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800503a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005040:	4a29      	ldr	r2, [pc, #164]	; (80050e8 <HAL_SPI_Receive_DMA+0x174>)
 8005042:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005048:	4a28      	ldr	r2, [pc, #160]	; (80050ec <HAL_SPI_Receive_DMA+0x178>)
 800504a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005050:	4a27      	ldr	r2, [pc, #156]	; (80050f0 <HAL_SPI_Receive_DMA+0x17c>)
 8005052:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005058:	2200      	movs	r2, #0
 800505a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	330c      	adds	r3, #12
 8005066:	4619      	mov	r1, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005072:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005074:	f7fe ffea 	bl	800404c <HAL_DMA_Start_IT>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00c      	beq.n	8005098 <HAL_SPI_Receive_DMA+0x124>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005082:	f043 0210 	orr.w	r2, r3, #16
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005096:	e01e      	b.n	80050d6 <HAL_SPI_Receive_DMA+0x162>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a2:	2b40      	cmp	r3, #64	; 0x40
 80050a4:	d007      	beq.n	80050b6 <HAL_SPI_Receive_DMA+0x142>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050b4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f042 0220 	orr.w	r2, r2, #32
 80050c4:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f042 0201 	orr.w	r2, r2, #1
 80050d4:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050de:	7dfb      	ldrb	r3, [r7, #23]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3718      	adds	r7, #24
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	08005495 	.word	0x08005495
 80050ec:	0800535d 	.word	0x0800535d
 80050f0:	080054cd 	.word	0x080054cd

080050f4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
 8005100:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800510c:	2b01      	cmp	r3, #1
 800510e:	d101      	bne.n	8005114 <HAL_SPI_TransmitReceive_DMA+0x20>
 8005110:	2302      	movs	r3, #2
 8005112:	e0e3      	b.n	80052dc <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005122:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800512a:	7dbb      	ldrb	r3, [r7, #22]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d00d      	beq.n	800514c <HAL_SPI_TransmitReceive_DMA+0x58>
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005136:	d106      	bne.n	8005146 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d102      	bne.n	8005146 <HAL_SPI_TransmitReceive_DMA+0x52>
 8005140:	7dbb      	ldrb	r3, [r7, #22]
 8005142:	2b04      	cmp	r3, #4
 8005144:	d002      	beq.n	800514c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8005146:	2302      	movs	r3, #2
 8005148:	75fb      	strb	r3, [r7, #23]
    goto error;
 800514a:	e0c2      	b.n	80052d2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d005      	beq.n	800515e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d002      	beq.n	800515e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005158:	887b      	ldrh	r3, [r7, #2]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d102      	bne.n	8005164 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005162:	e0b6      	b.n	80052d2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b04      	cmp	r3, #4
 800516e:	d003      	beq.n	8005178 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2205      	movs	r2, #5
 8005174:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	887a      	ldrh	r2, [r7, #2]
 8005188:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	887a      	ldrh	r2, [r7, #2]
 800518e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	887a      	ldrh	r2, [r7, #2]
 800519a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	887a      	ldrh	r2, [r7, #2]
 80051a0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d108      	bne.n	80051cc <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051be:	4a49      	ldr	r2, [pc, #292]	; (80052e4 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80051c0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c6:	4a48      	ldr	r2, [pc, #288]	; (80052e8 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80051c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80051ca:	e007      	b.n	80051dc <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d0:	4a46      	ldr	r2, [pc, #280]	; (80052ec <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 80051d2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d8:	4a45      	ldr	r2, [pc, #276]	; (80052f0 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 80051da:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051e0:	4a44      	ldr	r2, [pc, #272]	; (80052f4 <HAL_SPI_TransmitReceive_DMA+0x200>)
 80051e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051e8:	2200      	movs	r2, #0
 80051ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	330c      	adds	r3, #12
 80051f6:	4619      	mov	r1, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005202:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005204:	f7fe ff22 	bl	800404c <HAL_DMA_Start_IT>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00c      	beq.n	8005228 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005212:	f043 0210 	orr.w	r2, r3, #16
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005226:	e054      	b.n	80052d2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f042 0201 	orr.w	r2, r2, #1
 8005236:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800523c:	2200      	movs	r2, #0
 800523e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005244:	2200      	movs	r2, #0
 8005246:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800524c:	2200      	movs	r2, #0
 800524e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005254:	2200      	movs	r2, #0
 8005256:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005260:	4619      	mov	r1, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	330c      	adds	r3, #12
 8005268:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800526e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005270:	f7fe feec 	bl	800404c <HAL_DMA_Start_IT>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00c      	beq.n	8005294 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800527e:	f043 0210 	orr.w	r2, r3, #16
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005292:	e01e      	b.n	80052d2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529e:	2b40      	cmp	r3, #64	; 0x40
 80052a0:	d007      	beq.n	80052b2 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052b0:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f042 0220 	orr.w	r2, r2, #32
 80052c0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f042 0202 	orr.w	r2, r2, #2
 80052d0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052da:	7dfb      	ldrb	r3, [r7, #23]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3718      	adds	r7, #24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	08005495 	.word	0x08005495
 80052e8:	0800535d 	.word	0x0800535d
 80052ec:	080054b1 	.word	0x080054b1
 80052f0:	08005405 	.word	0x08005405
 80052f4:	080054cd 	.word	0x080054cd

080052f8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005368:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800536a:	f7fd ff5b 	bl	8003224 <HAL_GetTick>
 800536e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800537e:	d03b      	beq.n	80053f8 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0220 	bic.w	r2, r2, #32
 800538e:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10d      	bne.n	80053b4 <SPI_DMAReceiveCplt+0x58>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053a0:	d108      	bne.n	80053b4 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 0203 	bic.w	r2, r2, #3
 80053b0:	605a      	str	r2, [r3, #4]
 80053b2:	e007      	b.n	80053c4 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f022 0201 	bic.w	r2, r2, #1
 80053c2:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	2164      	movs	r1, #100	; 0x64
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 f909 	bl	80055e0 <SPI_EndRxTransaction>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d002      	beq.n	80053da <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2220      	movs	r2, #32
 80053d8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f7ff ffa9 	bl	8005348 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80053f6:	e002      	b.n	80053fe <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f7ff ff7d 	bl	80052f8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005410:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005412:	f7fd ff07 	bl	8003224 <HAL_GetTick>
 8005416:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005426:	d02f      	beq.n	8005488 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 0220 	bic.w	r2, r2, #32
 8005436:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	2164      	movs	r1, #100	; 0x64
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f000 f935 	bl	80056ac <SPI_EndRxTxTransaction>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d005      	beq.n	8005454 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800544c:	f043 0220 	orr.w	r2, r3, #32
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 0203 	bic.w	r2, r2, #3
 8005462:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f7ff ff61 	bl	8005348 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005486:	e002      	b.n	800548e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f7ff ff3f 	bl	800530c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f7ff ff3c 	bl	8005320 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80054a8:	bf00      	nop
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054bc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f7ff ff38 	bl	8005334 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80054c4:	bf00      	nop
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 0203 	bic.w	r2, r2, #3
 80054e8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ee:	f043 0210 	orr.w	r2, r3, #16
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f7ff ff22 	bl	8005348 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005504:	bf00      	nop
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	603b      	str	r3, [r7, #0]
 8005518:	4613      	mov	r3, r2
 800551a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800551c:	e04c      	b.n	80055b8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005524:	d048      	beq.n	80055b8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005526:	f7fd fe7d 	bl	8003224 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	429a      	cmp	r2, r3
 8005534:	d902      	bls.n	800553c <SPI_WaitFlagStateUntilTimeout+0x30>
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d13d      	bne.n	80055b8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800554a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005554:	d111      	bne.n	800557a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800555e:	d004      	beq.n	800556a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005568:	d107      	bne.n	800557a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005578:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005582:	d10f      	bne.n	80055a4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e00f      	b.n	80055d8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	689a      	ldr	r2, [r3, #8]
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	4013      	ands	r3, r2
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	bf0c      	ite	eq
 80055c8:	2301      	moveq	r3, #1
 80055ca:	2300      	movne	r3, #0
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	461a      	mov	r2, r3
 80055d0:	79fb      	ldrb	r3, [r7, #7]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d1a3      	bne.n	800551e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af02      	add	r7, sp, #8
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055f4:	d111      	bne.n	800561a <SPI_EndRxTransaction+0x3a>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055fe:	d004      	beq.n	800560a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005608:	d107      	bne.n	800561a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005618:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005622:	d12a      	bne.n	800567a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800562c:	d012      	beq.n	8005654 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2200      	movs	r2, #0
 8005636:	2180      	movs	r1, #128	; 0x80
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f7ff ff67 	bl	800550c <SPI_WaitFlagStateUntilTimeout>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d02d      	beq.n	80056a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005648:	f043 0220 	orr.w	r2, r3, #32
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e026      	b.n	80056a2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2200      	movs	r2, #0
 800565c:	2101      	movs	r1, #1
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f7ff ff54 	bl	800550c <SPI_WaitFlagStateUntilTimeout>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d01a      	beq.n	80056a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800566e:	f043 0220 	orr.w	r2, r3, #32
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e013      	b.n	80056a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	2200      	movs	r2, #0
 8005682:	2101      	movs	r1, #1
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f7ff ff41 	bl	800550c <SPI_WaitFlagStateUntilTimeout>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d007      	beq.n	80056a0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005694:	f043 0220 	orr.w	r2, r3, #32
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e000      	b.n	80056a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
	...

080056ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b088      	sub	sp, #32
 80056b0:	af02      	add	r7, sp, #8
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80056b8:	4b1b      	ldr	r3, [pc, #108]	; (8005728 <SPI_EndRxTxTransaction+0x7c>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a1b      	ldr	r2, [pc, #108]	; (800572c <SPI_EndRxTxTransaction+0x80>)
 80056be:	fba2 2303 	umull	r2, r3, r2, r3
 80056c2:	0d5b      	lsrs	r3, r3, #21
 80056c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056c8:	fb02 f303 	mul.w	r3, r2, r3
 80056cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056d6:	d112      	bne.n	80056fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	2200      	movs	r2, #0
 80056e0:	2180      	movs	r1, #128	; 0x80
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f7ff ff12 	bl	800550c <SPI_WaitFlagStateUntilTimeout>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d016      	beq.n	800571c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f2:	f043 0220 	orr.w	r2, r3, #32
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e00f      	b.n	800571e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00a      	beq.n	800571a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	3b01      	subs	r3, #1
 8005708:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005714:	2b80      	cmp	r3, #128	; 0x80
 8005716:	d0f2      	beq.n	80056fe <SPI_EndRxTxTransaction+0x52>
 8005718:	e000      	b.n	800571c <SPI_EndRxTxTransaction+0x70>
        break;
 800571a:	bf00      	nop
  }

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3718      	adds	r7, #24
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	20000008 	.word	0x20000008
 800572c:	165e9f81 	.word	0x165e9f81

08005730 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e01d      	b.n	800577e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d106      	bne.n	800575c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7fc fc34 	bl	8001fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2202      	movs	r2, #2
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	3304      	adds	r3, #4
 800576c:	4619      	mov	r1, r3
 800576e:	4610      	mov	r0, r2
 8005770:	f000 fc30 	bl	8005fd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005786:	b480      	push	{r7}
 8005788:	b085      	sub	sp, #20
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68da      	ldr	r2, [r3, #12]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f042 0201 	orr.w	r2, r2, #1
 800579c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f003 0307 	and.w	r3, r3, #7
 80057a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2b06      	cmp	r3, #6
 80057ae:	d007      	beq.n	80057c0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0201 	orr.w	r2, r2, #1
 80057be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b082      	sub	sp, #8
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e01d      	b.n	800581c <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d106      	bne.n	80057fa <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f815 	bl	8005824 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2202      	movs	r2, #2
 80057fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	3304      	adds	r3, #4
 800580a:	4619      	mov	r1, r3
 800580c:	4610      	mov	r0, r2
 800580e:	f000 fbe1 	bl	8005fd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2201      	movs	r2, #1
 8005848:	6839      	ldr	r1, [r7, #0]
 800584a:	4618      	mov	r0, r3
 800584c:	f000 ff32 	bl	80066b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a15      	ldr	r2, [pc, #84]	; (80058ac <HAL_TIM_OC_Start+0x74>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d004      	beq.n	8005864 <HAL_TIM_OC_Start+0x2c>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a14      	ldr	r2, [pc, #80]	; (80058b0 <HAL_TIM_OC_Start+0x78>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d101      	bne.n	8005868 <HAL_TIM_OC_Start+0x30>
 8005864:	2301      	movs	r3, #1
 8005866:	e000      	b.n	800586a <HAL_TIM_OC_Start+0x32>
 8005868:	2300      	movs	r3, #0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d007      	beq.n	800587e <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800587c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f003 0307 	and.w	r3, r3, #7
 8005888:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2b06      	cmp	r3, #6
 800588e:	d007      	beq.n	80058a0 <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f042 0201 	orr.w	r2, r2, #1
 800589e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	40010000 	.word	0x40010000
 80058b0:	40010400 	.word	0x40010400

080058b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e01d      	b.n	8005902 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d106      	bne.n	80058e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f815 	bl	800590a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2202      	movs	r2, #2
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	3304      	adds	r3, #4
 80058f0:	4619      	mov	r1, r3
 80058f2:	4610      	mov	r0, r2
 80058f4:	f000 fb6e 	bl	8005fd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005912:	bf00      	nop
 8005914:	370c      	adds	r7, #12
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b082      	sub	sp, #8
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b02      	cmp	r3, #2
 8005932:	d122      	bne.n	800597a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b02      	cmp	r3, #2
 8005940:	d11b      	bne.n	800597a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f06f 0202 	mvn.w	r2, #2
 800594a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	f003 0303 	and.w	r3, r3, #3
 800595c:	2b00      	cmp	r3, #0
 800595e:	d003      	beq.n	8005968 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 fb18 	bl	8005f96 <HAL_TIM_IC_CaptureCallback>
 8005966:	e005      	b.n	8005974 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fb0a 	bl	8005f82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 fb1b 	bl	8005faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	f003 0304 	and.w	r3, r3, #4
 8005984:	2b04      	cmp	r3, #4
 8005986:	d122      	bne.n	80059ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	f003 0304 	and.w	r3, r3, #4
 8005992:	2b04      	cmp	r3, #4
 8005994:	d11b      	bne.n	80059ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f06f 0204 	mvn.w	r2, #4
 800599e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2202      	movs	r2, #2
 80059a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d003      	beq.n	80059bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 faee 	bl	8005f96 <HAL_TIM_IC_CaptureCallback>
 80059ba:	e005      	b.n	80059c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 fae0 	bl	8005f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 faf1 	bl	8005faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	f003 0308 	and.w	r3, r3, #8
 80059d8:	2b08      	cmp	r3, #8
 80059da:	d122      	bne.n	8005a22 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f003 0308 	and.w	r3, r3, #8
 80059e6:	2b08      	cmp	r3, #8
 80059e8:	d11b      	bne.n	8005a22 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f06f 0208 	mvn.w	r2, #8
 80059f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2204      	movs	r2, #4
 80059f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	69db      	ldr	r3, [r3, #28]
 8005a00:	f003 0303 	and.w	r3, r3, #3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d003      	beq.n	8005a10 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 fac4 	bl	8005f96 <HAL_TIM_IC_CaptureCallback>
 8005a0e:	e005      	b.n	8005a1c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 fab6 	bl	8005f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fac7 	bl	8005faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f003 0310 	and.w	r3, r3, #16
 8005a2c:	2b10      	cmp	r3, #16
 8005a2e:	d122      	bne.n	8005a76 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	f003 0310 	and.w	r3, r3, #16
 8005a3a:	2b10      	cmp	r3, #16
 8005a3c:	d11b      	bne.n	8005a76 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f06f 0210 	mvn.w	r2, #16
 8005a46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2208      	movs	r2, #8
 8005a4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	69db      	ldr	r3, [r3, #28]
 8005a54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d003      	beq.n	8005a64 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 fa9a 	bl	8005f96 <HAL_TIM_IC_CaptureCallback>
 8005a62:	e005      	b.n	8005a70 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 fa8c 	bl	8005f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 fa9d 	bl	8005faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d10e      	bne.n	8005aa2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d107      	bne.n	8005aa2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f06f 0201 	mvn.w	r2, #1
 8005a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 fa66 	bl	8005f6e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aac:	2b80      	cmp	r3, #128	; 0x80
 8005aae:	d10e      	bne.n	8005ace <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aba:	2b80      	cmp	r3, #128	; 0x80
 8005abc:	d107      	bne.n	8005ace <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 fef1 	bl	80068b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad8:	2b40      	cmp	r3, #64	; 0x40
 8005ada:	d10e      	bne.n	8005afa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae6:	2b40      	cmp	r3, #64	; 0x40
 8005ae8:	d107      	bne.n	8005afa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 fa62 	bl	8005fbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	f003 0320 	and.w	r3, r3, #32
 8005b04:	2b20      	cmp	r3, #32
 8005b06:	d10e      	bne.n	8005b26 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f003 0320 	and.w	r3, r3, #32
 8005b12:	2b20      	cmp	r3, #32
 8005b14:	d107      	bne.n	8005b26 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f06f 0220 	mvn.w	r2, #32
 8005b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 febb 	bl	800689c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b26:	bf00      	nop
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
	...

08005b30 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d101      	bne.n	8005b4a <HAL_TIM_OC_ConfigChannel+0x1a>
 8005b46:	2302      	movs	r3, #2
 8005b48:	e04e      	b.n	8005be8 <HAL_TIM_OC_ConfigChannel+0xb8>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2202      	movs	r2, #2
 8005b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b0c      	cmp	r3, #12
 8005b5e:	d839      	bhi.n	8005bd4 <HAL_TIM_OC_ConfigChannel+0xa4>
 8005b60:	a201      	add	r2, pc, #4	; (adr r2, 8005b68 <HAL_TIM_OC_ConfigChannel+0x38>)
 8005b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b66:	bf00      	nop
 8005b68:	08005b9d 	.word	0x08005b9d
 8005b6c:	08005bd5 	.word	0x08005bd5
 8005b70:	08005bd5 	.word	0x08005bd5
 8005b74:	08005bd5 	.word	0x08005bd5
 8005b78:	08005bab 	.word	0x08005bab
 8005b7c:	08005bd5 	.word	0x08005bd5
 8005b80:	08005bd5 	.word	0x08005bd5
 8005b84:	08005bd5 	.word	0x08005bd5
 8005b88:	08005bb9 	.word	0x08005bb9
 8005b8c:	08005bd5 	.word	0x08005bd5
 8005b90:	08005bd5 	.word	0x08005bd5
 8005b94:	08005bd5 	.word	0x08005bd5
 8005b98:	08005bc7 	.word	0x08005bc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68b9      	ldr	r1, [r7, #8]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 fab6 	bl	8006114 <TIM_OC1_SetConfig>
      break;
 8005ba8:	e015      	b.n	8005bd6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68b9      	ldr	r1, [r7, #8]
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f000 fb1f 	bl	80061f4 <TIM_OC2_SetConfig>
      break;
 8005bb6:	e00e      	b.n	8005bd6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68b9      	ldr	r1, [r7, #8]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 fb8e 	bl	80062e0 <TIM_OC3_SetConfig>
      break;
 8005bc4:	e007      	b.n	8005bd6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68b9      	ldr	r1, [r7, #8]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f000 fbfb 	bl	80063c8 <TIM_OC4_SetConfig>
      break;
 8005bd2:	e000      	b.n	8005bd6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8005bd4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d101      	bne.n	8005c0a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005c06:	2302      	movs	r3, #2
 8005c08:	e0b4      	b.n	8005d74 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2202      	movs	r2, #2
 8005c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b0c      	cmp	r3, #12
 8005c1e:	f200 809f 	bhi.w	8005d60 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005c22:	a201      	add	r2, pc, #4	; (adr r2, 8005c28 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c28:	08005c5d 	.word	0x08005c5d
 8005c2c:	08005d61 	.word	0x08005d61
 8005c30:	08005d61 	.word	0x08005d61
 8005c34:	08005d61 	.word	0x08005d61
 8005c38:	08005c9d 	.word	0x08005c9d
 8005c3c:	08005d61 	.word	0x08005d61
 8005c40:	08005d61 	.word	0x08005d61
 8005c44:	08005d61 	.word	0x08005d61
 8005c48:	08005cdf 	.word	0x08005cdf
 8005c4c:	08005d61 	.word	0x08005d61
 8005c50:	08005d61 	.word	0x08005d61
 8005c54:	08005d61 	.word	0x08005d61
 8005c58:	08005d1f 	.word	0x08005d1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68b9      	ldr	r1, [r7, #8]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 fa56 	bl	8006114 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	699a      	ldr	r2, [r3, #24]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 0208 	orr.w	r2, r2, #8
 8005c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699a      	ldr	r2, [r3, #24]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f022 0204 	bic.w	r2, r2, #4
 8005c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6999      	ldr	r1, [r3, #24]
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	691a      	ldr	r2, [r3, #16]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	619a      	str	r2, [r3, #24]
      break;
 8005c9a:	e062      	b.n	8005d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68b9      	ldr	r1, [r7, #8]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 faa6 	bl	80061f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	699a      	ldr	r2, [r3, #24]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	699a      	ldr	r2, [r3, #24]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6999      	ldr	r1, [r3, #24]
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	021a      	lsls	r2, r3, #8
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	619a      	str	r2, [r3, #24]
      break;
 8005cdc:	e041      	b.n	8005d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68b9      	ldr	r1, [r7, #8]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f000 fafb 	bl	80062e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	69da      	ldr	r2, [r3, #28]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f042 0208 	orr.w	r2, r2, #8
 8005cf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	69da      	ldr	r2, [r3, #28]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f022 0204 	bic.w	r2, r2, #4
 8005d08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	69d9      	ldr	r1, [r3, #28]
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	691a      	ldr	r2, [r3, #16]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	61da      	str	r2, [r3, #28]
      break;
 8005d1c:	e021      	b.n	8005d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68b9      	ldr	r1, [r7, #8]
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 fb4f 	bl	80063c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	69da      	ldr	r2, [r3, #28]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	69da      	ldr	r2, [r3, #28]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	69d9      	ldr	r1, [r3, #28]
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	021a      	lsls	r2, r3, #8
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	61da      	str	r2, [r3, #28]
      break;
 8005d5e:	e000      	b.n	8005d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005d60:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d101      	bne.n	8005d94 <HAL_TIM_ConfigClockSource+0x18>
 8005d90:	2302      	movs	r3, #2
 8005d92:	e0a6      	b.n	8005ee2 <HAL_TIM_ConfigClockSource+0x166>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2202      	movs	r2, #2
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005db2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2b40      	cmp	r3, #64	; 0x40
 8005dca:	d067      	beq.n	8005e9c <HAL_TIM_ConfigClockSource+0x120>
 8005dcc:	2b40      	cmp	r3, #64	; 0x40
 8005dce:	d80b      	bhi.n	8005de8 <HAL_TIM_ConfigClockSource+0x6c>
 8005dd0:	2b10      	cmp	r3, #16
 8005dd2:	d073      	beq.n	8005ebc <HAL_TIM_ConfigClockSource+0x140>
 8005dd4:	2b10      	cmp	r3, #16
 8005dd6:	d802      	bhi.n	8005dde <HAL_TIM_ConfigClockSource+0x62>
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d06f      	beq.n	8005ebc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005ddc:	e078      	b.n	8005ed0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005dde:	2b20      	cmp	r3, #32
 8005de0:	d06c      	beq.n	8005ebc <HAL_TIM_ConfigClockSource+0x140>
 8005de2:	2b30      	cmp	r3, #48	; 0x30
 8005de4:	d06a      	beq.n	8005ebc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005de6:	e073      	b.n	8005ed0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005de8:	2b70      	cmp	r3, #112	; 0x70
 8005dea:	d00d      	beq.n	8005e08 <HAL_TIM_ConfigClockSource+0x8c>
 8005dec:	2b70      	cmp	r3, #112	; 0x70
 8005dee:	d804      	bhi.n	8005dfa <HAL_TIM_ConfigClockSource+0x7e>
 8005df0:	2b50      	cmp	r3, #80	; 0x50
 8005df2:	d033      	beq.n	8005e5c <HAL_TIM_ConfigClockSource+0xe0>
 8005df4:	2b60      	cmp	r3, #96	; 0x60
 8005df6:	d041      	beq.n	8005e7c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005df8:	e06a      	b.n	8005ed0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dfe:	d066      	beq.n	8005ece <HAL_TIM_ConfigClockSource+0x152>
 8005e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e04:	d017      	beq.n	8005e36 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005e06:	e063      	b.n	8005ed0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6818      	ldr	r0, [r3, #0]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	6899      	ldr	r1, [r3, #8]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f000 fc2c 	bl	8006674 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e2a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	609a      	str	r2, [r3, #8]
      break;
 8005e34:	e04c      	b.n	8005ed0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6818      	ldr	r0, [r3, #0]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	6899      	ldr	r1, [r3, #8]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	f000 fc15 	bl	8006674 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e58:	609a      	str	r2, [r3, #8]
      break;
 8005e5a:	e039      	b.n	8005ed0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6818      	ldr	r0, [r3, #0]
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	6859      	ldr	r1, [r3, #4]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	461a      	mov	r2, r3
 8005e6a:	f000 fb89 	bl	8006580 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2150      	movs	r1, #80	; 0x50
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 fbe2 	bl	800663e <TIM_ITRx_SetConfig>
      break;
 8005e7a:	e029      	b.n	8005ed0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6818      	ldr	r0, [r3, #0]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	6859      	ldr	r1, [r3, #4]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	461a      	mov	r2, r3
 8005e8a:	f000 fba8 	bl	80065de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2160      	movs	r1, #96	; 0x60
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 fbd2 	bl	800663e <TIM_ITRx_SetConfig>
      break;
 8005e9a:	e019      	b.n	8005ed0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6818      	ldr	r0, [r3, #0]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	6859      	ldr	r1, [r3, #4]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	f000 fb69 	bl	8006580 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2140      	movs	r1, #64	; 0x40
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 fbc2 	bl	800663e <TIM_ITRx_SetConfig>
      break;
 8005eba:	e009      	b.n	8005ed0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	4610      	mov	r0, r2
 8005ec8:	f000 fbb9 	bl	800663e <TIM_ITRx_SetConfig>
      break;
 8005ecc:	e000      	b.n	8005ed0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005ece:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b082      	sub	sp, #8
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
 8005ef2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d101      	bne.n	8005f02 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005efe:	2302      	movs	r3, #2
 8005f00:	e031      	b.n	8005f66 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005f12:	6839      	ldr	r1, [r7, #0]
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 faad 	bl	8006474 <TIM_SlaveTimer_SetConfig>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d009      	beq.n	8005f34 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e018      	b.n	8005f66 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68da      	ldr	r2, [r3, #12]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f42:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68da      	ldr	r2, [r3, #12]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f52:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3708      	adds	r7, #8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b083      	sub	sp, #12
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f76:	bf00      	nop
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f82:	b480      	push	{r7}
 8005f84:	b083      	sub	sp, #12
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f8a:	bf00      	nop
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b083      	sub	sp, #12
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f9e:	bf00      	nop
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b083      	sub	sp, #12
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fb2:	bf00      	nop
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b083      	sub	sp, #12
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fc6:	bf00      	nop
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
	...

08005fd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a40      	ldr	r2, [pc, #256]	; (80060e8 <TIM_Base_SetConfig+0x114>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d013      	beq.n	8006014 <TIM_Base_SetConfig+0x40>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff2:	d00f      	beq.n	8006014 <TIM_Base_SetConfig+0x40>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a3d      	ldr	r2, [pc, #244]	; (80060ec <TIM_Base_SetConfig+0x118>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d00b      	beq.n	8006014 <TIM_Base_SetConfig+0x40>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a3c      	ldr	r2, [pc, #240]	; (80060f0 <TIM_Base_SetConfig+0x11c>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d007      	beq.n	8006014 <TIM_Base_SetConfig+0x40>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a3b      	ldr	r2, [pc, #236]	; (80060f4 <TIM_Base_SetConfig+0x120>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d003      	beq.n	8006014 <TIM_Base_SetConfig+0x40>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a3a      	ldr	r2, [pc, #232]	; (80060f8 <TIM_Base_SetConfig+0x124>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d108      	bne.n	8006026 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800601a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	4313      	orrs	r3, r2
 8006024:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a2f      	ldr	r2, [pc, #188]	; (80060e8 <TIM_Base_SetConfig+0x114>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d02b      	beq.n	8006086 <TIM_Base_SetConfig+0xb2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006034:	d027      	beq.n	8006086 <TIM_Base_SetConfig+0xb2>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a2c      	ldr	r2, [pc, #176]	; (80060ec <TIM_Base_SetConfig+0x118>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d023      	beq.n	8006086 <TIM_Base_SetConfig+0xb2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a2b      	ldr	r2, [pc, #172]	; (80060f0 <TIM_Base_SetConfig+0x11c>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d01f      	beq.n	8006086 <TIM_Base_SetConfig+0xb2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a2a      	ldr	r2, [pc, #168]	; (80060f4 <TIM_Base_SetConfig+0x120>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d01b      	beq.n	8006086 <TIM_Base_SetConfig+0xb2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a29      	ldr	r2, [pc, #164]	; (80060f8 <TIM_Base_SetConfig+0x124>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d017      	beq.n	8006086 <TIM_Base_SetConfig+0xb2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a28      	ldr	r2, [pc, #160]	; (80060fc <TIM_Base_SetConfig+0x128>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d013      	beq.n	8006086 <TIM_Base_SetConfig+0xb2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a27      	ldr	r2, [pc, #156]	; (8006100 <TIM_Base_SetConfig+0x12c>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d00f      	beq.n	8006086 <TIM_Base_SetConfig+0xb2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a26      	ldr	r2, [pc, #152]	; (8006104 <TIM_Base_SetConfig+0x130>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d00b      	beq.n	8006086 <TIM_Base_SetConfig+0xb2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a25      	ldr	r2, [pc, #148]	; (8006108 <TIM_Base_SetConfig+0x134>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d007      	beq.n	8006086 <TIM_Base_SetConfig+0xb2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a24      	ldr	r2, [pc, #144]	; (800610c <TIM_Base_SetConfig+0x138>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d003      	beq.n	8006086 <TIM_Base_SetConfig+0xb2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a23      	ldr	r2, [pc, #140]	; (8006110 <TIM_Base_SetConfig+0x13c>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d108      	bne.n	8006098 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800608c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	4313      	orrs	r3, r2
 8006096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	689a      	ldr	r2, [r3, #8]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a0a      	ldr	r2, [pc, #40]	; (80060e8 <TIM_Base_SetConfig+0x114>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d003      	beq.n	80060cc <TIM_Base_SetConfig+0xf8>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a0c      	ldr	r2, [pc, #48]	; (80060f8 <TIM_Base_SetConfig+0x124>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d103      	bne.n	80060d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	691a      	ldr	r2, [r3, #16]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	615a      	str	r2, [r3, #20]
}
 80060da:	bf00      	nop
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	40010000 	.word	0x40010000
 80060ec:	40000400 	.word	0x40000400
 80060f0:	40000800 	.word	0x40000800
 80060f4:	40000c00 	.word	0x40000c00
 80060f8:	40010400 	.word	0x40010400
 80060fc:	40014000 	.word	0x40014000
 8006100:	40014400 	.word	0x40014400
 8006104:	40014800 	.word	0x40014800
 8006108:	40001800 	.word	0x40001800
 800610c:	40001c00 	.word	0x40001c00
 8006110:	40002000 	.word	0x40002000

08006114 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	f023 0201 	bic.w	r2, r3, #1
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f023 0303 	bic.w	r3, r3, #3
 800614a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	4313      	orrs	r3, r2
 8006154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f023 0302 	bic.w	r3, r3, #2
 800615c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	4313      	orrs	r3, r2
 8006166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a20      	ldr	r2, [pc, #128]	; (80061ec <TIM_OC1_SetConfig+0xd8>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d003      	beq.n	8006178 <TIM_OC1_SetConfig+0x64>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a1f      	ldr	r2, [pc, #124]	; (80061f0 <TIM_OC1_SetConfig+0xdc>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d10c      	bne.n	8006192 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	f023 0308 	bic.w	r3, r3, #8
 800617e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	4313      	orrs	r3, r2
 8006188:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f023 0304 	bic.w	r3, r3, #4
 8006190:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a15      	ldr	r2, [pc, #84]	; (80061ec <TIM_OC1_SetConfig+0xd8>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d003      	beq.n	80061a2 <TIM_OC1_SetConfig+0x8e>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a14      	ldr	r2, [pc, #80]	; (80061f0 <TIM_OC1_SetConfig+0xdc>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d111      	bne.n	80061c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	685a      	ldr	r2, [r3, #4]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	621a      	str	r2, [r3, #32]
}
 80061e0:	bf00      	nop
 80061e2:	371c      	adds	r7, #28
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	40010000 	.word	0x40010000
 80061f0:	40010400 	.word	0x40010400

080061f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	f023 0210 	bic.w	r2, r3, #16
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800622a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	021b      	lsls	r3, r3, #8
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	4313      	orrs	r3, r2
 8006236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	f023 0320 	bic.w	r3, r3, #32
 800623e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	011b      	lsls	r3, r3, #4
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	4313      	orrs	r3, r2
 800624a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a22      	ldr	r2, [pc, #136]	; (80062d8 <TIM_OC2_SetConfig+0xe4>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d003      	beq.n	800625c <TIM_OC2_SetConfig+0x68>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a21      	ldr	r2, [pc, #132]	; (80062dc <TIM_OC2_SetConfig+0xe8>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d10d      	bne.n	8006278 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	011b      	lsls	r3, r3, #4
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	4313      	orrs	r3, r2
 800626e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006276:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a17      	ldr	r2, [pc, #92]	; (80062d8 <TIM_OC2_SetConfig+0xe4>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d003      	beq.n	8006288 <TIM_OC2_SetConfig+0x94>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a16      	ldr	r2, [pc, #88]	; (80062dc <TIM_OC2_SetConfig+0xe8>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d113      	bne.n	80062b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800628e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006296:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	685a      	ldr	r2, [r3, #4]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	621a      	str	r2, [r3, #32]
}
 80062ca:	bf00      	nop
 80062cc:	371c      	adds	r7, #28
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	40010000 	.word	0x40010000
 80062dc:	40010400 	.word	0x40010400

080062e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800630e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 0303 	bic.w	r3, r3, #3
 8006316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	4313      	orrs	r3, r2
 8006320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006328:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	021b      	lsls	r3, r3, #8
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	4313      	orrs	r3, r2
 8006334:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a21      	ldr	r2, [pc, #132]	; (80063c0 <TIM_OC3_SetConfig+0xe0>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d003      	beq.n	8006346 <TIM_OC3_SetConfig+0x66>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a20      	ldr	r2, [pc, #128]	; (80063c4 <TIM_OC3_SetConfig+0xe4>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d10d      	bne.n	8006362 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800634c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	021b      	lsls	r3, r3, #8
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	4313      	orrs	r3, r2
 8006358:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006360:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a16      	ldr	r2, [pc, #88]	; (80063c0 <TIM_OC3_SetConfig+0xe0>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d003      	beq.n	8006372 <TIM_OC3_SetConfig+0x92>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a15      	ldr	r2, [pc, #84]	; (80063c4 <TIM_OC3_SetConfig+0xe4>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d113      	bne.n	800639a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	011b      	lsls	r3, r3, #4
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	4313      	orrs	r3, r2
 800638c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	011b      	lsls	r3, r3, #4
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	4313      	orrs	r3, r2
 8006398:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	621a      	str	r2, [r3, #32]
}
 80063b4:	bf00      	nop
 80063b6:	371c      	adds	r7, #28
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr
 80063c0:	40010000 	.word	0x40010000
 80063c4:	40010400 	.word	0x40010400

080063c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b087      	sub	sp, #28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	69db      	ldr	r3, [r3, #28]
 80063ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	021b      	lsls	r3, r3, #8
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	4313      	orrs	r3, r2
 800640a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006412:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	031b      	lsls	r3, r3, #12
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	4313      	orrs	r3, r2
 800641e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a12      	ldr	r2, [pc, #72]	; (800646c <TIM_OC4_SetConfig+0xa4>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d003      	beq.n	8006430 <TIM_OC4_SetConfig+0x68>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a11      	ldr	r2, [pc, #68]	; (8006470 <TIM_OC4_SetConfig+0xa8>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d109      	bne.n	8006444 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006436:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	019b      	lsls	r3, r3, #6
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	4313      	orrs	r3, r2
 8006442:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	621a      	str	r2, [r3, #32]
}
 800645e:	bf00      	nop
 8006460:	371c      	adds	r7, #28
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	40010000 	.word	0x40010000
 8006470:	40010400 	.word	0x40010400

08006474 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800648c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	4313      	orrs	r3, r2
 8006496:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f023 0307 	bic.w	r3, r3, #7
 800649e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	697a      	ldr	r2, [r7, #20]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	2b30      	cmp	r3, #48	; 0x30
 80064b8:	d05c      	beq.n	8006574 <TIM_SlaveTimer_SetConfig+0x100>
 80064ba:	2b30      	cmp	r3, #48	; 0x30
 80064bc:	d806      	bhi.n	80064cc <TIM_SlaveTimer_SetConfig+0x58>
 80064be:	2b10      	cmp	r3, #16
 80064c0:	d058      	beq.n	8006574 <TIM_SlaveTimer_SetConfig+0x100>
 80064c2:	2b20      	cmp	r3, #32
 80064c4:	d056      	beq.n	8006574 <TIM_SlaveTimer_SetConfig+0x100>
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d054      	beq.n	8006574 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 80064ca:	e054      	b.n	8006576 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80064cc:	2b50      	cmp	r3, #80	; 0x50
 80064ce:	d03d      	beq.n	800654c <TIM_SlaveTimer_SetConfig+0xd8>
 80064d0:	2b50      	cmp	r3, #80	; 0x50
 80064d2:	d802      	bhi.n	80064da <TIM_SlaveTimer_SetConfig+0x66>
 80064d4:	2b40      	cmp	r3, #64	; 0x40
 80064d6:	d010      	beq.n	80064fa <TIM_SlaveTimer_SetConfig+0x86>
      break;
 80064d8:	e04d      	b.n	8006576 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80064da:	2b60      	cmp	r3, #96	; 0x60
 80064dc:	d040      	beq.n	8006560 <TIM_SlaveTimer_SetConfig+0xec>
 80064de:	2b70      	cmp	r3, #112	; 0x70
 80064e0:	d000      	beq.n	80064e4 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 80064e2:	e048      	b.n	8006576 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6818      	ldr	r0, [r3, #0]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	68d9      	ldr	r1, [r3, #12]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	689a      	ldr	r2, [r3, #8]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	f000 f8be 	bl	8006674 <TIM_ETR_SetConfig>
      break;
 80064f8:	e03d      	b.n	8006576 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b05      	cmp	r3, #5
 8006500:	d101      	bne.n	8006506 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e038      	b.n	8006578 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6a1a      	ldr	r2, [r3, #32]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f022 0201 	bic.w	r2, r2, #1
 800651c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800652c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	011b      	lsls	r3, r3, #4
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	4313      	orrs	r3, r2
 8006538:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	621a      	str	r2, [r3, #32]
      break;
 800654a:	e014      	b.n	8006576 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6818      	ldr	r0, [r3, #0]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	6899      	ldr	r1, [r3, #8]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	461a      	mov	r2, r3
 800655a:	f000 f811 	bl	8006580 <TIM_TI1_ConfigInputStage>
      break;
 800655e:	e00a      	b.n	8006576 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6818      	ldr	r0, [r3, #0]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	6899      	ldr	r1, [r3, #8]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	461a      	mov	r2, r3
 800656e:	f000 f836 	bl	80065de <TIM_TI2_ConfigInputStage>
      break;
 8006572:	e000      	b.n	8006576 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8006574:	bf00      	nop
  }
  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3718      	adds	r7, #24
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006580:	b480      	push	{r7}
 8006582:	b087      	sub	sp, #28
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6a1b      	ldr	r3, [r3, #32]
 8006590:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	f023 0201 	bic.w	r2, r3, #1
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	011b      	lsls	r3, r3, #4
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f023 030a 	bic.w	r3, r3, #10
 80065bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	621a      	str	r2, [r3, #32]
}
 80065d2:	bf00      	nop
 80065d4:	371c      	adds	r7, #28
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065de:	b480      	push	{r7}
 80065e0:	b087      	sub	sp, #28
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	60f8      	str	r0, [r7, #12]
 80065e6:	60b9      	str	r1, [r7, #8]
 80065e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	f023 0210 	bic.w	r2, r3, #16
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6a1b      	ldr	r3, [r3, #32]
 8006600:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006608:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	031b      	lsls	r3, r3, #12
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	4313      	orrs	r3, r2
 8006612:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800661a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	011b      	lsls	r3, r3, #4
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	4313      	orrs	r3, r2
 8006624:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	621a      	str	r2, [r3, #32]
}
 8006632:	bf00      	nop
 8006634:	371c      	adds	r7, #28
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800663e:	b480      	push	{r7}
 8006640:	b085      	sub	sp, #20
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
 8006646:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006654:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006656:	683a      	ldr	r2, [r7, #0]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	4313      	orrs	r3, r2
 800665c:	f043 0307 	orr.w	r3, r3, #7
 8006660:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	609a      	str	r2, [r3, #8]
}
 8006668:	bf00      	nop
 800666a:	3714      	adds	r7, #20
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006674:	b480      	push	{r7}
 8006676:	b087      	sub	sp, #28
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
 8006680:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800668e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	021a      	lsls	r2, r3, #8
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	431a      	orrs	r2, r3
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	4313      	orrs	r3, r2
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	4313      	orrs	r3, r2
 80066a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	609a      	str	r2, [r3, #8]
}
 80066a8:	bf00      	nop
 80066aa:	371c      	adds	r7, #28
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b087      	sub	sp, #28
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	f003 031f 	and.w	r3, r3, #31
 80066c6:	2201      	movs	r2, #1
 80066c8:	fa02 f303 	lsl.w	r3, r2, r3
 80066cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6a1a      	ldr	r2, [r3, #32]
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	43db      	mvns	r3, r3
 80066d6:	401a      	ands	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6a1a      	ldr	r2, [r3, #32]
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f003 031f 	and.w	r3, r3, #31
 80066e6:	6879      	ldr	r1, [r7, #4]
 80066e8:	fa01 f303 	lsl.w	r3, r1, r3
 80066ec:	431a      	orrs	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	621a      	str	r2, [r3, #32]
}
 80066f2:	bf00      	nop
 80066f4:	371c      	adds	r7, #28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
	...

08006700 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006710:	2b01      	cmp	r3, #1
 8006712:	d101      	bne.n	8006718 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006714:	2302      	movs	r3, #2
 8006716:	e05a      	b.n	80067ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2202      	movs	r2, #2
 8006724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	4313      	orrs	r3, r2
 8006748:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a21      	ldr	r2, [pc, #132]	; (80067dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d022      	beq.n	80067a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006764:	d01d      	beq.n	80067a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a1d      	ldr	r2, [pc, #116]	; (80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d018      	beq.n	80067a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a1b      	ldr	r2, [pc, #108]	; (80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d013      	beq.n	80067a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a1a      	ldr	r2, [pc, #104]	; (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d00e      	beq.n	80067a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a18      	ldr	r2, [pc, #96]	; (80067ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d009      	beq.n	80067a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a17      	ldr	r2, [pc, #92]	; (80067f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d004      	beq.n	80067a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a15      	ldr	r2, [pc, #84]	; (80067f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d10c      	bne.n	80067bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3714      	adds	r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	40010000 	.word	0x40010000
 80067e0:	40000400 	.word	0x40000400
 80067e4:	40000800 	.word	0x40000800
 80067e8:	40000c00 	.word	0x40000c00
 80067ec:	40010400 	.word	0x40010400
 80067f0:	40014000 	.word	0x40014000
 80067f4:	40001800 	.word	0x40001800

080067f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006802:	2300      	movs	r3, #0
 8006804:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800680c:	2b01      	cmp	r3, #1
 800680e:	d101      	bne.n	8006814 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006810:	2302      	movs	r3, #2
 8006812:	e03d      	b.n	8006890 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	4313      	orrs	r3, r2
 8006828:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	4313      	orrs	r3, r2
 8006836:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	4313      	orrs	r3, r2
 8006844:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4313      	orrs	r3, r2
 8006852:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	4313      	orrs	r3, r2
 8006860:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	695b      	ldr	r3, [r3, #20]
 800686c:	4313      	orrs	r3, r2
 800686e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	69db      	ldr	r3, [r3, #28]
 800687a:	4313      	orrs	r3, r2
 800687c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3714      	adds	r7, #20
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <__errno>:
 80068c4:	4b01      	ldr	r3, [pc, #4]	; (80068cc <__errno+0x8>)
 80068c6:	6818      	ldr	r0, [r3, #0]
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	20000014 	.word	0x20000014

080068d0 <__libc_init_array>:
 80068d0:	b570      	push	{r4, r5, r6, lr}
 80068d2:	4e0d      	ldr	r6, [pc, #52]	; (8006908 <__libc_init_array+0x38>)
 80068d4:	4c0d      	ldr	r4, [pc, #52]	; (800690c <__libc_init_array+0x3c>)
 80068d6:	1ba4      	subs	r4, r4, r6
 80068d8:	10a4      	asrs	r4, r4, #2
 80068da:	2500      	movs	r5, #0
 80068dc:	42a5      	cmp	r5, r4
 80068de:	d109      	bne.n	80068f4 <__libc_init_array+0x24>
 80068e0:	4e0b      	ldr	r6, [pc, #44]	; (8006910 <__libc_init_array+0x40>)
 80068e2:	4c0c      	ldr	r4, [pc, #48]	; (8006914 <__libc_init_array+0x44>)
 80068e4:	f000 f876 	bl	80069d4 <_init>
 80068e8:	1ba4      	subs	r4, r4, r6
 80068ea:	10a4      	asrs	r4, r4, #2
 80068ec:	2500      	movs	r5, #0
 80068ee:	42a5      	cmp	r5, r4
 80068f0:	d105      	bne.n	80068fe <__libc_init_array+0x2e>
 80068f2:	bd70      	pop	{r4, r5, r6, pc}
 80068f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068f8:	4798      	blx	r3
 80068fa:	3501      	adds	r5, #1
 80068fc:	e7ee      	b.n	80068dc <__libc_init_array+0xc>
 80068fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006902:	4798      	blx	r3
 8006904:	3501      	adds	r5, #1
 8006906:	e7f2      	b.n	80068ee <__libc_init_array+0x1e>
 8006908:	08007218 	.word	0x08007218
 800690c:	08007218 	.word	0x08007218
 8006910:	08007218 	.word	0x08007218
 8006914:	0800721c 	.word	0x0800721c

08006918 <memset>:
 8006918:	4402      	add	r2, r0
 800691a:	4603      	mov	r3, r0
 800691c:	4293      	cmp	r3, r2
 800691e:	d100      	bne.n	8006922 <memset+0xa>
 8006920:	4770      	bx	lr
 8006922:	f803 1b01 	strb.w	r1, [r3], #1
 8006926:	e7f9      	b.n	800691c <memset+0x4>

08006928 <sqrtf>:
 8006928:	b510      	push	{r4, lr}
 800692a:	ed2d 8b02 	vpush	{d8}
 800692e:	b08a      	sub	sp, #40	; 0x28
 8006930:	eeb0 8a40 	vmov.f32	s16, s0
 8006934:	f000 f848 	bl	80069c8 <__ieee754_sqrtf>
 8006938:	4b21      	ldr	r3, [pc, #132]	; (80069c0 <sqrtf+0x98>)
 800693a:	f993 4000 	ldrsb.w	r4, [r3]
 800693e:	1c63      	adds	r3, r4, #1
 8006940:	d02c      	beq.n	800699c <sqrtf+0x74>
 8006942:	eeb4 8a48 	vcmp.f32	s16, s16
 8006946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800694a:	d627      	bvs.n	800699c <sqrtf+0x74>
 800694c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006954:	d522      	bpl.n	800699c <sqrtf+0x74>
 8006956:	2301      	movs	r3, #1
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	4b1a      	ldr	r3, [pc, #104]	; (80069c4 <sqrtf+0x9c>)
 800695c:	9301      	str	r3, [sp, #4]
 800695e:	ee18 0a10 	vmov	r0, s16
 8006962:	2300      	movs	r3, #0
 8006964:	9308      	str	r3, [sp, #32]
 8006966:	f7f9 fd93 	bl	8000490 <__aeabi_f2d>
 800696a:	2200      	movs	r2, #0
 800696c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006970:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006974:	2300      	movs	r3, #0
 8006976:	b9ac      	cbnz	r4, 80069a4 <sqrtf+0x7c>
 8006978:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800697c:	4668      	mov	r0, sp
 800697e:	f000 f826 	bl	80069ce <matherr>
 8006982:	b1b8      	cbz	r0, 80069b4 <sqrtf+0x8c>
 8006984:	9b08      	ldr	r3, [sp, #32]
 8006986:	b11b      	cbz	r3, 8006990 <sqrtf+0x68>
 8006988:	f7ff ff9c 	bl	80068c4 <__errno>
 800698c:	9b08      	ldr	r3, [sp, #32]
 800698e:	6003      	str	r3, [r0, #0]
 8006990:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006994:	f7f9 ffe6 	bl	8000964 <__aeabi_d2f>
 8006998:	ee00 0a10 	vmov	s0, r0
 800699c:	b00a      	add	sp, #40	; 0x28
 800699e:	ecbd 8b02 	vpop	{d8}
 80069a2:	bd10      	pop	{r4, pc}
 80069a4:	4610      	mov	r0, r2
 80069a6:	4619      	mov	r1, r3
 80069a8:	f7f9 fef4 	bl	8000794 <__aeabi_ddiv>
 80069ac:	2c02      	cmp	r4, #2
 80069ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80069b2:	d1e3      	bne.n	800697c <sqrtf+0x54>
 80069b4:	f7ff ff86 	bl	80068c4 <__errno>
 80069b8:	2321      	movs	r3, #33	; 0x21
 80069ba:	6003      	str	r3, [r0, #0]
 80069bc:	e7e2      	b.n	8006984 <sqrtf+0x5c>
 80069be:	bf00      	nop
 80069c0:	20000078 	.word	0x20000078
 80069c4:	08007208 	.word	0x08007208

080069c8 <__ieee754_sqrtf>:
 80069c8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80069cc:	4770      	bx	lr

080069ce <matherr>:
 80069ce:	2000      	movs	r0, #0
 80069d0:	4770      	bx	lr
	...

080069d4 <_init>:
 80069d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d6:	bf00      	nop
 80069d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069da:	bc08      	pop	{r3}
 80069dc:	469e      	mov	lr, r3
 80069de:	4770      	bx	lr

080069e0 <_fini>:
 80069e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069e2:	bf00      	nop
 80069e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069e6:	bc08      	pop	{r3}
 80069e8:	469e      	mov	lr, r3
 80069ea:	4770      	bx	lr
