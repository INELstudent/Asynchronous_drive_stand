
Asynchronous_drive_stand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000081c  08006550  08006550  00016550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d6c  08006d6c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08006d6c  08006d6c  00016d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d74  08006d74  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d74  08006d74  00016d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d78  08006d78  00016d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006d7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  2000007c  08006df8  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  08006df8  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000169ba  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030d6  00000000  00000000  00036a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  00039b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00021cf6  00000000  00000000  0003ab58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015570  00000000  00000000  0005c84e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d96ca  00000000  00000000  00071dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0014b488  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000ea8  00000000  00000000  0014b4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042bc  00000000  00000000  0014c388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006538 	.word	0x08006538

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08006538 	.word	0x08006538

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b092      	sub	sp, #72	; 0x48
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2U;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	089b      	lsrs	r3, r3, #2
 80004d0:	647b      	str	r3, [r7, #68]	; 0x44

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 80004d2:	e0c2      	b.n	800065a <arm_cmplx_mag_f32+0x19a>
  {

    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	1d1a      	adds	r2, r3, #4
 80004d8:	60fa      	str	r2, [r7, #12]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	1d1a      	adds	r2, r3, #4
 80004e2:	60fa      	str	r2, [r7, #12]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80004e8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80004ec:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80004f0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80004f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80004f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	1d1a      	adds	r2, r3, #4
 8000500:	60ba      	str	r2, [r7, #8]
 8000502:	edc7 7a08 	vstr	s15, [r7, #32]
 8000506:	61fb      	str	r3, [r7, #28]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8000508:	edd7 7a08 	vldr	s15, [r7, #32]
 800050c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000514:	db09      	blt.n	800052a <arm_cmplx_mag_f32+0x6a>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8000516:	ed97 0a08 	vldr	s0, [r7, #32]
 800051a:	f005 ffe3 	bl	80064e4 <sqrtf>
 800051e:	eef0 7a40 	vmov.f32	s15, s0
 8000522:	69fb      	ldr	r3, [r7, #28]
 8000524:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8000528:	e004      	b.n	8000534 <arm_cmplx_mag_f32+0x74>
    }
    else
    {
      *pOut = 0.0f;
 800052a:	69fb      	ldr	r3, [r7, #28]
 800052c:	f04f 0200 	mov.w	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000532:	bf00      	nop

    realIn = *pSrc++;
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	1d1a      	adds	r2, r3, #4
 8000538:	60fa      	str	r2, [r7, #12]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	1d1a      	adds	r2, r3, #4
 8000542:	60fa      	str	r2, [r7, #12]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8000548:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800054c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000550:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000554:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000558:	ee77 7a27 	vadd.f32	s15, s14, s15
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	1d1a      	adds	r2, r3, #4
 8000560:	60ba      	str	r2, [r7, #8]
 8000562:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8000566:	627b      	str	r3, [r7, #36]	; 0x24
    if (in >= 0.0f)
 8000568:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800056c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000574:	db09      	blt.n	800058a <arm_cmplx_mag_f32+0xca>
      *pOut = __builtin_sqrtf(in);
 8000576:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800057a:	f005 ffb3 	bl	80064e4 <sqrtf>
 800057e:	eef0 7a40 	vmov.f32	s15, s0
 8000582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000584:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8000588:	e004      	b.n	8000594 <arm_cmplx_mag_f32+0xd4>
      *pOut = 0.0f;
 800058a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800058c:	f04f 0200 	mov.w	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000592:	bf00      	nop

    realIn = *pSrc++;
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	1d1a      	adds	r2, r3, #4
 8000598:	60fa      	str	r2, [r7, #12]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	1d1a      	adds	r2, r3, #4
 80005a2:	60fa      	str	r2, [r7, #12]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80005a8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80005ac:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80005b0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80005b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80005b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	1d1a      	adds	r2, r3, #4
 80005c0:	60ba      	str	r2, [r7, #8]
 80005c2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80005c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (in >= 0.0f)
 80005c8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80005cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80005d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005d4:	db09      	blt.n	80005ea <arm_cmplx_mag_f32+0x12a>
      *pOut = __builtin_sqrtf(in);
 80005d6:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 80005da:	f005 ff83 	bl	80064e4 <sqrtf>
 80005de:	eef0 7a40 	vmov.f32	s15, s0
 80005e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005e4:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 80005e8:	e004      	b.n	80005f4 <arm_cmplx_mag_f32+0x134>
      *pOut = 0.0f;
 80005ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005ec:	f04f 0200 	mov.w	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80005f2:	bf00      	nop

    realIn = *pSrc++;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	1d1a      	adds	r2, r3, #4
 80005f8:	60fa      	str	r2, [r7, #12]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	1d1a      	adds	r2, r3, #4
 8000602:	60fa      	str	r2, [r7, #12]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8000608:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800060c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000610:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000614:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000618:	ee77 7a27 	vadd.f32	s15, s14, s15
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	1d1a      	adds	r2, r3, #4
 8000620:	60ba      	str	r2, [r7, #8]
 8000622:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8000626:	637b      	str	r3, [r7, #52]	; 0x34
    if (in >= 0.0f)
 8000628:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800062c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000634:	db09      	blt.n	800064a <arm_cmplx_mag_f32+0x18a>
      *pOut = __builtin_sqrtf(in);
 8000636:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 800063a:	f005 ff53 	bl	80064e4 <sqrtf>
 800063e:	eef0 7a40 	vmov.f32	s15, s0
 8000642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000644:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8000648:	e004      	b.n	8000654 <arm_cmplx_mag_f32+0x194>
      *pOut = 0.0f;
 800064a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800064c:	f04f 0200 	mov.w	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000652:	bf00      	nop


    /* Decrement the loop counter */
    blkCnt--;
 8000654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000656:	3b01      	subs	r3, #1
 8000658:	647b      	str	r3, [r7, #68]	; 0x44
  while (blkCnt > 0U)
 800065a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800065c:	2b00      	cmp	r3, #0
 800065e:	f47f af39 	bne.w	80004d4 <arm_cmplx_mag_f32+0x14>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4U;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	f003 0303 	and.w	r3, r3, #3
 8000668:	647b      	str	r3, [r7, #68]	; 0x44

  while (blkCnt > 0U)
 800066a:	e032      	b.n	80006d2 <arm_cmplx_mag_f32+0x212>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	1d1a      	adds	r2, r3, #4
 8000670:	60fa      	str	r2, [r7, #12]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	1d1a      	adds	r2, r3, #4
 800067a:	60fa      	str	r2, [r7, #12]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8000680:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000684:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000688:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800068c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	1d1a      	adds	r2, r3, #4
 8000698:	60ba      	str	r2, [r7, #8]
 800069a:	edc7 7a06 	vstr	s15, [r7, #24]
 800069e:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 80006a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80006a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ac:	db09      	blt.n	80006c2 <arm_cmplx_mag_f32+0x202>
      *pOut = __builtin_sqrtf(in);
 80006ae:	ed97 0a06 	vldr	s0, [r7, #24]
 80006b2:	f005 ff17 	bl	80064e4 <sqrtf>
 80006b6:	eef0 7a40 	vmov.f32	s15, s0
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 80006c0:	e004      	b.n	80006cc <arm_cmplx_mag_f32+0x20c>
      *pOut = 0.0f;
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	f04f 0200 	mov.w	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80006ca:	bf00      	nop

    /* Decrement the loop counter */
    blkCnt--;
 80006cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006ce:	3b01      	subs	r3, #1
 80006d0:	647b      	str	r3, [r7, #68]	; 0x44
  while (blkCnt > 0U)
 80006d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d1c9      	bne.n	800066c <arm_cmplx_mag_f32+0x1ac>
    numSamples--;
  }

#endif /* #if defined (ARM_MATH_DSP) */

}
 80006d8:	bf00      	nop
 80006da:	bf00      	nop
 80006dc:	3748      	adds	r7, #72	; 0x48
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <arm_cos_f32>:
 * @return cos(x).
 */

float32_t arm_cos_f32(
  float32_t x)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b08b      	sub	sp, #44	; 0x2c
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 80006ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80006f2:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80007d0 <arm_cos_f32+0xec>
 80006f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006fa:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80006fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000702:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8000706:	edd7 7a08 	vldr	s15, [r7, #32]
 800070a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800070e:	ee17 3a90 	vmov	r3, s15
 8000712:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8000714:	edd7 7a08 	vldr	s15, [r7, #32]
 8000718:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800071c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000720:	d502      	bpl.n	8000728 <arm_cos_f32+0x44>
  {
    n--;
 8000722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000724:	3b01      	subs	r3, #1
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8000728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072a:	ee07 3a90 	vmov	s15, r3
 800072e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000732:	ed97 7a08 	vldr	s14, [r7, #32]
 8000736:	ee77 7a67 	vsub.f32	s15, s14, s15
 800073a:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 800073e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000742:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80007d4 <arm_cos_f32+0xf0>
 8000746:	ee67 7a87 	vmul.f32	s15, s15, s14
 800074a:	edc7 7a07 	vstr	s15, [r7, #28]
  index = ((uint16_t)findex) & 0x1ff;
 800074e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000752:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000756:	ee17 3a90 	vmov	r3, s15
 800075a:	b29b      	uxth	r3, r3
 800075c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000760:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8000762:	8b7b      	ldrh	r3, [r7, #26]
 8000764:	ee07 3a90 	vmov	s15, r3
 8000768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800076c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000770:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000774:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 8000778:	8b7b      	ldrh	r3, [r7, #26]
 800077a:	4a17      	ldr	r2, [pc, #92]	; (80007d8 <arm_cos_f32+0xf4>)
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	4413      	add	r3, r2
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8000784:	8b7b      	ldrh	r3, [r7, #26]
 8000786:	3301      	adds	r3, #1
 8000788:	4a13      	ldr	r2, [pc, #76]	; (80007d8 <arm_cos_f32+0xf4>)
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	4413      	add	r3, r2
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  cosVal = (1.0f-fract)*a + fract*b;
 8000792:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000796:	edd7 7a05 	vldr	s15, [r7, #20]
 800079a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800079e:	edd7 7a04 	vldr	s15, [r7, #16]
 80007a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007a6:	edd7 6a05 	vldr	s13, [r7, #20]
 80007aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80007ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007b6:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return the output value */
  return (cosVal);
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	ee07 3a90 	vmov	s15, r3
}
 80007c0:	eeb0 0a67 	vmov.f32	s0, s15
 80007c4:	372c      	adds	r7, #44	; 0x2c
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	3e22f983 	.word	0x3e22f983
 80007d4:	44000000 	.word	0x44000000
 80007d8:	08006550 	.word	0x08006550

080007dc <arm_sin_f32>:
 * @return  sin(x).
 */

float32_t arm_sin_f32(
  float32_t x)
{
 80007dc:	b480      	push	{r7}
 80007de:	b08b      	sub	sp, #44	; 0x2c
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	ed87 0a01 	vstr	s0, [r7, #4]
  float32_t a, b;                                        /* Two nearest output values */
  int32_t n;
  float32_t findex;

  /* Special case for small negative inputs */
  if ((x < 0.0f) && (x >= -1.9e-7f)) {
 80007e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80007ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80007ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007f2:	d50a      	bpl.n	800080a <arm_sin_f32+0x2e>
 80007f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80007f8:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80008e4 <arm_sin_f32+0x108>
 80007fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000804:	db01      	blt.n	800080a <arm_sin_f32+0x2e>
     return x;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	e062      	b.n	80008d0 <arm_sin_f32+0xf4>
  }

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 800080a:	edd7 7a01 	vldr	s15, [r7, #4]
 800080e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80008e8 <arm_sin_f32+0x10c>
 8000812:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000816:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 800081a:	edd7 7a08 	vldr	s15, [r7, #32]
 800081e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000822:	ee17 3a90 	vmov	r3, s15
 8000826:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if (x < 0.0f)
 8000828:	edd7 7a01 	vldr	s15, [r7, #4]
 800082c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000834:	d502      	bpl.n	800083c <arm_sin_f32+0x60>
  {
    n--;
 8000836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000838:	3b01      	subs	r3, #1
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 800083c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800083e:	ee07 3a90 	vmov	s15, r3
 8000842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000846:	ed97 7a08 	vldr	s14, [r7, #32]
 800084a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800084e:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 8000852:	edd7 7a08 	vldr	s15, [r7, #32]
 8000856:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80008ec <arm_sin_f32+0x110>
 800085a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800085e:	edc7 7a07 	vstr	s15, [r7, #28]

  index = ((uint16_t)findex) & 0x1ff;
 8000862:	edd7 7a07 	vldr	s15, [r7, #28]
 8000866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800086a:	ee17 3a90 	vmov	r3, s15
 800086e:	b29b      	uxth	r3, r3
 8000870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000874:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8000876:	8b7b      	ldrh	r3, [r7, #26]
 8000878:	ee07 3a90 	vmov	s15, r3
 800087c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000880:	ed97 7a07 	vldr	s14, [r7, #28]
 8000884:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000888:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 800088c:	8b7b      	ldrh	r3, [r7, #26]
 800088e:	4a18      	ldr	r2, [pc, #96]	; (80008f0 <arm_sin_f32+0x114>)
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	4413      	add	r3, r2
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8000898:	8b7b      	ldrh	r3, [r7, #26]
 800089a:	3301      	adds	r3, #1
 800089c:	4a14      	ldr	r2, [pc, #80]	; (80008f0 <arm_sin_f32+0x114>)
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	4413      	add	r3, r2
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f-fract)*a + fract*b;
 80008a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80008aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80008ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80008b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80008b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008ba:	edd7 6a05 	vldr	s13, [r7, #20]
 80008be:	edd7 7a03 	vldr	s15, [r7, #12]
 80008c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80008c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008ca:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return the output value */
  return (sinVal);
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	ee07 3a90 	vmov	s15, r3
}
 80008d4:	eeb0 0a67 	vmov.f32	s0, s15
 80008d8:	372c      	adds	r7, #44	; 0x2c
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	b44c02cd 	.word	0xb44c02cd
 80008e8:	3e22f983 	.word	0x3e22f983
 80008ec:	44000000 	.word	0x44000000
 80008f0:	08006550 	.word	0x08006550

080008f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f8:	f002 f862 	bl	80029c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fc:	f000 f838 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000900:	f000 fb70 	bl	8000fe4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000904:	f000 fb46 	bl	8000f94 <MX_DMA_Init>
  MX_ADC1_Init();
 8000908:	f000 f89c 	bl	8000a44 <MX_ADC1_Init>
  MX_ADC2_Init();
 800090c:	f000 f904 	bl	8000b18 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000910:	f000 f94c 	bl	8000bac <MX_ADC3_Init>
  MX_TIM1_Init();
 8000914:	f000 f9fa 	bl	8000d0c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000918:	f000 fab2 	bl	8000e80 <MX_TIM3_Init>
  MX_DAC_Init();
 800091c:	f000 f990 	bl	8000c40 <MX_DAC_Init>
  MX_SPI2_Init();
 8000920:	f000 f9c2 	bl	8000ca8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
Device_DAC_ON();
 8000924:	f000 fc7e 	bl	8001224 <Device_DAC_ON>

Device_ADC_Start(Device_ADC_Buf,3);
 8000928:	2103      	movs	r1, #3
 800092a:	480e      	ldr	r0, [pc, #56]	; (8000964 <main+0x70>)
 800092c:	f000 fc88 	bl	8001240 <Device_ADC_Start>

/*                                    ENCODER SPI-DMA INIT                          */
  HAL_SPI_Init(&hspi2);
 8000930:	480d      	ldr	r0, [pc, #52]	; (8000968 <main+0x74>)
 8000932:	f003 ff05 	bl	8004740 <HAL_SPI_Init>
  HAL_SPI_MspInit(&hspi2);
 8000936:	480c      	ldr	r0, [pc, #48]	; (8000968 <main+0x74>)
 8000938:	f000 fe62 	bl	8001600 <HAL_SPI_MspInit>
  HAL_NVIC_DisableIRQ(DMA1_Stream3_IRQn);
 800093c:	200e      	movs	r0, #14
 800093e:	f002 fe08 	bl	8003552 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(DMA1_Stream4_IRQn);
 8000942:	200f      	movs	r0, #15
 8000944:	f002 fe05 	bl	8003552 <HAL_NVIC_DisableIRQ>
  HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)&speed.angle_f[0], 1);
 8000948:	2201      	movs	r2, #1
 800094a:	4908      	ldr	r1, [pc, #32]	; (800096c <main+0x78>)
 800094c:	4806      	ldr	r0, [pc, #24]	; (8000968 <main+0x74>)
 800094e:	f003 ff81 	bl	8004854 <HAL_SPI_Receive_DMA>


HAL_Delay(600);
 8000952:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000956:	f002 f8a5 	bl	8002aa4 <HAL_Delay>

Device_MainTimerStart();
 800095a:	f000 fc59 	bl	8001210 <Device_MainTimerStart>
Device_PWM_Channels_ON();
 800095e:	f000 fcc5 	bl	80012ec <Device_PWM_Channels_ON>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000962:	e7fe      	b.n	8000962 <main+0x6e>
 8000964:	200002f8 	.word	0x200002f8
 8000968:	200001f8 	.word	0x200001f8
 800096c:	200003da 	.word	0x200003da

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b094      	sub	sp, #80	; 0x50
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 0320 	add.w	r3, r7, #32
 800097a:	2230      	movs	r2, #48	; 0x30
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f005 fda8 	bl	80064d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000994:	2300      	movs	r3, #0
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	4b28      	ldr	r3, [pc, #160]	; (8000a3c <SystemClock_Config+0xcc>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099c:	4a27      	ldr	r2, [pc, #156]	; (8000a3c <SystemClock_Config+0xcc>)
 800099e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a2:	6413      	str	r3, [r2, #64]	; 0x40
 80009a4:	4b25      	ldr	r3, [pc, #148]	; (8000a3c <SystemClock_Config+0xcc>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b0:	2300      	movs	r3, #0
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	4b22      	ldr	r3, [pc, #136]	; (8000a40 <SystemClock_Config+0xd0>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a21      	ldr	r2, [pc, #132]	; (8000a40 <SystemClock_Config+0xd0>)
 80009ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <SystemClock_Config+0xd0>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009cc:	2301      	movs	r3, #1
 80009ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d6:	2302      	movs	r3, #2
 80009d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009e0:	2304      	movs	r3, #4
 80009e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009e4:	23a8      	movs	r3, #168	; 0xa8
 80009e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009ec:	2304      	movs	r3, #4
 80009ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f0:	f107 0320 	add.w	r3, r7, #32
 80009f4:	4618      	mov	r0, r3
 80009f6:	f003 fa63 	bl	8003ec0 <HAL_RCC_OscConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a00:	f000 fcb0 	bl	8001364 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a04:	230f      	movs	r3, #15
 8000a06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	2105      	movs	r1, #5
 8000a22:	4618      	mov	r0, r3
 8000a24:	f003 fcc4 	bl	80043b0 <HAL_RCC_ClockConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a2e:	f000 fc99 	bl	8001364 <Error_Handler>
  }
}
 8000a32:	bf00      	nop
 8000a34:	3750      	adds	r7, #80	; 0x50
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40007000 	.word	0x40007000

08000a44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a62:	4b2b      	ldr	r3, [pc, #172]	; (8000b10 <MX_ADC1_Init+0xcc>)
 8000a64:	4a2b      	ldr	r2, [pc, #172]	; (8000b14 <MX_ADC1_Init+0xd0>)
 8000a66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a68:	4b29      	ldr	r3, [pc, #164]	; (8000b10 <MX_ADC1_Init+0xcc>)
 8000a6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a6e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a70:	4b27      	ldr	r3, [pc, #156]	; (8000b10 <MX_ADC1_Init+0xcc>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a76:	4b26      	ldr	r3, [pc, #152]	; (8000b10 <MX_ADC1_Init+0xcc>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a7c:	4b24      	ldr	r3, [pc, #144]	; (8000b10 <MX_ADC1_Init+0xcc>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a82:	4b23      	ldr	r3, [pc, #140]	; (8000b10 <MX_ADC1_Init+0xcc>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a8a:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <MX_ADC1_Init+0xcc>)
 8000a8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a90:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_CC1;
 8000a92:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <MX_ADC1_Init+0xcc>)
 8000a94:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8000a98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a9a:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <MX_ADC1_Init+0xcc>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000aa0:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <MX_ADC1_Init+0xcc>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000aa6:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <MX_ADC1_Init+0xcc>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aae:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <MX_ADC1_Init+0xcc>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ab4:	4816      	ldr	r0, [pc, #88]	; (8000b10 <MX_ADC1_Init+0xcc>)
 8000ab6:	f002 f819 	bl	8002aec <HAL_ADC_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000ac0:	f000 fc50 	bl	8001364 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_TRIPLEMODE_REGSIMULT;
 8000ac4:	2316      	movs	r3, #22
 8000ac6:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_1;
 8000ac8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000acc:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	480d      	ldr	r0, [pc, #52]	; (8000b10 <MX_ADC1_Init+0xcc>)
 8000ada:	f002 fb53 	bl	8003184 <HAL_ADCEx_MultiModeConfigChannel>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 8000ae4:	f000 fc3e 	bl	8001364 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 8000aec:	2301      	movs	r3, #1
 8000aee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	4619      	mov	r1, r3
 8000af8:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_ADC1_Init+0xcc>)
 8000afa:	f002 f859 	bl	8002bb0 <HAL_ADC_ConfigChannel>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000b04:	f000 fc2e 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	3720      	adds	r7, #32
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	200000f4 	.word	0x200000f4
 8000b14:	40012000 	.word	0x40012000

08000b18 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b1e:	463b      	mov	r3, r7
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000b2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <MX_ADC2_Init+0x8c>)
 8000b2c:	4a1e      	ldr	r2, [pc, #120]	; (8000ba8 <MX_ADC2_Init+0x90>)
 8000b2e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b30:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <MX_ADC2_Init+0x8c>)
 8000b32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b36:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <MX_ADC2_Init+0x8c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <MX_ADC2_Init+0x8c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <MX_ADC2_Init+0x8c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <MX_ADC2_Init+0x8c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <MX_ADC2_Init+0x8c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <MX_ADC2_Init+0x8c>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_ADC2_Init+0x8c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <MX_ADC2_Init+0x8c>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b6c:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <MX_ADC2_Init+0x8c>)
 8000b6e:	f001 ffbd 	bl	8002aec <HAL_ADC_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 8000b78:	f000 fbf4 	bl	8001364 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000b7c:	230b      	movs	r3, #11
 8000b7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b80:	2301      	movs	r3, #1
 8000b82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b88:	463b      	mov	r3, r7
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <MX_ADC2_Init+0x8c>)
 8000b8e:	f002 f80f 	bl	8002bb0 <HAL_ADC_ConfigChannel>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000b98:	f000 fbe4 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	200000ac 	.word	0x200000ac
 8000ba8:	40012100 	.word	0x40012100

08000bac <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000bbe:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <MX_ADC3_Init+0x8c>)
 8000bc0:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <MX_ADC3_Init+0x90>)
 8000bc2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bc4:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <MX_ADC3_Init+0x8c>)
 8000bc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bca:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <MX_ADC3_Init+0x8c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000bd2:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <MX_ADC3_Init+0x8c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000bd8:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <MX_ADC3_Init+0x8c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000bde:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <MX_ADC3_Init+0x8c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000be6:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <MX_ADC3_Init+0x8c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <MX_ADC3_Init+0x8c>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <MX_ADC3_Init+0x8c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <MX_ADC3_Init+0x8c>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c00:	480d      	ldr	r0, [pc, #52]	; (8000c38 <MX_ADC3_Init+0x8c>)
 8000c02:	f001 ff73 	bl	8002aec <HAL_ADC_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_ADC3_Init+0x64>
  {
    Error_Handler();
 8000c0c:	f000 fbaa 	bl	8001364 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000c10:	230c      	movs	r3, #12
 8000c12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c14:	2301      	movs	r3, #1
 8000c16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4805      	ldr	r0, [pc, #20]	; (8000c38 <MX_ADC3_Init+0x8c>)
 8000c22:	f001 ffc5 	bl	8002bb0 <HAL_ADC_ConfigChannel>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8000c2c:	f000 fb9a 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	2000013c 	.word	0x2000013c
 8000c3c:	40012200 	.word	0x40012200

08000c40 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c46:	463b      	mov	r3, r7
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000c4e:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <MX_DAC_Init+0x60>)
 8000c50:	4a14      	ldr	r2, [pc, #80]	; (8000ca4 <MX_DAC_Init+0x64>)
 8000c52:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000c54:	4812      	ldr	r0, [pc, #72]	; (8000ca0 <MX_DAC_Init+0x60>)
 8000c56:	f002 fc96 	bl	8003586 <HAL_DAC_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000c60:	f000 fb80 	bl	8001364 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	2200      	movs	r2, #0
 8000c70:	4619      	mov	r1, r3
 8000c72:	480b      	ldr	r0, [pc, #44]	; (8000ca0 <MX_DAC_Init+0x60>)
 8000c74:	f002 fd20 	bl	80036b8 <HAL_DAC_ConfigChannel>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000c7e:	f000 fb71 	bl	8001364 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000c82:	463b      	mov	r3, r7
 8000c84:	2210      	movs	r2, #16
 8000c86:	4619      	mov	r1, r3
 8000c88:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <MX_DAC_Init+0x60>)
 8000c8a:	f002 fd15 	bl	80036b8 <HAL_DAC_ConfigChannel>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000c94:	f000 fb66 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	200001e4 	.word	0x200001e4
 8000ca4:	40007400 	.word	0x40007400

08000ca8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000cac:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <MX_SPI2_Init+0x5c>)
 8000cae:	4a16      	ldr	r2, [pc, #88]	; (8000d08 <MX_SPI2_Init+0x60>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000cb2:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <MX_SPI2_Init+0x5c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <MX_SPI2_Init+0x5c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_SPI2_Init+0x5c>)
 8000cc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cc4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MX_SPI2_Init+0x5c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ccc:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <MX_SPI2_Init+0x5c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <MX_SPI2_Init+0x5c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cd8:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <MX_SPI2_Init+0x5c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <MX_SPI2_Init+0x5c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <MX_SPI2_Init+0x5c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <MX_SPI2_Init+0x5c>)
 8000cec:	220a      	movs	r2, #10
 8000cee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000cf0:	4804      	ldr	r0, [pc, #16]	; (8000d04 <MX_SPI2_Init+0x5c>)
 8000cf2:	f003 fd25 	bl	8004740 <HAL_SPI_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_SPI2_Init+0x58>
  {
    Error_Handler();
 8000cfc:	f000 fb32 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	200001f8 	.word	0x200001f8
 8000d08:	40003800 	.word	0x40003800

08000d0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b096      	sub	sp, #88	; 0x58
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
 8000d38:	611a      	str	r2, [r3, #16]
 8000d3a:	615a      	str	r2, [r3, #20]
 8000d3c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	2220      	movs	r2, #32
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f005 fbc5 	bl	80064d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d4a:	4b4b      	ldr	r3, [pc, #300]	; (8000e78 <MX_TIM1_Init+0x16c>)
 8000d4c:	4a4b      	ldr	r2, [pc, #300]	; (8000e7c <MX_TIM1_Init+0x170>)
 8000d4e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8000d50:	4b49      	ldr	r3, [pc, #292]	; (8000e78 <MX_TIM1_Init+0x16c>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000d56:	4b48      	ldr	r3, [pc, #288]	; (8000e78 <MX_TIM1_Init+0x16c>)
 8000d58:	2220      	movs	r2, #32
 8000d5a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8400;
 8000d5c:	4b46      	ldr	r3, [pc, #280]	; (8000e78 <MX_TIM1_Init+0x16c>)
 8000d5e:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8000d62:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d64:	4b44      	ldr	r3, [pc, #272]	; (8000e78 <MX_TIM1_Init+0x16c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d6a:	4b43      	ldr	r3, [pc, #268]	; (8000e78 <MX_TIM1_Init+0x16c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d70:	4b41      	ldr	r3, [pc, #260]	; (8000e78 <MX_TIM1_Init+0x16c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d76:	4840      	ldr	r0, [pc, #256]	; (8000e78 <MX_TIM1_Init+0x16c>)
 8000d78:	f004 f970 	bl	800505c <HAL_TIM_Base_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000d82:	f000 faef 	bl	8001364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d90:	4619      	mov	r1, r3
 8000d92:	4839      	ldr	r0, [pc, #228]	; (8000e78 <MX_TIM1_Init+0x16c>)
 8000d94:	f004 fdbc 	bl	8005910 <HAL_TIM_ConfigClockSource>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d9e:	f000 fae1 	bl	8001364 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000da2:	4835      	ldr	r0, [pc, #212]	; (8000e78 <MX_TIM1_Init+0x16c>)
 8000da4:	f004 fb3c 	bl	8005420 <HAL_TIM_PWM_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000dae:	f000 fad9 	bl	8001364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000db2:	2310      	movs	r3, #16
 8000db4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	482d      	ldr	r0, [pc, #180]	; (8000e78 <MX_TIM1_Init+0x16c>)
 8000dc2:	f005 fa7b 	bl	80062bc <HAL_TIMEx_MasterConfigSynchronization>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000dcc:	f000 faca 	bl	8001364 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dd0:	2360      	movs	r3, #96	; 0x60
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 4200;
 8000dd4:	f241 0368 	movw	r3, #4200	; 0x1068
 8000dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dde:	2300      	movs	r3, #0
 8000de0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000de6:	2300      	movs	r3, #0
 8000de8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dea:	2300      	movs	r3, #0
 8000dec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df2:	2200      	movs	r2, #0
 8000df4:	4619      	mov	r1, r3
 8000df6:	4820      	ldr	r0, [pc, #128]	; (8000e78 <MX_TIM1_Init+0x16c>)
 8000df8:	f004 fccc 	bl	8005794 <HAL_TIM_PWM_ConfigChannel>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000e02:	f000 faaf 	bl	8001364 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0a:	2204      	movs	r2, #4
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	481a      	ldr	r0, [pc, #104]	; (8000e78 <MX_TIM1_Init+0x16c>)
 8000e10:	f004 fcc0 	bl	8005794 <HAL_TIM_PWM_ConfigChannel>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000e1a:	f000 faa3 	bl	8001364 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e22:	2208      	movs	r2, #8
 8000e24:	4619      	mov	r1, r3
 8000e26:	4814      	ldr	r0, [pc, #80]	; (8000e78 <MX_TIM1_Init+0x16c>)
 8000e28:	f004 fcb4 	bl	8005794 <HAL_TIM_PWM_ConfigChannel>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000e32:	f000 fa97 	bl	8001364 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 250;
 8000e42:	23fa      	movs	r3, #250	; 0xfa
 8000e44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e4e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	4619      	mov	r1, r3
 8000e58:	4807      	ldr	r0, [pc, #28]	; (8000e78 <MX_TIM1_Init+0x16c>)
 8000e5a:	f005 faab 	bl	80063b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8000e64:	f000 fa7e 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e68:	4803      	ldr	r0, [pc, #12]	; (8000e78 <MX_TIM1_Init+0x16c>)
 8000e6a:	f000 fcb9 	bl	80017e0 <HAL_TIM_MspPostInit>

}
 8000e6e:	bf00      	nop
 8000e70:	3758      	adds	r7, #88	; 0x58
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000300 	.word	0x20000300
 8000e7c:	40010000 	.word	0x40010000

08000e80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b092      	sub	sp, #72	; 0x48
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e86:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
 8000ebc:	615a      	str	r2, [r3, #20]
 8000ebe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ec0:	4b32      	ldr	r3, [pc, #200]	; (8000f8c <MX_TIM3_Init+0x10c>)
 8000ec2:	4a33      	ldr	r2, [pc, #204]	; (8000f90 <MX_TIM3_Init+0x110>)
 8000ec4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ec6:	4b31      	ldr	r3, [pc, #196]	; (8000f8c <MX_TIM3_Init+0x10c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ecc:	4b2f      	ldr	r3, [pc, #188]	; (8000f8c <MX_TIM3_Init+0x10c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4200;
 8000ed2:	4b2e      	ldr	r3, [pc, #184]	; (8000f8c <MX_TIM3_Init+0x10c>)
 8000ed4:	f241 0268 	movw	r2, #4200	; 0x1068
 8000ed8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eda:	4b2c      	ldr	r3, [pc, #176]	; (8000f8c <MX_TIM3_Init+0x10c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee0:	4b2a      	ldr	r3, [pc, #168]	; (8000f8c <MX_TIM3_Init+0x10c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ee6:	4829      	ldr	r0, [pc, #164]	; (8000f8c <MX_TIM3_Init+0x10c>)
 8000ee8:	f004 f8b8 	bl	800505c <HAL_TIM_Base_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000ef2:	f000 fa37 	bl	8001364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000efa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000efc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f00:	4619      	mov	r1, r3
 8000f02:	4822      	ldr	r0, [pc, #136]	; (8000f8c <MX_TIM3_Init+0x10c>)
 8000f04:	f004 fd04 	bl	8005910 <HAL_TIM_ConfigClockSource>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000f0e:	f000 fa29 	bl	8001364 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000f12:	481e      	ldr	r0, [pc, #120]	; (8000f8c <MX_TIM3_Init+0x10c>)
 8000f14:	f004 f962 	bl	80051dc <HAL_TIM_OC_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8000f1e:	f000 fa21 	bl	8001364 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8000f22:	2305      	movs	r3, #5
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4816      	ldr	r0, [pc, #88]	; (8000f8c <MX_TIM3_Init+0x10c>)
 8000f32:	f004 fdb1 	bl	8005a98 <HAL_TIM_SlaveConfigSynchro>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8000f3c:	f000 fa12 	bl	8001364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	480f      	ldr	r0, [pc, #60]	; (8000f8c <MX_TIM3_Init+0x10c>)
 8000f50:	f005 f9b4 	bl	80062bc <HAL_TIMEx_MasterConfigSynchronization>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000f5a:	f000 fa03 	bl	8001364 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000f5e:	2330      	movs	r3, #48	; 0x30
 8000f60:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f6e:	463b      	mov	r3, r7
 8000f70:	2200      	movs	r2, #0
 8000f72:	4619      	mov	r1, r3
 8000f74:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_TIM3_Init+0x10c>)
 8000f76:	f004 fbb5 	bl	80056e4 <HAL_TIM_OC_ConfigChannel>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000f80:	f000 f9f0 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	3748      	adds	r7, #72	; 0x48
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	200002b0 	.word	0x200002b0
 8000f90:	40000400 	.word	0x40000400

08000f94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <MX_DMA_Init+0x4c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a0f      	ldr	r2, [pc, #60]	; (8000fe0 <MX_DMA_Init+0x4c>)
 8000fa4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <MX_DMA_Init+0x4c>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	603b      	str	r3, [r7, #0]
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_DMA_Init+0x4c>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a08      	ldr	r2, [pc, #32]	; (8000fe0 <MX_DMA_Init+0x4c>)
 8000fc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_DMA_Init+0x4c>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	683b      	ldr	r3, [r7, #0]

}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40023800 	.word	0x40023800

08000fe4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08c      	sub	sp, #48	; 0x30
 8000fe8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fea:	f107 031c 	add.w	r3, r7, #28
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61bb      	str	r3, [r7, #24]
 8000ffe:	4b7e      	ldr	r3, [pc, #504]	; (80011f8 <MX_GPIO_Init+0x214>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a7d      	ldr	r2, [pc, #500]	; (80011f8 <MX_GPIO_Init+0x214>)
 8001004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b7b      	ldr	r3, [pc, #492]	; (80011f8 <MX_GPIO_Init+0x214>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001012:	61bb      	str	r3, [r7, #24]
 8001014:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
 800101a:	4b77      	ldr	r3, [pc, #476]	; (80011f8 <MX_GPIO_Init+0x214>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a76      	ldr	r2, [pc, #472]	; (80011f8 <MX_GPIO_Init+0x214>)
 8001020:	f043 0304 	orr.w	r3, r3, #4
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b74      	ldr	r3, [pc, #464]	; (80011f8 <MX_GPIO_Init+0x214>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0304 	and.w	r3, r3, #4
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	4b70      	ldr	r3, [pc, #448]	; (80011f8 <MX_GPIO_Init+0x214>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a6f      	ldr	r2, [pc, #444]	; (80011f8 <MX_GPIO_Init+0x214>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b6d      	ldr	r3, [pc, #436]	; (80011f8 <MX_GPIO_Init+0x214>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	4b69      	ldr	r3, [pc, #420]	; (80011f8 <MX_GPIO_Init+0x214>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a68      	ldr	r2, [pc, #416]	; (80011f8 <MX_GPIO_Init+0x214>)
 8001058:	f043 0302 	orr.w	r3, r3, #2
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b66      	ldr	r3, [pc, #408]	; (80011f8 <MX_GPIO_Init+0x214>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	4b62      	ldr	r3, [pc, #392]	; (80011f8 <MX_GPIO_Init+0x214>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a61      	ldr	r2, [pc, #388]	; (80011f8 <MX_GPIO_Init+0x214>)
 8001074:	f043 0310 	orr.w	r3, r3, #16
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b5f      	ldr	r3, [pc, #380]	; (80011f8 <MX_GPIO_Init+0x214>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0310 	and.w	r3, r3, #16
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	4b5b      	ldr	r3, [pc, #364]	; (80011f8 <MX_GPIO_Init+0x214>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a5a      	ldr	r2, [pc, #360]	; (80011f8 <MX_GPIO_Init+0x214>)
 8001090:	f043 0308 	orr.w	r3, r3, #8
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b58      	ldr	r3, [pc, #352]	; (80011f8 <MX_GPIO_Init+0x214>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RESET_3_Pin|LED_4_Pin|LED_3_Pin|LED_1_Pin, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	f44f 7158 	mov.w	r1, #864	; 0x360
 80010a8:	4854      	ldr	r0, [pc, #336]	; (80011fc <MX_GPIO_Init+0x218>)
 80010aa:	f002 feef 	bl	8003e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_2_GPIO_Port, RESET_2_Pin, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010b4:	4852      	ldr	r0, [pc, #328]	; (8001200 <MX_GPIO_Init+0x21c>)
 80010b6:	f002 fee9 	bl	8003e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_1_GPIO_Port, RESET_1_Pin, GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c0:	4850      	ldr	r0, [pc, #320]	; (8001204 <MX_GPIO_Init+0x220>)
 80010c2:	f002 fee3 	bl	8003e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, O_D_Led1_Pin|O_D_Led2_Pin|O_D_Led3_Pin|O_D_Led4_Pin, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80010cc:	484e      	ldr	r0, [pc, #312]	; (8001208 <MX_GPIO_Init+0x224>)
 80010ce:	f002 fedd 	bl	8003e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d8:	484c      	ldr	r0, [pc, #304]	; (800120c <MX_GPIO_Init+0x228>)
 80010da:	f002 fed7 	bl	8003e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FAULT_3_Pin */
  GPIO_InitStruct.Pin = FAULT_3_Pin;
 80010de:	2340      	movs	r3, #64	; 0x40
 80010e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(FAULT_3_GPIO_Port, &GPIO_InitStruct);
 80010ea:	f107 031c 	add.w	r3, r7, #28
 80010ee:	4619      	mov	r1, r3
 80010f0:	4846      	ldr	r0, [pc, #280]	; (800120c <MX_GPIO_Init+0x228>)
 80010f2:	f002 fd17 	bl	8003b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_3_Pin LED_4_Pin LED_3_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = RESET_3_Pin|LED_4_Pin|LED_3_Pin|LED_1_Pin;
 80010f6:	f44f 7358 	mov.w	r3, #864	; 0x360
 80010fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	4619      	mov	r1, r3
 800110e:	483b      	ldr	r0, [pc, #236]	; (80011fc <MX_GPIO_Init+0x218>)
 8001110:	f002 fd08 	bl	8003b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : FAULT_2_Pin */
  GPIO_InitStruct.Pin = FAULT_2_Pin;
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(FAULT_2_GPIO_Port, &GPIO_InitStruct);
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	4619      	mov	r1, r3
 8001126:	4836      	ldr	r0, [pc, #216]	; (8001200 <MX_GPIO_Init+0x21c>)
 8001128:	f002 fcfc 	bl	8003b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_2_Pin */
  GPIO_InitStruct.Pin = RESET_2_Pin;
 800112c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001132:	2301      	movs	r3, #1
 8001134:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RESET_2_GPIO_Port, &GPIO_InitStruct);
 800113e:	f107 031c 	add.w	r3, r7, #28
 8001142:	4619      	mov	r1, r3
 8001144:	482e      	ldr	r0, [pc, #184]	; (8001200 <MX_GPIO_Init+0x21c>)
 8001146:	f002 fced 	bl	8003b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : FAULT_1_Pin */
  GPIO_InitStruct.Pin = FAULT_1_Pin;
 800114a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800114e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001150:	2300      	movs	r3, #0
 8001152:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(FAULT_1_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 031c 	add.w	r3, r7, #28
 800115c:	4619      	mov	r1, r3
 800115e:	4829      	ldr	r0, [pc, #164]	; (8001204 <MX_GPIO_Init+0x220>)
 8001160:	f002 fce0 	bl	8003b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_1_Pin */
  GPIO_InitStruct.Pin = RESET_1_Pin;
 8001164:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001168:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2301      	movs	r3, #1
 800116c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RESET_1_GPIO_Port, &GPIO_InitStruct);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	4619      	mov	r1, r3
 800117c:	4821      	ldr	r0, [pc, #132]	; (8001204 <MX_GPIO_Init+0x220>)
 800117e:	f002 fcd1 	bl	8003b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : O_D_Led1_Pin O_D_Led2_Pin O_D_Led3_Pin O_D_Led4_Pin */
  GPIO_InitStruct.Pin = O_D_Led1_Pin|O_D_Led2_Pin|O_D_Led3_Pin|O_D_Led4_Pin;
 8001182:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001186:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001188:	2301      	movs	r3, #1
 800118a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	4619      	mov	r1, r3
 800119a:	481b      	ldr	r0, [pc, #108]	; (8001208 <MX_GPIO_Init+0x224>)
 800119c:	f002 fcc2 	bl	8003b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_2_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin;
 80011a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a6:	2301      	movs	r3, #1
 80011a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2300      	movs	r3, #0
 80011b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_2_GPIO_Port, &GPIO_InitStruct);
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	4619      	mov	r1, r3
 80011b8:	4814      	ldr	r0, [pc, #80]	; (800120c <MX_GPIO_Init+0x228>)
 80011ba:	f002 fcb3 	bl	8003b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : KM_Pin QF_Pin */
  GPIO_InitStruct.Pin = KM_Pin|QF_Pin;
 80011be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c4:	2300      	movs	r3, #0
 80011c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011cc:	f107 031c 	add.w	r3, r7, #28
 80011d0:	4619      	mov	r1, r3
 80011d2:	480a      	ldr	r0, [pc, #40]	; (80011fc <MX_GPIO_Init+0x218>)
 80011d4:	f002 fca6 	bl	8003b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : SB_1_Pin SB_2_Pin */
  GPIO_InitStruct.Pin = SB_1_Pin|SB_2_Pin;
 80011d8:	2305      	movs	r3, #5
 80011da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011dc:	2300      	movs	r3, #0
 80011de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4619      	mov	r1, r3
 80011ea:	4807      	ldr	r0, [pc, #28]	; (8001208 <MX_GPIO_Init+0x224>)
 80011ec:	f002 fc9a 	bl	8003b24 <HAL_GPIO_Init>

}
 80011f0:	bf00      	nop
 80011f2:	3730      	adds	r7, #48	; 0x30
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40020800 	.word	0x40020800
 8001200:	40021000 	.word	0x40021000
 8001204:	40020400 	.word	0x40020400
 8001208:	40020c00 	.word	0x40020c00
 800120c:	40020000 	.word	0x40020000

08001210 <Device_MainTimerStart>:

/* USER CODE BEGIN 4 */
void Device_MainTimerStart(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
HAL_TIM_Base_Start_IT(&htim1); 
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <Device_MainTimerStart+0x10>)
 8001216:	f003 ff71 	bl	80050fc <HAL_TIM_Base_Start_IT>
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000300 	.word	0x20000300

08001224 <Device_DAC_ON>:
{
HAL_TIM_Base_Stop_IT(&htim1); 
}

void Device_DAC_ON(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 8001228:	2100      	movs	r1, #0
 800122a:	4804      	ldr	r0, [pc, #16]	; (800123c <Device_DAC_ON+0x18>)
 800122c:	f002 f9cd 	bl	80035ca <HAL_DAC_Start>
  HAL_DAC_Start(&hdac,DAC_CHANNEL_2);
 8001230:	2110      	movs	r1, #16
 8001232:	4802      	ldr	r0, [pc, #8]	; (800123c <Device_DAC_ON+0x18>)
 8001234:	f002 f9c9 	bl	80035ca <HAL_DAC_Start>
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200001e4 	.word	0x200001e4

08001240 <Device_ADC_Start>:
void Device_ADC_Start(unsigned short *Device_ADC_Buf,unsigned short Lenght)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	807b      	strh	r3, [r7, #2]
  /*  x        1        x        x
ADC1  x,       iU,      x,       x.
ADC2  x,       iV,      x,       x.
ADC3  x,       iW,      x,       x.
*/
        __HAL_ADC_ENABLE(&hadc2);
 800124c:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <Device_ADC_Start+0x98>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689a      	ldr	r2, [r3, #8]
 8001252:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <Device_ADC_Start+0x98>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 0201 	orr.w	r2, r2, #1
 800125a:	609a      	str	r2, [r3, #8]
	__HAL_ADC_ENABLE(&hadc3);
 800125c:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <Device_ADC_Start+0x9c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689a      	ldr	r2, [r3, #8]
 8001262:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <Device_ADC_Start+0x9c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f042 0201 	orr.w	r2, r2, #1
 800126a:	609a      	str	r2, [r3, #8]
HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*)Device_ADC_Buf, Lenght);
 800126c:	887b      	ldrh	r3, [r7, #2]
 800126e:	461a      	mov	r2, r3
 8001270:	6879      	ldr	r1, [r7, #4]
 8001272:	481b      	ldr	r0, [pc, #108]	; (80012e0 <Device_ADC_Start+0xa0>)
 8001274:	f001 feba 	bl	8002fec <HAL_ADCEx_MultiModeStart_DMA>
__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_TC);
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <Device_ADC_Start+0xa4>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <Device_ADC_Start+0xa4>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f022 0210 	bic.w	r2, r2, #16
 8001286:	601a      	str	r2, [r3, #0]
__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_HT);
 8001288:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <Device_ADC_Start+0xa4>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <Device_ADC_Start+0xa4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0208 	bic.w	r2, r2, #8
 8001296:	601a      	str	r2, [r3, #0]
__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_TE);
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <Device_ADC_Start+0xa4>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <Device_ADC_Start+0xa4>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f022 0204 	bic.w	r2, r2, #4
 80012a6:	601a      	str	r2, [r3, #0]
__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_FE);
 80012a8:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <Device_ADC_Start+0xa4>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	695a      	ldr	r2, [r3, #20]
 80012ae:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <Device_ADC_Start+0xa4>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012b6:	615a      	str	r2, [r3, #20]
__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_DME);
 80012b8:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <Device_ADC_Start+0xa4>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <Device_ADC_Start+0xa4>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f022 0202 	bic.w	r2, r2, #2
 80012c6:	601a      	str	r2, [r3, #0]
HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);  
 80012c8:	2100      	movs	r1, #0
 80012ca:	4807      	ldr	r0, [pc, #28]	; (80012e8 <Device_ADC_Start+0xa8>)
 80012cc:	f003 ffe0 	bl	8005290 <HAL_TIM_OC_Start>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	200000ac 	.word	0x200000ac
 80012dc:	2000013c 	.word	0x2000013c
 80012e0:	200000f4 	.word	0x200000f4
 80012e4:	20000184 	.word	0x20000184
 80012e8:	200002b0 	.word	0x200002b0

080012ec <Device_PWM_Channels_ON>:

void Device_PWM_Channels_ON(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
TIM_CCxChannelCmd(TIM1, TIM_CHANNEL_1, TIM_CCx_ENABLE | TIM_CCxN_ENABLE);
 80012f0:	2205      	movs	r2, #5
 80012f2:	2100      	movs	r1, #0
 80012f4:	480b      	ldr	r0, [pc, #44]	; (8001324 <Device_PWM_Channels_ON+0x38>)
 80012f6:	f004 ffbb 	bl	8006270 <TIM_CCxChannelCmd>
TIM_CCxChannelCmd(TIM1, TIM_CHANNEL_2, TIM_CCx_ENABLE | TIM_CCxN_ENABLE);
 80012fa:	2205      	movs	r2, #5
 80012fc:	2104      	movs	r1, #4
 80012fe:	4809      	ldr	r0, [pc, #36]	; (8001324 <Device_PWM_Channels_ON+0x38>)
 8001300:	f004 ffb6 	bl	8006270 <TIM_CCxChannelCmd>
TIM_CCxChannelCmd(TIM1, TIM_CHANNEL_3, TIM_CCx_ENABLE | TIM_CCxN_ENABLE);
 8001304:	2205      	movs	r2, #5
 8001306:	2108      	movs	r1, #8
 8001308:	4806      	ldr	r0, [pc, #24]	; (8001324 <Device_PWM_Channels_ON+0x38>)
 800130a:	f004 ffb1 	bl	8006270 <TIM_CCxChannelCmd>
__HAL_TIM_MOE_ENABLE(&htim1);
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <Device_PWM_Channels_ON+0x3c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001314:	4b04      	ldr	r3, [pc, #16]	; (8001328 <Device_PWM_Channels_ON+0x3c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800131c:	645a      	str	r2, [r3, #68]	; 0x44
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40010000 	.word	0x40010000
 8001328:	20000300 	.word	0x20000300

0800132c <Device_DAC_Out_PA4_CH1>:
{
  LED_GPIO_Port->BSRR = LED_Pin<<16;
}

void Device_DAC_Out_PA4_CH1(float PA4_ch1)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	ed87 0a01 	vstr	s0, [r7, #4]
    HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,(int)(PA4_ch1*4096.0f));
 8001336:	edd7 7a01 	vldr	s15, [r7, #4]
 800133a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800135c <Device_DAC_Out_PA4_CH1+0x30>
 800133e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001342:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001346:	ee17 3a90 	vmov	r3, s15
 800134a:	2200      	movs	r2, #0
 800134c:	2100      	movs	r1, #0
 800134e:	4804      	ldr	r0, [pc, #16]	; (8001360 <Device_DAC_Out_PA4_CH1+0x34>)
 8001350:	f002 f98d 	bl	800366e <HAL_DAC_SetValue>
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	45800000 	.word	0x45800000
 8001360:	200001e4 	.word	0x200001e4

08001364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <HAL_MspInit+0x4c>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	4a0f      	ldr	r2, [pc, #60]	; (80013c0 <HAL_MspInit+0x4c>)
 8001384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001388:	6453      	str	r3, [r2, #68]	; 0x44
 800138a:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <HAL_MspInit+0x4c>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	603b      	str	r3, [r7, #0]
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <HAL_MspInit+0x4c>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	4a08      	ldr	r2, [pc, #32]	; (80013c0 <HAL_MspInit+0x4c>)
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a4:	6413      	str	r3, [r2, #64]	; 0x40
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_MspInit+0x4c>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800

080013c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08e      	sub	sp, #56	; 0x38
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a5d      	ldr	r2, [pc, #372]	; (8001558 <HAL_ADC_MspInit+0x194>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d158      	bne.n	8001498 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]
 80013ea:	4b5c      	ldr	r3, [pc, #368]	; (800155c <HAL_ADC_MspInit+0x198>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	4a5b      	ldr	r2, [pc, #364]	; (800155c <HAL_ADC_MspInit+0x198>)
 80013f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f4:	6453      	str	r3, [r2, #68]	; 0x44
 80013f6:	4b59      	ldr	r3, [pc, #356]	; (800155c <HAL_ADC_MspInit+0x198>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013fe:	623b      	str	r3, [r7, #32]
 8001400:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
 8001406:	4b55      	ldr	r3, [pc, #340]	; (800155c <HAL_ADC_MspInit+0x198>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a54      	ldr	r2, [pc, #336]	; (800155c <HAL_ADC_MspInit+0x198>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b52      	ldr	r3, [pc, #328]	; (800155c <HAL_ADC_MspInit+0x198>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	61fb      	str	r3, [r7, #28]
 800141c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = IU_Pin|Id_Pin;
 800141e:	230a      	movs	r3, #10
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001422:	2303      	movs	r3, #3
 8001424:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142e:	4619      	mov	r1, r3
 8001430:	484b      	ldr	r0, [pc, #300]	; (8001560 <HAL_ADC_MspInit+0x19c>)
 8001432:	f002 fb77 	bl	8003b24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001436:	4b4b      	ldr	r3, [pc, #300]	; (8001564 <HAL_ADC_MspInit+0x1a0>)
 8001438:	4a4b      	ldr	r2, [pc, #300]	; (8001568 <HAL_ADC_MspInit+0x1a4>)
 800143a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800143c:	4b49      	ldr	r3, [pc, #292]	; (8001564 <HAL_ADC_MspInit+0x1a0>)
 800143e:	2200      	movs	r2, #0
 8001440:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001442:	4b48      	ldr	r3, [pc, #288]	; (8001564 <HAL_ADC_MspInit+0x1a0>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001448:	4b46      	ldr	r3, [pc, #280]	; (8001564 <HAL_ADC_MspInit+0x1a0>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800144e:	4b45      	ldr	r3, [pc, #276]	; (8001564 <HAL_ADC_MspInit+0x1a0>)
 8001450:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001454:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001456:	4b43      	ldr	r3, [pc, #268]	; (8001564 <HAL_ADC_MspInit+0x1a0>)
 8001458:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800145c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800145e:	4b41      	ldr	r3, [pc, #260]	; (8001564 <HAL_ADC_MspInit+0x1a0>)
 8001460:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001464:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001466:	4b3f      	ldr	r3, [pc, #252]	; (8001564 <HAL_ADC_MspInit+0x1a0>)
 8001468:	f44f 7280 	mov.w	r2, #256	; 0x100
 800146c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800146e:	4b3d      	ldr	r3, [pc, #244]	; (8001564 <HAL_ADC_MspInit+0x1a0>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001474:	4b3b      	ldr	r3, [pc, #236]	; (8001564 <HAL_ADC_MspInit+0x1a0>)
 8001476:	2200      	movs	r2, #0
 8001478:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800147a:	483a      	ldr	r0, [pc, #232]	; (8001564 <HAL_ADC_MspInit+0x1a0>)
 800147c:	f002 f96c 	bl	8003758 <HAL_DMA_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001486:	f7ff ff6d 	bl	8001364 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a35      	ldr	r2, [pc, #212]	; (8001564 <HAL_ADC_MspInit+0x1a0>)
 800148e:	639a      	str	r2, [r3, #56]	; 0x38
 8001490:	4a34      	ldr	r2, [pc, #208]	; (8001564 <HAL_ADC_MspInit+0x1a0>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001496:	e05a      	b.n	800154e <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC2)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a33      	ldr	r2, [pc, #204]	; (800156c <HAL_ADC_MspInit+0x1a8>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d128      	bne.n	80014f4 <HAL_ADC_MspInit+0x130>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	61bb      	str	r3, [r7, #24]
 80014a6:	4b2d      	ldr	r3, [pc, #180]	; (800155c <HAL_ADC_MspInit+0x198>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	4a2c      	ldr	r2, [pc, #176]	; (800155c <HAL_ADC_MspInit+0x198>)
 80014ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014b0:	6453      	str	r3, [r2, #68]	; 0x44
 80014b2:	4b2a      	ldr	r3, [pc, #168]	; (800155c <HAL_ADC_MspInit+0x198>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014ba:	61bb      	str	r3, [r7, #24]
 80014bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	4b26      	ldr	r3, [pc, #152]	; (800155c <HAL_ADC_MspInit+0x198>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a25      	ldr	r2, [pc, #148]	; (800155c <HAL_ADC_MspInit+0x198>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b23      	ldr	r3, [pc, #140]	; (800155c <HAL_ADC_MspInit+0x198>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = IV_Pin;
 80014da:	2302      	movs	r3, #2
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014de:	2303      	movs	r3, #3
 80014e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IV_GPIO_Port, &GPIO_InitStruct);
 80014e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ea:	4619      	mov	r1, r3
 80014ec:	4820      	ldr	r0, [pc, #128]	; (8001570 <HAL_ADC_MspInit+0x1ac>)
 80014ee:	f002 fb19 	bl	8003b24 <HAL_GPIO_Init>
}
 80014f2:	e02c      	b.n	800154e <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a1e      	ldr	r2, [pc, #120]	; (8001574 <HAL_ADC_MspInit+0x1b0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d127      	bne.n	800154e <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	4b16      	ldr	r3, [pc, #88]	; (800155c <HAL_ADC_MspInit+0x198>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	4a15      	ldr	r2, [pc, #84]	; (800155c <HAL_ADC_MspInit+0x198>)
 8001508:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800150c:	6453      	str	r3, [r2, #68]	; 0x44
 800150e:	4b13      	ldr	r3, [pc, #76]	; (800155c <HAL_ADC_MspInit+0x198>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <HAL_ADC_MspInit+0x198>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a0e      	ldr	r2, [pc, #56]	; (800155c <HAL_ADC_MspInit+0x198>)
 8001524:	f043 0304 	orr.w	r3, r3, #4
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b0c      	ldr	r3, [pc, #48]	; (800155c <HAL_ADC_MspInit+0x198>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0304 	and.w	r3, r3, #4
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IW_Pin;
 8001536:	2304      	movs	r3, #4
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800153a:	2303      	movs	r3, #3
 800153c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IW_GPIO_Port, &GPIO_InitStruct);
 8001542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001546:	4619      	mov	r1, r3
 8001548:	4809      	ldr	r0, [pc, #36]	; (8001570 <HAL_ADC_MspInit+0x1ac>)
 800154a:	f002 faeb 	bl	8003b24 <HAL_GPIO_Init>
}
 800154e:	bf00      	nop
 8001550:	3738      	adds	r7, #56	; 0x38
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40012000 	.word	0x40012000
 800155c:	40023800 	.word	0x40023800
 8001560:	40020000 	.word	0x40020000
 8001564:	20000184 	.word	0x20000184
 8001568:	40026410 	.word	0x40026410
 800156c:	40012100 	.word	0x40012100
 8001570:	40020800 	.word	0x40020800
 8001574:	40012200 	.word	0x40012200

08001578 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a17      	ldr	r2, [pc, #92]	; (80015f4 <HAL_DAC_MspInit+0x7c>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d127      	bne.n	80015ea <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <HAL_DAC_MspInit+0x80>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	4a15      	ldr	r2, [pc, #84]	; (80015f8 <HAL_DAC_MspInit+0x80>)
 80015a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80015a8:	6413      	str	r3, [r2, #64]	; 0x40
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <HAL_DAC_MspInit+0x80>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <HAL_DAC_MspInit+0x80>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a0e      	ldr	r2, [pc, #56]	; (80015f8 <HAL_DAC_MspInit+0x80>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <HAL_DAC_MspInit+0x80>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80015d2:	2330      	movs	r3, #48	; 0x30
 80015d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d6:	2303      	movs	r3, #3
 80015d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	4619      	mov	r1, r3
 80015e4:	4805      	ldr	r0, [pc, #20]	; (80015fc <HAL_DAC_MspInit+0x84>)
 80015e6:	f002 fa9d 	bl	8003b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80015ea:	bf00      	nop
 80015ec:	3728      	adds	r7, #40	; 0x28
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40007400 	.word	0x40007400
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40020000 	.word	0x40020000

08001600 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a4a      	ldr	r2, [pc, #296]	; (8001748 <HAL_SPI_MspInit+0x148>)
 800161e:	4293      	cmp	r3, r2
 8001620:	f040 808d 	bne.w	800173e <HAL_SPI_MspInit+0x13e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001624:	2300      	movs	r3, #0
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	4b48      	ldr	r3, [pc, #288]	; (800174c <HAL_SPI_MspInit+0x14c>)
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	4a47      	ldr	r2, [pc, #284]	; (800174c <HAL_SPI_MspInit+0x14c>)
 800162e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001632:	6413      	str	r3, [r2, #64]	; 0x40
 8001634:	4b45      	ldr	r3, [pc, #276]	; (800174c <HAL_SPI_MspInit+0x14c>)
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	4b41      	ldr	r3, [pc, #260]	; (800174c <HAL_SPI_MspInit+0x14c>)
 8001646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001648:	4a40      	ldr	r2, [pc, #256]	; (800174c <HAL_SPI_MspInit+0x14c>)
 800164a:	f043 0302 	orr.w	r3, r3, #2
 800164e:	6313      	str	r3, [r2, #48]	; 0x30
 8001650:	4b3e      	ldr	r3, [pc, #248]	; (800174c <HAL_SPI_MspInit+0x14c>)
 8001652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	68fb      	ldr	r3, [r7, #12]
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 800165c:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 8001660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166a:	2303      	movs	r3, #3
 800166c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800166e:	2305      	movs	r3, #5
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4619      	mov	r1, r3
 8001678:	4835      	ldr	r0, [pc, #212]	; (8001750 <HAL_SPI_MspInit+0x150>)
 800167a:	f002 fa53 	bl	8003b24 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800167e:	4b35      	ldr	r3, [pc, #212]	; (8001754 <HAL_SPI_MspInit+0x154>)
 8001680:	4a35      	ldr	r2, [pc, #212]	; (8001758 <HAL_SPI_MspInit+0x158>)
 8001682:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001684:	4b33      	ldr	r3, [pc, #204]	; (8001754 <HAL_SPI_MspInit+0x154>)
 8001686:	2200      	movs	r2, #0
 8001688:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800168a:	4b32      	ldr	r3, [pc, #200]	; (8001754 <HAL_SPI_MspInit+0x154>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001690:	4b30      	ldr	r3, [pc, #192]	; (8001754 <HAL_SPI_MspInit+0x154>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001696:	4b2f      	ldr	r3, [pc, #188]	; (8001754 <HAL_SPI_MspInit+0x154>)
 8001698:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800169c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800169e:	4b2d      	ldr	r3, [pc, #180]	; (8001754 <HAL_SPI_MspInit+0x154>)
 80016a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016a4:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016a6:	4b2b      	ldr	r3, [pc, #172]	; (8001754 <HAL_SPI_MspInit+0x154>)
 80016a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ac:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80016ae:	4b29      	ldr	r3, [pc, #164]	; (8001754 <HAL_SPI_MspInit+0x154>)
 80016b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016b4:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016b6:	4b27      	ldr	r3, [pc, #156]	; (8001754 <HAL_SPI_MspInit+0x154>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016bc:	4b25      	ldr	r3, [pc, #148]	; (8001754 <HAL_SPI_MspInit+0x154>)
 80016be:	2200      	movs	r2, #0
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80016c2:	4824      	ldr	r0, [pc, #144]	; (8001754 <HAL_SPI_MspInit+0x154>)
 80016c4:	f002 f848 	bl	8003758 <HAL_DMA_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_SPI_MspInit+0xd2>
    {
      Error_Handler();
 80016ce:	f7ff fe49 	bl	8001364 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a1f      	ldr	r2, [pc, #124]	; (8001754 <HAL_SPI_MspInit+0x154>)
 80016d6:	64da      	str	r2, [r3, #76]	; 0x4c
 80016d8:	4a1e      	ldr	r2, [pc, #120]	; (8001754 <HAL_SPI_MspInit+0x154>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80016de:	4b1f      	ldr	r3, [pc, #124]	; (800175c <HAL_SPI_MspInit+0x15c>)
 80016e0:	4a1f      	ldr	r2, [pc, #124]	; (8001760 <HAL_SPI_MspInit+0x160>)
 80016e2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80016e4:	4b1d      	ldr	r3, [pc, #116]	; (800175c <HAL_SPI_MspInit+0x15c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016ea:	4b1c      	ldr	r3, [pc, #112]	; (800175c <HAL_SPI_MspInit+0x15c>)
 80016ec:	2240      	movs	r2, #64	; 0x40
 80016ee:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016f0:	4b1a      	ldr	r3, [pc, #104]	; (800175c <HAL_SPI_MspInit+0x15c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016f6:	4b19      	ldr	r3, [pc, #100]	; (800175c <HAL_SPI_MspInit+0x15c>)
 80016f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016fc:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016fe:	4b17      	ldr	r3, [pc, #92]	; (800175c <HAL_SPI_MspInit+0x15c>)
 8001700:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001704:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <HAL_SPI_MspInit+0x15c>)
 8001708:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800170c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 800170e:	4b13      	ldr	r3, [pc, #76]	; (800175c <HAL_SPI_MspInit+0x15c>)
 8001710:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001714:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <HAL_SPI_MspInit+0x15c>)
 8001718:	2200      	movs	r2, #0
 800171a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800171c:	4b0f      	ldr	r3, [pc, #60]	; (800175c <HAL_SPI_MspInit+0x15c>)
 800171e:	2200      	movs	r2, #0
 8001720:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001722:	480e      	ldr	r0, [pc, #56]	; (800175c <HAL_SPI_MspInit+0x15c>)
 8001724:	f002 f818 	bl	8003758 <HAL_DMA_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_SPI_MspInit+0x132>
    {
      Error_Handler();
 800172e:	f7ff fe19 	bl	8001364 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a09      	ldr	r2, [pc, #36]	; (800175c <HAL_SPI_MspInit+0x15c>)
 8001736:	649a      	str	r2, [r3, #72]	; 0x48
 8001738:	4a08      	ldr	r2, [pc, #32]	; (800175c <HAL_SPI_MspInit+0x15c>)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800173e:	bf00      	nop
 8001740:	3728      	adds	r7, #40	; 0x28
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40003800 	.word	0x40003800
 800174c:	40023800 	.word	0x40023800
 8001750:	40020400 	.word	0x40020400
 8001754:	20000250 	.word	0x20000250
 8001758:	40026058 	.word	0x40026058
 800175c:	20000348 	.word	0x20000348
 8001760:	40026070 	.word	0x40026070

08001764 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a18      	ldr	r2, [pc, #96]	; (80017d4 <HAL_TIM_Base_MspInit+0x70>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d116      	bne.n	80017a4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <HAL_TIM_Base_MspInit+0x74>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	4a16      	ldr	r2, [pc, #88]	; (80017d8 <HAL_TIM_Base_MspInit+0x74>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6453      	str	r3, [r2, #68]	; 0x44
 8001786:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <HAL_TIM_Base_MspInit+0x74>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	2100      	movs	r1, #0
 8001796:	2019      	movs	r0, #25
 8001798:	f001 feb1 	bl	80034fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800179c:	2019      	movs	r0, #25
 800179e:	f001 feca 	bl	8003536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017a2:	e012      	b.n	80017ca <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0c      	ldr	r2, [pc, #48]	; (80017dc <HAL_TIM_Base_MspInit+0x78>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d10d      	bne.n	80017ca <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <HAL_TIM_Base_MspInit+0x74>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	4a08      	ldr	r2, [pc, #32]	; (80017d8 <HAL_TIM_Base_MspInit+0x74>)
 80017b8:	f043 0302 	orr.w	r3, r3, #2
 80017bc:	6413      	str	r3, [r2, #64]	; 0x40
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_TIM_Base_MspInit+0x74>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]
}
 80017ca:	bf00      	nop
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40010000 	.word	0x40010000
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40000400 	.word	0x40000400

080017e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a21      	ldr	r2, [pc, #132]	; (8001884 <HAL_TIM_MspPostInit+0xa4>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d13c      	bne.n	800187c <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	4b20      	ldr	r3, [pc, #128]	; (8001888 <HAL_TIM_MspPostInit+0xa8>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a1f      	ldr	r2, [pc, #124]	; (8001888 <HAL_TIM_MspPostInit+0xa8>)
 800180c:	f043 0302 	orr.w	r3, r3, #2
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b1d      	ldr	r3, [pc, #116]	; (8001888 <HAL_TIM_MspPostInit+0xa8>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	4b19      	ldr	r3, [pc, #100]	; (8001888 <HAL_TIM_MspPostInit+0xa8>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a18      	ldr	r2, [pc, #96]	; (8001888 <HAL_TIM_MspPostInit+0xa8>)
 8001828:	f043 0310 	orr.w	r3, r3, #16
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b16      	ldr	r3, [pc, #88]	; (8001888 <HAL_TIM_MspPostInit+0xa8>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0310 	and.w	r3, r3, #16
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = VL_Pin|WL_Pin;
 800183a:	2303      	movs	r3, #3
 800183c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800184a:	2301      	movs	r3, #1
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	4619      	mov	r1, r3
 8001854:	480d      	ldr	r0, [pc, #52]	; (800188c <HAL_TIM_MspPostInit+0xac>)
 8001856:	f002 f965 	bl	8003b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UL_Pin|UH_Pin|VH_Pin|WH_Pin;
 800185a:	f44f 532c 	mov.w	r3, #11008	; 0x2b00
 800185e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800186c:	2301      	movs	r3, #1
 800186e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	4619      	mov	r1, r3
 8001876:	4806      	ldr	r0, [pc, #24]	; (8001890 <HAL_TIM_MspPostInit+0xb0>)
 8001878:	f002 f954 	bl	8003b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800187c:	bf00      	nop
 800187e:	3728      	adds	r7, #40	; 0x28
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40010000 	.word	0x40010000
 8001888:	40023800 	.word	0x40023800
 800188c:	40020400 	.word	0x40020400
 8001890:	40021000 	.word	0x40021000

08001894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a6:	e7fe      	b.n	80018a6 <HardFault_Handler+0x4>

080018a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ac:	e7fe      	b.n	80018ac <MemManage_Handler+0x4>

080018ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b2:	e7fe      	b.n	80018b2 <BusFault_Handler+0x4>

080018b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <UsageFault_Handler+0x4>

080018ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e8:	f001 f8bc 	bl	8002a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

static float Bufer_A_B[2];
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018f4:	48b9      	ldr	r0, [pc, #740]	; (8001bdc <TIM1_UP_TIM10_IRQHandler+0x2ec>)
 80018f6:	f003 fdec 	bl	80054d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  /*########################################################################*/
  
  Speed_measure(&speed);
 80018fa:	48b9      	ldr	r0, [pc, #740]	; (8001be0 <TIM1_UP_TIM10_IRQHandler+0x2f0>)
 80018fc:	f000 fa56 	bl	8001dac <Speed_measure>
    Current_measure(i_ABC,Device_ADC_Buf);
 8001900:	49b8      	ldr	r1, [pc, #736]	; (8001be4 <TIM1_UP_TIM10_IRQHandler+0x2f4>)
 8001902:	48b9      	ldr	r0, [pc, #740]	; (8001be8 <TIM1_UP_TIM10_IRQHandler+0x2f8>)
 8001904:	f000 faf8 	bl	8001ef8 <Current_measure>
   
    DSP_K_Conv_ABC_to_ab(i_ABC,i_ab);
 8001908:	49b8      	ldr	r1, [pc, #736]	; (8001bec <TIM1_UP_TIM10_IRQHandler+0x2fc>)
 800190a:	48b7      	ldr	r0, [pc, #732]	; (8001be8 <TIM1_UP_TIM10_IRQHandler+0x2f8>)
 800190c:	f000 fa2a 	bl	8001d64 <DSP_K_Conv_ABC_to_ab>
    
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0) == 1){
 8001910:	2101      	movs	r1, #1
 8001912:	48b7      	ldr	r0, [pc, #732]	; (8001bf0 <TIM1_UP_TIM10_IRQHandler+0x300>)
 8001914:	f002 faa2 	bl	8003e5c <HAL_GPIO_ReadPin>
 8001918:	4603      	mov	r3, r0
 800191a:	2b01      	cmp	r3, #1
 800191c:	d102      	bne.n	8001924 <TIM1_UP_TIM10_IRQHandler+0x34>
    	neww = 50.0f;
 800191e:	4bb5      	ldr	r3, [pc, #724]	; (8001bf4 <TIM1_UP_TIM10_IRQHandler+0x304>)
 8001920:	4ab5      	ldr	r2, [pc, #724]	; (8001bf8 <TIM1_UP_TIM10_IRQHandler+0x308>)
 8001922:	601a      	str	r2, [r3, #0]
    }

    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 1){
 8001924:	2104      	movs	r1, #4
 8001926:	48b2      	ldr	r0, [pc, #712]	; (8001bf0 <TIM1_UP_TIM10_IRQHandler+0x300>)
 8001928:	f002 fa98 	bl	8003e5c <HAL_GPIO_ReadPin>
 800192c:	4603      	mov	r3, r0
 800192e:	2b01      	cmp	r3, #1
 8001930:	d103      	bne.n	800193a <TIM1_UP_TIM10_IRQHandler+0x4a>
    	neww = 0.0f;
 8001932:	4bb0      	ldr	r3, [pc, #704]	; (8001bf4 <TIM1_UP_TIM10_IRQHandler+0x304>)
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
    }

    if (speed.speed_el <= 10){
 800193a:	4ba9      	ldr	r3, [pc, #676]	; (8001be0 <TIM1_UP_TIM10_IRQHandler+0x2f0>)
 800193c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001940:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001944:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194c:	d810      	bhi.n	8001970 <TIM1_UP_TIM10_IRQHandler+0x80>
    	LED_1_GPIO_Port->BSRR = LED_1_Pin;
 800194e:	4bab      	ldr	r3, [pc, #684]	; (8001bfc <TIM1_UP_TIM10_IRQHandler+0x30c>)
 8001950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001954:	619a      	str	r2, [r3, #24]
    	LED_4_GPIO_Port->BSRR = LED_4_Pin<<16;
 8001956:	4ba9      	ldr	r3, [pc, #676]	; (8001bfc <TIM1_UP_TIM10_IRQHandler+0x30c>)
 8001958:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800195c:	619a      	str	r2, [r3, #24]
    	LED_3_GPIO_Port->BSRR = LED_3_Pin<<16;
 800195e:	4ba7      	ldr	r3, [pc, #668]	; (8001bfc <TIM1_UP_TIM10_IRQHandler+0x30c>)
 8001960:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001964:	619a      	str	r2, [r3, #24]
    	LED_2_GPIO_Port->BSRR = LED_2_Pin<<16;
 8001966:	4ba6      	ldr	r3, [pc, #664]	; (8001c00 <TIM1_UP_TIM10_IRQHandler+0x310>)
 8001968:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800196c:	619a      	str	r2, [r3, #24]
 800196e:	e042      	b.n	80019f6 <TIM1_UP_TIM10_IRQHandler+0x106>
    } else if (speed.speed_el <= 25){
 8001970:	4b9b      	ldr	r3, [pc, #620]	; (8001be0 <TIM1_UP_TIM10_IRQHandler+0x2f0>)
 8001972:	edd3 7a06 	vldr	s15, [r3, #24]
 8001976:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800197a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800197e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001982:	d80f      	bhi.n	80019a4 <TIM1_UP_TIM10_IRQHandler+0xb4>
    	LED_1_GPIO_Port->BSRR = LED_1_Pin;
 8001984:	4b9d      	ldr	r3, [pc, #628]	; (8001bfc <TIM1_UP_TIM10_IRQHandler+0x30c>)
 8001986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800198a:	619a      	str	r2, [r3, #24]
    	LED_4_GPIO_Port->BSRR = LED_4_Pin;
 800198c:	4b9b      	ldr	r3, [pc, #620]	; (8001bfc <TIM1_UP_TIM10_IRQHandler+0x30c>)
 800198e:	2240      	movs	r2, #64	; 0x40
 8001990:	619a      	str	r2, [r3, #24]
    	LED_3_GPIO_Port->BSRR = LED_3_Pin<<16;
 8001992:	4b9a      	ldr	r3, [pc, #616]	; (8001bfc <TIM1_UP_TIM10_IRQHandler+0x30c>)
 8001994:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001998:	619a      	str	r2, [r3, #24]
    	LED_2_GPIO_Port->BSRR = LED_2_Pin<<16;
 800199a:	4b99      	ldr	r3, [pc, #612]	; (8001c00 <TIM1_UP_TIM10_IRQHandler+0x310>)
 800199c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019a0:	619a      	str	r2, [r3, #24]
 80019a2:	e028      	b.n	80019f6 <TIM1_UP_TIM10_IRQHandler+0x106>
    } else if (speed.speed_el <= 40){
 80019a4:	4b8e      	ldr	r3, [pc, #568]	; (8001be0 <TIM1_UP_TIM10_IRQHandler+0x2f0>)
 80019a6:	edd3 7a06 	vldr	s15, [r3, #24]
 80019aa:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8001c04 <TIM1_UP_TIM10_IRQHandler+0x314>
 80019ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b6:	d80f      	bhi.n	80019d8 <TIM1_UP_TIM10_IRQHandler+0xe8>
    	LED_1_GPIO_Port->BSRR = LED_1_Pin;
 80019b8:	4b90      	ldr	r3, [pc, #576]	; (8001bfc <TIM1_UP_TIM10_IRQHandler+0x30c>)
 80019ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019be:	619a      	str	r2, [r3, #24]
    	LED_4_GPIO_Port->BSRR = LED_4_Pin;
 80019c0:	4b8e      	ldr	r3, [pc, #568]	; (8001bfc <TIM1_UP_TIM10_IRQHandler+0x30c>)
 80019c2:	2240      	movs	r2, #64	; 0x40
 80019c4:	619a      	str	r2, [r3, #24]
    	LED_3_GPIO_Port->BSRR = LED_3_Pin;
 80019c6:	4b8d      	ldr	r3, [pc, #564]	; (8001bfc <TIM1_UP_TIM10_IRQHandler+0x30c>)
 80019c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019cc:	619a      	str	r2, [r3, #24]
    	LED_2_GPIO_Port->BSRR = LED_2_Pin<<16;
 80019ce:	4b8c      	ldr	r3, [pc, #560]	; (8001c00 <TIM1_UP_TIM10_IRQHandler+0x310>)
 80019d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019d4:	619a      	str	r2, [r3, #24]
 80019d6:	e00e      	b.n	80019f6 <TIM1_UP_TIM10_IRQHandler+0x106>
    } else {
    	LED_1_GPIO_Port->BSRR = LED_1_Pin;
 80019d8:	4b88      	ldr	r3, [pc, #544]	; (8001bfc <TIM1_UP_TIM10_IRQHandler+0x30c>)
 80019da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019de:	619a      	str	r2, [r3, #24]
    	LED_4_GPIO_Port->BSRR = LED_4_Pin;
 80019e0:	4b86      	ldr	r3, [pc, #536]	; (8001bfc <TIM1_UP_TIM10_IRQHandler+0x30c>)
 80019e2:	2240      	movs	r2, #64	; 0x40
 80019e4:	619a      	str	r2, [r3, #24]
    	LED_3_GPIO_Port->BSRR = LED_3_Pin;
 80019e6:	4b85      	ldr	r3, [pc, #532]	; (8001bfc <TIM1_UP_TIM10_IRQHandler+0x30c>)
 80019e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019ec:	619a      	str	r2, [r3, #24]
    	LED_2_GPIO_Port->BSRR = LED_2_Pin;
 80019ee:	4b84      	ldr	r3, [pc, #528]	; (8001c00 <TIM1_UP_TIM10_IRQHandler+0x310>)
 80019f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019f4:	619a      	str	r2, [r3, #24]
    }

  
  if(cnt <= 98){
 80019f6:	4b84      	ldr	r3, [pc, #528]	; (8001c08 <TIM1_UP_TIM10_IRQHandler+0x318>)
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	2b62      	cmp	r3, #98	; 0x62
 80019fc:	d806      	bhi.n	8001a0c <TIM1_UP_TIM10_IRQHandler+0x11c>
    cnt++;
 80019fe:	4b82      	ldr	r3, [pc, #520]	; (8001c08 <TIM1_UP_TIM10_IRQHandler+0x318>)
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	3301      	adds	r3, #1
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	4b80      	ldr	r3, [pc, #512]	; (8001c08 <TIM1_UP_TIM10_IRQHandler+0x318>)
 8001a08:	801a      	strh	r2, [r3, #0]
 8001a0a:	e057      	b.n	8001abc <TIM1_UP_TIM10_IRQHandler+0x1cc>
  }
  else {
    if ((flag != 0.1f)){
 8001a0c:	4b7f      	ldr	r3, [pc, #508]	; (8001c0c <TIM1_UP_TIM10_IRQHandler+0x31c>)
 8001a0e:	edd3 7a00 	vldr	s15, [r3]
 8001a12:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001c10 <TIM1_UP_TIM10_IRQHandler+0x320>
 8001a16:	eef4 7a47 	vcmp.f32	s15, s14
 8001a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1e:	d00d      	beq.n	8001a3c <TIM1_UP_TIM10_IRQHandler+0x14c>
      if ((flag != 0.5f)){
 8001a20:	4b7a      	ldr	r3, [pc, #488]	; (8001c0c <TIM1_UP_TIM10_IRQHandler+0x31c>)
 8001a22:	edd3 7a00 	vldr	s15, [r3]
 8001a26:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001a2a:	eef4 7a47 	vcmp.f32	s15, s14
 8001a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a32:	d003      	beq.n	8001a3c <TIM1_UP_TIM10_IRQHandler+0x14c>
        
        flag = 0;
 8001a34:	4b75      	ldr	r3, [pc, #468]	; (8001c0c <TIM1_UP_TIM10_IRQHandler+0x31c>)
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
        
      }
    }
   
    if((Freq < neww) && (Freq >= 0)){
 8001a3c:	4b75      	ldr	r3, [pc, #468]	; (8001c14 <TIM1_UP_TIM10_IRQHandler+0x324>)
 8001a3e:	ed93 7a00 	vldr	s14, [r3]
 8001a42:	4b6c      	ldr	r3, [pc, #432]	; (8001bf4 <TIM1_UP_TIM10_IRQHandler+0x304>)
 8001a44:	edd3 7a00 	vldr	s15, [r3]
 8001a48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a50:	d513      	bpl.n	8001a7a <TIM1_UP_TIM10_IRQHandler+0x18a>
 8001a52:	4b70      	ldr	r3, [pc, #448]	; (8001c14 <TIM1_UP_TIM10_IRQHandler+0x324>)
 8001a54:	edd3 7a00 	vldr	s15, [r3]
 8001a58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a60:	db0b      	blt.n	8001a7a <TIM1_UP_TIM10_IRQHandler+0x18a>
      Freq = Freq + flag;
 8001a62:	4b6c      	ldr	r3, [pc, #432]	; (8001c14 <TIM1_UP_TIM10_IRQHandler+0x324>)
 8001a64:	ed93 7a00 	vldr	s14, [r3]
 8001a68:	4b68      	ldr	r3, [pc, #416]	; (8001c0c <TIM1_UP_TIM10_IRQHandler+0x31c>)
 8001a6a:	edd3 7a00 	vldr	s15, [r3]
 8001a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a72:	4b68      	ldr	r3, [pc, #416]	; (8001c14 <TIM1_UP_TIM10_IRQHandler+0x324>)
 8001a74:	edc3 7a00 	vstr	s15, [r3]
 8001a78:	e01d      	b.n	8001ab6 <TIM1_UP_TIM10_IRQHandler+0x1c6>
    }
    else if((Freq > neww) && (Freq > 0)){
 8001a7a:	4b66      	ldr	r3, [pc, #408]	; (8001c14 <TIM1_UP_TIM10_IRQHandler+0x324>)
 8001a7c:	ed93 7a00 	vldr	s14, [r3]
 8001a80:	4b5c      	ldr	r3, [pc, #368]	; (8001bf4 <TIM1_UP_TIM10_IRQHandler+0x304>)
 8001a82:	edd3 7a00 	vldr	s15, [r3]
 8001a86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8e:	dd12      	ble.n	8001ab6 <TIM1_UP_TIM10_IRQHandler+0x1c6>
 8001a90:	4b60      	ldr	r3, [pc, #384]	; (8001c14 <TIM1_UP_TIM10_IRQHandler+0x324>)
 8001a92:	edd3 7a00 	vldr	s15, [r3]
 8001a96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9e:	dd0a      	ble.n	8001ab6 <TIM1_UP_TIM10_IRQHandler+0x1c6>
        Freq = Freq - flag;
 8001aa0:	4b5c      	ldr	r3, [pc, #368]	; (8001c14 <TIM1_UP_TIM10_IRQHandler+0x324>)
 8001aa2:	ed93 7a00 	vldr	s14, [r3]
 8001aa6:	4b59      	ldr	r3, [pc, #356]	; (8001c0c <TIM1_UP_TIM10_IRQHandler+0x31c>)
 8001aa8:	edd3 7a00 	vldr	s15, [r3]
 8001aac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab0:	4b58      	ldr	r3, [pc, #352]	; (8001c14 <TIM1_UP_TIM10_IRQHandler+0x324>)
 8001ab2:	edc3 7a00 	vstr	s15, [r3]
    }
  cnt = 0;
 8001ab6:	4b54      	ldr	r3, [pc, #336]	; (8001c08 <TIM1_UP_TIM10_IRQHandler+0x318>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	801a      	strh	r2, [r3, #0]
  }
  
  if (Freq <= 0.0f){
 8001abc:	4b55      	ldr	r3, [pc, #340]	; (8001c14 <TIM1_UP_TIM10_IRQHandler+0x324>)
 8001abe:	edd3 7a00 	vldr	s15, [r3]
 8001ac2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aca:	d803      	bhi.n	8001ad4 <TIM1_UP_TIM10_IRQHandler+0x1e4>
      Freq = 0.0f;
 8001acc:	4b51      	ldr	r3, [pc, #324]	; (8001c14 <TIM1_UP_TIM10_IRQHandler+0x324>)
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
    }
  
  if (Freq >= 250.0f){
 8001ad4:	4b4f      	ldr	r3, [pc, #316]	; (8001c14 <TIM1_UP_TIM10_IRQHandler+0x324>)
 8001ad6:	edd3 7a00 	vldr	s15, [r3]
 8001ada:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001c18 <TIM1_UP_TIM10_IRQHandler+0x328>
 8001ade:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae6:	db02      	blt.n	8001aee <TIM1_UP_TIM10_IRQHandler+0x1fe>
      Freq = 250.0f;
 8001ae8:	4b4a      	ldr	r3, [pc, #296]	; (8001c14 <TIM1_UP_TIM10_IRQHandler+0x324>)
 8001aea:	4a4c      	ldr	r2, [pc, #304]	; (8001c1c <TIM1_UP_TIM10_IRQHandler+0x32c>)
 8001aec:	601a      	str	r2, [r3, #0]
    }
  
  if(Freq <= 50.0f){
 8001aee:	4b49      	ldr	r3, [pc, #292]	; (8001c14 <TIM1_UP_TIM10_IRQHandler+0x324>)
 8001af0:	edd3 7a00 	vldr	s15, [r3]
 8001af4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001c20 <TIM1_UP_TIM10_IRQHandler+0x330>
 8001af8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b00:	d80a      	bhi.n	8001b18 <TIM1_UP_TIM10_IRQHandler+0x228>
    Amp = Freq/50.0f;
 8001b02:	4b44      	ldr	r3, [pc, #272]	; (8001c14 <TIM1_UP_TIM10_IRQHandler+0x324>)
 8001b04:	ed93 7a00 	vldr	s14, [r3]
 8001b08:	eddf 6a45 	vldr	s13, [pc, #276]	; 8001c20 <TIM1_UP_TIM10_IRQHandler+0x330>
 8001b0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b10:	4b44      	ldr	r3, [pc, #272]	; (8001c24 <TIM1_UP_TIM10_IRQHandler+0x334>)
 8001b12:	edc3 7a00 	vstr	s15, [r3]
 8001b16:	e003      	b.n	8001b20 <TIM1_UP_TIM10_IRQHandler+0x230>
  }
  else{
    Amp = 50.0f/50.0f;
 8001b18:	4b42      	ldr	r3, [pc, #264]	; (8001c24 <TIM1_UP_TIM10_IRQHandler+0x334>)
 8001b1a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b1e:	601a      	str	r2, [r3, #0]
  }
  
  /*########################################################################*/
  AngleSpeedMax = 2.0f*PI*50;
 8001b20:	4b41      	ldr	r3, [pc, #260]	; (8001c28 <TIM1_UP_TIM10_IRQHandler+0x338>)
 8001b22:	4a42      	ldr	r2, [pc, #264]	; (8001c2c <TIM1_UP_TIM10_IRQHandler+0x33c>)
 8001b24:	601a      	str	r2, [r3, #0]
  AngleSpeed = 2.0f*PI*Freq;
 8001b26:	4b3b      	ldr	r3, [pc, #236]	; (8001c14 <TIM1_UP_TIM10_IRQHandler+0x324>)
 8001b28:	edd3 7a00 	vldr	s15, [r3]
 8001b2c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001c30 <TIM1_UP_TIM10_IRQHandler+0x340>
 8001b30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b34:	4b3f      	ldr	r3, [pc, #252]	; (8001c34 <TIM1_UP_TIM10_IRQHandler+0x344>)
 8001b36:	edc3 7a00 	vstr	s15, [r3]
  Delta_Angle = AngleSpeed*0.0001f;
 8001b3a:	4b3e      	ldr	r3, [pc, #248]	; (8001c34 <TIM1_UP_TIM10_IRQHandler+0x344>)
 8001b3c:	edd3 7a00 	vldr	s15, [r3]
 8001b40:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001c38 <TIM1_UP_TIM10_IRQHandler+0x348>
 8001b44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b48:	4b3c      	ldr	r3, [pc, #240]	; (8001c3c <TIM1_UP_TIM10_IRQHandler+0x34c>)
 8001b4a:	edc3 7a00 	vstr	s15, [r3]

  DSP_K_Polar_to_AB(Amp, El_Angle, Bufer_A_B);
 8001b4e:	4b35      	ldr	r3, [pc, #212]	; (8001c24 <TIM1_UP_TIM10_IRQHandler+0x334>)
 8001b50:	edd3 7a00 	vldr	s15, [r3]
 8001b54:	4b3a      	ldr	r3, [pc, #232]	; (8001c40 <TIM1_UP_TIM10_IRQHandler+0x350>)
 8001b56:	ed93 7a00 	vldr	s14, [r3]
 8001b5a:	483a      	ldr	r0, [pc, #232]	; (8001c44 <TIM1_UP_TIM10_IRQHandler+0x354>)
 8001b5c:	eef0 0a47 	vmov.f32	s1, s14
 8001b60:	eeb0 0a67 	vmov.f32	s0, s15
 8001b64:	f000 f8d7 	bl	8001d16 <DSP_K_Polar_to_AB>
  El_Angle+=Delta_Angle*Delta_Angle_Gain;
 8001b68:	4b34      	ldr	r3, [pc, #208]	; (8001c3c <TIM1_UP_TIM10_IRQHandler+0x34c>)
 8001b6a:	ed93 7a00 	vldr	s14, [r3]
 8001b6e:	4b36      	ldr	r3, [pc, #216]	; (8001c48 <TIM1_UP_TIM10_IRQHandler+0x358>)
 8001b70:	edd3 7a00 	vldr	s15, [r3]
 8001b74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b78:	4b31      	ldr	r3, [pc, #196]	; (8001c40 <TIM1_UP_TIM10_IRQHandler+0x350>)
 8001b7a:	edd3 7a00 	vldr	s15, [r3]
 8001b7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b82:	4b2f      	ldr	r3, [pc, #188]	; (8001c40 <TIM1_UP_TIM10_IRQHandler+0x350>)
 8001b84:	edc3 7a00 	vstr	s15, [r3]

  DSP_K_SVPWM(TIM1, Bufer_A_B[0], Bufer_A_B[1]);
 8001b88:	4b2e      	ldr	r3, [pc, #184]	; (8001c44 <TIM1_UP_TIM10_IRQHandler+0x354>)
 8001b8a:	edd3 7a00 	vldr	s15, [r3]
 8001b8e:	4b2d      	ldr	r3, [pc, #180]	; (8001c44 <TIM1_UP_TIM10_IRQHandler+0x354>)
 8001b90:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b94:	eef0 0a47 	vmov.f32	s1, s14
 8001b98:	eeb0 0a67 	vmov.f32	s0, s15
 8001b9c:	482b      	ldr	r0, [pc, #172]	; (8001c4c <TIM1_UP_TIM10_IRQHandler+0x35c>)
 8001b9e:	f000 f9ef 	bl	8001f80 <DSP_K_SVPWM>
  // Вывод значения угловой скорости




  Device_DAC_Out_PA4_CH1((speed.speed) / (55.0f));
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <TIM1_UP_TIM10_IRQHandler+0x2f0>)
 8001ba4:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ba8:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001c50 <TIM1_UP_TIM10_IRQHandler+0x360>
 8001bac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001bb0:	eeb0 0a47 	vmov.f32	s0, s14
 8001bb4:	f7ff fbba 	bl	800132c <Device_DAC_Out_PA4_CH1>
   //Device_DAC_Out_PA5_CH2(Delta_Angle);

  // Вывод значения задания скорости
     //Device_DAC_Out_PA5_CH2(neww);

 if(El_Angle>=8*PI) El_Angle = 0.0f;
 8001bb8:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <TIM1_UP_TIM10_IRQHandler+0x350>)
 8001bba:	edd3 7a00 	vldr	s15, [r3]
 8001bbe:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001c54 <TIM1_UP_TIM10_IRQHandler+0x364>
 8001bc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bca:	da00      	bge.n	8001bce <TIM1_UP_TIM10_IRQHandler+0x2de>
  
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001bcc:	e003      	b.n	8001bd6 <TIM1_UP_TIM10_IRQHandler+0x2e6>
 if(El_Angle>=8*PI) El_Angle = 0.0f;
 8001bce:	4b1c      	ldr	r3, [pc, #112]	; (8001c40 <TIM1_UP_TIM10_IRQHandler+0x350>)
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000300 	.word	0x20000300
 8001be0:	200003d8 	.word	0x200003d8
 8001be4:	200002f8 	.word	0x200002f8
 8001be8:	200003c0 	.word	0x200003c0
 8001bec:	200003b0 	.word	0x200003b0
 8001bf0:	40020c00 	.word	0x40020c00
 8001bf4:	200003f4 	.word	0x200003f4
 8001bf8:	42480000 	.word	0x42480000
 8001bfc:	40020800 	.word	0x40020800
 8001c00:	40020000 	.word	0x40020000
 8001c04:	42200000 	.word	0x42200000
 8001c08:	200003b8 	.word	0x200003b8
 8001c0c:	20000004 	.word	0x20000004
 8001c10:	3dcccccd 	.word	0x3dcccccd
 8001c14:	200003cc 	.word	0x200003cc
 8001c18:	437a0000 	.word	0x437a0000
 8001c1c:	437a0000 	.word	0x437a0000
 8001c20:	42480000 	.word	0x42480000
 8001c24:	200003bc 	.word	0x200003bc
 8001c28:	200003ac 	.word	0x200003ac
 8001c2c:	439d1463 	.word	0x439d1463
 8001c30:	40c90fdb 	.word	0x40c90fdb
 8001c34:	200003a8 	.word	0x200003a8
 8001c38:	38d1b717 	.word	0x38d1b717
 8001c3c:	200003d0 	.word	0x200003d0
 8001c40:	200003d4 	.word	0x200003d4
 8001c44:	20000098 	.word	0x20000098
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	40010000 	.word	0x40010000
 8001c50:	425c0000 	.word	0x425c0000
 8001c54:	41c90fdb 	.word	0x41c90fdb

08001c58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c5c:	4b16      	ldr	r3, [pc, #88]	; (8001cb8 <SystemInit+0x60>)
 8001c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c62:	4a15      	ldr	r2, [pc, #84]	; (8001cb8 <SystemInit+0x60>)
 8001c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001c6c:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <SystemInit+0x64>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a12      	ldr	r2, [pc, #72]	; (8001cbc <SystemInit+0x64>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c78:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <SystemInit+0x64>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001c7e:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <SystemInit+0x64>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a0e      	ldr	r2, [pc, #56]	; (8001cbc <SystemInit+0x64>)
 8001c84:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001c88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c8c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <SystemInit+0x64>)
 8001c90:	4a0b      	ldr	r2, [pc, #44]	; (8001cc0 <SystemInit+0x68>)
 8001c92:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <SystemInit+0x64>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <SystemInit+0x64>)
 8001c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <SystemInit+0x64>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ca6:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <SystemInit+0x60>)
 8001ca8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cac:	609a      	str	r2, [r3, #8]
#endif
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	e000ed00 	.word	0xe000ed00
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	24003010 	.word	0x24003010

08001cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cfc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001cc8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001cca:	e003      	b.n	8001cd4 <LoopCopyDataInit>

08001ccc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001cce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001cd0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001cd2:	3104      	adds	r1, #4

08001cd4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001cd4:	480b      	ldr	r0, [pc, #44]	; (8001d04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001cd8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001cda:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001cdc:	d3f6      	bcc.n	8001ccc <CopyDataInit>
  ldr  r2, =_sbss
 8001cde:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ce0:	e002      	b.n	8001ce8 <LoopFillZerobss>

08001ce2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ce2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ce4:	f842 3b04 	str.w	r3, [r2], #4

08001ce8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001cea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001cec:	d3f9      	bcc.n	8001ce2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cee:	f7ff ffb3 	bl	8001c58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cf2:	f004 fbcb 	bl	800648c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cf6:	f7fe fdfd 	bl	80008f4 <main>
  bx  lr    
 8001cfa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001cfc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d00:	08006d7c 	.word	0x08006d7c
  ldr  r0, =_sdata
 8001d04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d08:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8001d0c:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8001d10:	200003fc 	.word	0x200003fc

08001d14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d14:	e7fe      	b.n	8001d14 <ADC_IRQHandler>

08001d16 <DSP_K_Polar_to_AB>:
}
/*
DSP_K_Polar_to_AB
*/
void DSP_K_Polar_to_AB(float Amp, float Rad, float *Bufer_A_B)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b084      	sub	sp, #16
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	ed87 0a03 	vstr	s0, [r7, #12]
 8001d20:	edc7 0a02 	vstr	s1, [r7, #8]
 8001d24:	6078      	str	r0, [r7, #4]
*Bufer_A_B     = Amp * arm_cos_f32(Rad);
 8001d26:	ed97 0a02 	vldr	s0, [r7, #8]
 8001d2a:	f7fe fcdb 	bl	80006e4 <arm_cos_f32>
 8001d2e:	eeb0 7a40 	vmov.f32	s14, s0
 8001d32:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	edc3 7a00 	vstr	s15, [r3]
*(Bufer_A_B+1) = Amp * arm_sin_f32(Rad);
 8001d40:	ed97 0a02 	vldr	s0, [r7, #8]
 8001d44:	f7fe fd4a 	bl	80007dc <arm_sin_f32>
 8001d48:	eeb0 7a40 	vmov.f32	s14, s0
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3304      	adds	r3, #4
 8001d50:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d58:	edc3 7a00 	vstr	s15, [r3]
}
 8001d5c:	bf00      	nop
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <DSP_K_Conv_ABC_to_ab>:
/*
DSP_K_Conv_ABC_to_ab

*/
void DSP_K_Conv_ABC_to_ab(float *A_B_C, float *a_b)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]

a_b[0] = A_B_C[0]*1.0f;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	601a      	str	r2, [r3, #0]
a_b[1] = 1.0f/SQRT3*(A_B_C[1]-A_B_C[2])*1.0f;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3304      	adds	r3, #4
 8001d7a:	ed93 7a00 	vldr	s14, [r3]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3308      	adds	r3, #8
 8001d82:	edd3 7a00 	vldr	s15, [r3]
 8001d86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001da8 <DSP_K_Conv_ABC_to_ab+0x44>
 8001d92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d96:	edc3 7a00 	vstr	s15, [r3]

}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	3f13cd3a 	.word	0x3f13cd3a

08001dac <Speed_measure>:

/*
Encoder KUBLER speed measure
*/

void Speed_measure(Speed_structure *Spd){
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
    
  
 if(Spd->cnt_s < 19){
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	2b12      	cmp	r3, #18
 8001dba:	d806      	bhi.n	8001dca <Speed_measure+0x1e>
    Spd->cnt_s++;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	801a      	strh	r2, [r3, #0]
    Spd->speed_el = 0;
  }
  Spd->cnt_s = 0;
  }

}
 8001dc8:	e08b      	b.n	8001ee2 <Speed_measure+0x136>
  Spd->angle_f[4] = Spd->angle_f[3];
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	891a      	ldrh	r2, [r3, #8]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	815a      	strh	r2, [r3, #10]
  Spd->angle_f[3] = Spd->angle_f[2];
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	88da      	ldrh	r2, [r3, #6]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	811a      	strh	r2, [r3, #8]
  Spd->angle_f[2] = Spd->angle_f[1];
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	889a      	ldrh	r2, [r3, #4]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	80da      	strh	r2, [r3, #6]
  Spd->angle_f[1] = Spd->angle_f[0];
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	885a      	ldrh	r2, [r3, #2]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	809a      	strh	r2, [r3, #4]
  if(Spd->angle_f[0] != Spd->angle_f[1]){
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	885a      	ldrh	r2, [r3, #2]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	889b      	ldrh	r3, [r3, #4]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d007      	beq.n	8001e06 <Speed_measure+0x5a>
    Spd->angle_d[0] = Spd->angle_f[0] - Spd->angle_f[1];
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	885a      	ldrh	r2, [r3, #2]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	889b      	ldrh	r3, [r3, #4]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	819a      	strh	r2, [r3, #12]
  if(Spd->angle_f[1] != Spd->angle_f[2]){
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	889a      	ldrh	r2, [r3, #4]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	88db      	ldrh	r3, [r3, #6]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d007      	beq.n	8001e22 <Speed_measure+0x76>
    Spd->angle_d[1] = Spd->angle_f[1] - Spd->angle_f[2];
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	889a      	ldrh	r2, [r3, #4]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	88db      	ldrh	r3, [r3, #6]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	81da      	strh	r2, [r3, #14]
  if(Spd->angle_f[2] != Spd->angle_f[3]){
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	88da      	ldrh	r2, [r3, #6]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	891b      	ldrh	r3, [r3, #8]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d007      	beq.n	8001e3e <Speed_measure+0x92>
    Spd->angle_d[2] = Spd->angle_f[2] - Spd->angle_f[3];
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	88da      	ldrh	r2, [r3, #6]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	891b      	ldrh	r3, [r3, #8]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	821a      	strh	r2, [r3, #16]
  if(Spd->angle_f[3] != Spd->angle_f[4]){
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	891a      	ldrh	r2, [r3, #8]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	895b      	ldrh	r3, [r3, #10]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d007      	beq.n	8001e5a <Speed_measure+0xae>
    Spd->angle_d[3] = Spd->angle_f[3] - Spd->angle_f[4];
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	891a      	ldrh	r2, [r3, #8]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	895b      	ldrh	r3, [r3, #10]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	825a      	strh	r2, [r3, #18]
  if((Spd->angle_d[0] - Spd->angle_d[1]) < 2){
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	899b      	ldrh	r3, [r3, #12]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	89db      	ldrh	r3, [r3, #14]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	dc1c      	bgt.n	8001ea4 <Speed_measure+0xf8>
    if((Spd->angle_d[1] - Spd->angle_d[2]) < 2){
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	89db      	ldrh	r3, [r3, #14]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	8a1b      	ldrh	r3, [r3, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	dc14      	bgt.n	8001ea4 <Speed_measure+0xf8>
      if((Spd->angle_d[2] - Spd->angle_d[3]) < 2){
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	8a1b      	ldrh	r3, [r3, #16]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	8a5b      	ldrh	r3, [r3, #18]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	dc0c      	bgt.n	8001ea4 <Speed_measure+0xf8>
        Spd->speed = Spd->angle_d[2]*0.061f;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	8a1b      	ldrh	r3, [r3, #16]
 8001e8e:	ee07 3a90 	vmov	s15, r3
 8001e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e96:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001ef0 <Speed_measure+0x144>
 8001e9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	edc3 7a05 	vstr	s15, [r3, #20]
  Spd->speed_el = Spd->speed*3.0f;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	edd3 7a05 	vldr	s15, [r3, #20]
 8001eaa:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001eae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	edc3 7a06 	vstr	s15, [r3, #24]
  if(Spd->speed_el > 200){
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	edd3 7a06 	vldr	s15, [r3, #24]
 8001ebe:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001ef4 <Speed_measure+0x148>
 8001ec2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eca:	dd07      	ble.n	8001edc <Speed_measure+0x130>
    Spd->speed = 0;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	615a      	str	r2, [r3, #20]
    Spd->speed_el = 0;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
  Spd->cnt_s = 0;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	801a      	strh	r2, [r3, #0]
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	3d79db23 	.word	0x3d79db23
 8001ef4:	43480000 	.word	0x43480000

08001ef8 <Current_measure>:

void Current_measure(float *iABC, unsigned short *ADC_Buf){
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
    
  iABC[0] = (float)((ADC_Buf[0]>>2) - 589) / 512;            //i_U
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	089b      	lsrs	r3, r3, #2
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	f2a3 234d 	subw	r3, r3, #589	; 0x24d
 8001f0e:	ee07 3a90 	vmov	s15, r3
 8001f12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f16:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001f7c <Current_measure+0x84>
 8001f1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	edc3 7a00 	vstr	s15, [r3]
  iABC[1] = (float)((ADC_Buf[1]>>2) - 587) / 512;            //i_V
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	3302      	adds	r3, #2
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	089b      	lsrs	r3, r3, #2
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	f2a3 234b 	subw	r3, r3, #587	; 0x24b
 8001f32:	ee07 3a90 	vmov	s15, r3
 8001f36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001f7c <Current_measure+0x84>
 8001f42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f46:	edc3 7a00 	vstr	s15, [r3]
  iABC[2] = (float)((ADC_Buf[2]>>2) - 585) / 512;            //i_W
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	089b      	lsrs	r3, r3, #2
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8001f58:	ee07 3a90 	vmov	s15, r3
 8001f5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3308      	adds	r3, #8
 8001f64:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001f7c <Current_measure+0x84>
 8001f68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f6c:	edc3 7a00 	vstr	s15, [r3]
  
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	44000000 	.word	0x44000000

08001f80 <DSP_K_SVPWM>:

/*
DSP_K_PWM_TIM1_Blocked_4VT
*/
void DSP_K_SVPWM(TIM_TypeDef *Tim, float A, float B)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08e      	sub	sp, #56	; 0x38
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	ed87 0a02 	vstr	s0, [r7, #8]
 8001f8c:	edc7 0a01 	vstr	s1, [r7, #4]
 
static float bufer[2];

float f_sin      = 0.0f;
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	637b      	str	r3, [r7, #52]	; 0x34
float f_sin_0_60 = 0.0f;
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	633b      	str	r3, [r7, #48]	; 0x30

float f_cos      = 0.0f;
 8001f9c:	f04f 0300 	mov.w	r3, #0
 8001fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
float f_cos_0_60 = 0.0f;
 8001fa2:	f04f 0300 	mov.w	r3, #0
 8001fa6:	62bb      	str	r3, [r7, #40]	; 0x28
 
static float module     = 0.0f;

float Tb1 = 0.0f;
 8001fa8:	f04f 0300 	mov.w	r3, #0
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
float Tb2 = 0.0f;
 8001fae:	f04f 0300 	mov.w	r3, #0
 8001fb2:	623b      	str	r3, [r7, #32]
float T0  = 0.0f;
 8001fb4:	f04f 0300 	mov.w	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]

float t1 = 0.0f;
 8001fba:	f04f 0300 	mov.w	r3, #0
 8001fbe:	61bb      	str	r3, [r7, #24]
float t2 = 0.0f;
 8001fc0:	f04f 0300 	mov.w	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
float t3  = 0.0f;
 8001fc6:	f04f 0300 	mov.w	r3, #0
 8001fca:	613b      	str	r3, [r7, #16]


bufer[0]=A;
 8001fcc:	4adb      	ldr	r2, [pc, #876]	; (800233c <DSP_K_SVPWM+0x3bc>)
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	6013      	str	r3, [r2, #0]
bufer[1]=B;
 8001fd2:	4ada      	ldr	r2, [pc, #872]	; (800233c <DSP_K_SVPWM+0x3bc>)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6053      	str	r3, [r2, #4]
arm_cmplx_mag_f32(bufer,&module,2);
 8001fd8:	2202      	movs	r2, #2
 8001fda:	49d9      	ldr	r1, [pc, #868]	; (8002340 <DSP_K_SVPWM+0x3c0>)
 8001fdc:	48d7      	ldr	r0, [pc, #860]	; (800233c <DSP_K_SVPWM+0x3bc>)
 8001fde:	f7fe fa6f 	bl	80004c0 <arm_cmplx_mag_f32>

f_sin = bufer[1] / module;
 8001fe2:	4bd6      	ldr	r3, [pc, #856]	; (800233c <DSP_K_SVPWM+0x3bc>)
 8001fe4:	edd3 6a01 	vldr	s13, [r3, #4]
 8001fe8:	4bd5      	ldr	r3, [pc, #852]	; (8002340 <DSP_K_SVPWM+0x3c0>)
 8001fea:	ed93 7a00 	vldr	s14, [r3]
 8001fee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ff2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
f_cos = bufer[0] / module;
 8001ff6:	4bd1      	ldr	r3, [pc, #836]	; (800233c <DSP_K_SVPWM+0x3bc>)
 8001ff8:	edd3 6a00 	vldr	s13, [r3]
 8001ffc:	4bd0      	ldr	r3, [pc, #832]	; (8002340 <DSP_K_SVPWM+0x3c0>)
 8001ffe:	ed93 7a00 	vldr	s14, [r3]
 8002002:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002006:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

if(module==0)
 800200a:	4bcd      	ldr	r3, [pc, #820]	; (8002340 <DSP_K_SVPWM+0x3c0>)
 800200c:	edd3 7a00 	vldr	s15, [r3]
 8002010:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002018:	d119      	bne.n	800204e <DSP_K_SVPWM+0xce>
{
Tim->CCR1 = (int)Tim->ARR/2;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201e:	0fda      	lsrs	r2, r3, #31
 8002020:	4413      	add	r3, r2
 8002022:	105b      	asrs	r3, r3, #1
 8002024:	461a      	mov	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	635a      	str	r2, [r3, #52]	; 0x34
Tim->CCR2 = (int)Tim->ARR/2;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202e:	0fda      	lsrs	r2, r3, #31
 8002030:	4413      	add	r3, r2
 8002032:	105b      	asrs	r3, r3, #1
 8002034:	461a      	mov	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	639a      	str	r2, [r3, #56]	; 0x38
Tim->CCR3 = (int)Tim->ARR/2;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203e:	0fda      	lsrs	r2, r3, #31
 8002040:	4413      	add	r3, r2
 8002042:	105b      	asrs	r3, r3, #1
 8002044:	461a      	mov	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	63da      	str	r2, [r3, #60]	; 0x3c
//sin_data = arm_sin_f32(0.01f);
//Tick=DWT_CYCCNT;



}
 800204a:	f000 bcad 	b.w	80029a8 <DSP_K_SVPWM+0xa28>
 else if((f_sin >= sin_0) && (f_sin < sin_60)  &&\
 800204e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002052:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800205a:	f2c0 80a9 	blt.w	80021b0 <DSP_K_SVPWM+0x230>
 800205e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002062:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 8002348 <DSP_K_SVPWM+0x3c8>
 8002066:	eef4 7ac7 	vcmpe.f32	s15, s14
 800206a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206e:	f140 809f 	bpl.w	80021b0 <DSP_K_SVPWM+0x230>
 8002072:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002076:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800207a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800207e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002082:	f340 8095 	ble.w	80021b0 <DSP_K_SVPWM+0x230>
    (f_cos > cos_60) && (f_cos <= cos_0) )
 8002086:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800208a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800208e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002096:	f200 808b 	bhi.w	80021b0 <DSP_K_SVPWM+0x230>
 f_sin_0_60 = f_sin;
 800209a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209c:	633b      	str	r3, [r7, #48]	; 0x30
 f_cos_0_60 = f_cos;
 800209e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a0:	62bb      	str	r3, [r7, #40]	; 0x28
 Tb1 = module * (sin_60 * f_cos_0_60 - cos_60 * f_sin_0_60);
 80020a2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80020a6:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8002348 <DSP_K_SVPWM+0x3c8>
 80020aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020ae:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80020b2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80020b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80020ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020be:	4ba0      	ldr	r3, [pc, #640]	; (8002340 <DSP_K_SVPWM+0x3c0>)
 80020c0:	edd3 7a00 	vldr	s15, [r3]
 80020c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 Tb2 = module * f_sin_0_60;
 80020cc:	4b9c      	ldr	r3, [pc, #624]	; (8002340 <DSP_K_SVPWM+0x3c0>)
 80020ce:	edd3 7a00 	vldr	s15, [r3]
 80020d2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80020d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020da:	edc7 7a08 	vstr	s15, [r7, #32]
 T0  = 0.5f*(1.0f-Tb1-Tb2);
 80020de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80020e2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80020e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020ea:	edd7 7a08 	vldr	s15, [r7, #32]
 80020ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020f2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80020f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020fa:	edc7 7a07 	vstr	s15, [r7, #28]
 t1 = Tb1+Tb2+T0;
 80020fe:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002102:	edd7 7a08 	vldr	s15, [r7, #32]
 8002106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800210a:	ed97 7a07 	vldr	s14, [r7, #28]
 800210e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002112:	edc7 7a06 	vstr	s15, [r7, #24]
 t2 = Tb2+T0;
 8002116:	ed97 7a08 	vldr	s14, [r7, #32]
 800211a:	edd7 7a07 	vldr	s15, [r7, #28]
 800211e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002122:	edc7 7a05 	vstr	s15, [r7, #20]
 t3 = Tb1+T0;
 8002126:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800212a:	edd7 7a07 	vldr	s15, [r7, #28]
 800212e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002132:	edc7 7a04 	vstr	s15, [r7, #16]
Tim->CCR1 = (int)(Tim->ARR*t1+0);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213a:	ee07 3a90 	vmov	s15, r3
 800213e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002142:	edd7 7a06 	vldr	s15, [r7, #24]
 8002146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800214a:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8002344 <DSP_K_SVPWM+0x3c4>
 800214e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002152:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002156:	ee17 2a90 	vmov	r2, s15
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	635a      	str	r2, [r3, #52]	; 0x34
Tim->CCR2 = (int)(Tim->ARR*t2+0);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002162:	ee07 3a90 	vmov	s15, r3
 8002166:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800216a:	edd7 7a05 	vldr	s15, [r7, #20]
 800216e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002172:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8002344 <DSP_K_SVPWM+0x3c4>
 8002176:	ee77 7a87 	vadd.f32	s15, s15, s14
 800217a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800217e:	ee17 2a90 	vmov	r2, s15
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	639a      	str	r2, [r3, #56]	; 0x38
Tim->CCR3 = (int)(Tim->ARR*T0+0);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218a:	ee07 3a90 	vmov	s15, r3
 800218e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002192:	edd7 7a07 	vldr	s15, [r7, #28]
 8002196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800219a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8002344 <DSP_K_SVPWM+0x3c4>
 800219e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80021a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021a6:	ee17 2a90 	vmov	r2, s15
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80021ae:	e3fb      	b.n	80029a8 <DSP_K_SVPWM+0xa28>
  else if((f_sin >= sin_60)   &&\
 80021b0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80021b4:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8002348 <DSP_K_SVPWM+0x3c8>
 80021b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c0:	f2c0 80c4 	blt.w	800234c <DSP_K_SVPWM+0x3cc>
 80021c4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80021c8:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80021cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d4:	f340 80ba 	ble.w	800234c <DSP_K_SVPWM+0x3cc>
    (f_cos > cos_120) && (f_cos <= cos_60) )
 80021d8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80021dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80021e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e8:	f200 80b0 	bhi.w	800234c <DSP_K_SVPWM+0x3cc>
 f_sin_0_60 = f_sin * cos_60 - sin_60 * f_cos;
 80021ec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80021f0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80021f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021f8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80021fc:	eddf 6a52 	vldr	s13, [pc, #328]	; 8002348 <DSP_K_SVPWM+0x3c8>
 8002200:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002204:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002208:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 f_cos_0_60 = f_cos * cos_60 + f_sin * sin_60;
 800220c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002210:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002214:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002218:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800221c:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8002348 <DSP_K_SVPWM+0x3c8>
 8002220:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002228:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 Tb1 = module * (sin_60 * f_cos_0_60 - cos_60 * f_sin_0_60);
 800222c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002230:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8002348 <DSP_K_SVPWM+0x3c8>
 8002234:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002238:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800223c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002240:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002244:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002248:	4b3d      	ldr	r3, [pc, #244]	; (8002340 <DSP_K_SVPWM+0x3c0>)
 800224a:	edd3 7a00 	vldr	s15, [r3]
 800224e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002252:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 Tb2 = module * f_sin_0_60;
 8002256:	4b3a      	ldr	r3, [pc, #232]	; (8002340 <DSP_K_SVPWM+0x3c0>)
 8002258:	edd3 7a00 	vldr	s15, [r3]
 800225c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002264:	edc7 7a08 	vstr	s15, [r7, #32]
 T0  = 0.5f*(1.0f-Tb1-Tb2);
 8002268:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800226c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002270:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002274:	edd7 7a08 	vldr	s15, [r7, #32]
 8002278:	ee77 7a67 	vsub.f32	s15, s14, s15
 800227c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002280:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002284:	edc7 7a07 	vstr	s15, [r7, #28]
 t1 = Tb1+Tb2+T0;
 8002288:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800228c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002290:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002294:	ed97 7a07 	vldr	s14, [r7, #28]
 8002298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800229c:	edc7 7a06 	vstr	s15, [r7, #24]
 t2 = Tb2+T0;
 80022a0:	ed97 7a08 	vldr	s14, [r7, #32]
 80022a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80022a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ac:	edc7 7a05 	vstr	s15, [r7, #20]
 t3 = Tb1+T0;
 80022b0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80022b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80022b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022bc:	edc7 7a04 	vstr	s15, [r7, #16]
Tim->CCR1 = (int)(Tim->ARR*t3+0);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c4:	ee07 3a90 	vmov	s15, r3
 80022c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80022d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022d4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002344 <DSP_K_SVPWM+0x3c4>
 80022d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022e0:	ee17 2a90 	vmov	r2, s15
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	635a      	str	r2, [r3, #52]	; 0x34
Tim->CCR2 = (int)(Tim->ARR*t1+0);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ec:	ee07 3a90 	vmov	s15, r3
 80022f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80022f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022fc:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002344 <DSP_K_SVPWM+0x3c4>
 8002300:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002304:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002308:	ee17 2a90 	vmov	r2, s15
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	639a      	str	r2, [r3, #56]	; 0x38
Tim->CCR3 = (int)(Tim->ARR*T0+0);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002314:	ee07 3a90 	vmov	s15, r3
 8002318:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800231c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002324:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002344 <DSP_K_SVPWM+0x3c4>
 8002328:	ee77 7a87 	vadd.f32	s15, s15, s14
 800232c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002330:	ee17 2a90 	vmov	r2, s15
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	63da      	str	r2, [r3, #60]	; 0x3c
 8002338:	e336      	b.n	80029a8 <DSP_K_SVPWM+0xa28>
 800233a:	bf00      	nop
 800233c:	200000a0 	.word	0x200000a0
 8002340:	200000a8 	.word	0x200000a8
 8002344:	00000000 	.word	0x00000000
 8002348:	3f5db3d7 	.word	0x3f5db3d7
 else if((f_sin > sin_180) && (f_sin <= sin_120)  &&\
 800234c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002350:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002358:	f340 80c5 	ble.w	80024e6 <DSP_K_SVPWM+0x566>
 800235c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002360:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8002348 <DSP_K_SVPWM+0x3c8>
 8002364:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800236c:	f200 80bb 	bhi.w	80024e6 <DSP_K_SVPWM+0x566>
 8002370:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002374:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002378:	eef4 7ac7 	vcmpe.f32	s15, s14
 800237c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002380:	f340 80b1 	ble.w	80024e6 <DSP_K_SVPWM+0x566>
    (f_cos > cos_180) && (f_cos <= cos_120) )
 8002384:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002388:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800238c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002394:	f200 80a7 	bhi.w	80024e6 <DSP_K_SVPWM+0x566>
 f_sin_0_60 = f_sin * cos_120 - sin_120 * f_cos;
 8002398:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800239c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80023a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023a4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80023a8:	ed5f 6a19 	vldr	s13, [pc, #-100]	; 8002348 <DSP_K_SVPWM+0x3c8>
 80023ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80023b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023b4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 f_cos_0_60 = f_cos * cos_120 + f_sin * sin_120;
 80023b8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80023bc:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80023c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023c4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80023c8:	ed5f 6a21 	vldr	s13, [pc, #-132]	; 8002348 <DSP_K_SVPWM+0x3c8>
 80023cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80023d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 Tb1 = module * (sin_60 * f_cos_0_60 - cos_60 * f_sin_0_60);
 80023d8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80023dc:	ed1f 7a26 	vldr	s14, [pc, #-152]	; 8002348 <DSP_K_SVPWM+0x3c8>
 80023e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023e4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80023e8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80023ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80023f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023f4:	4b9f      	ldr	r3, [pc, #636]	; (8002674 <DSP_K_SVPWM+0x6f4>)
 80023f6:	edd3 7a00 	vldr	s15, [r3]
 80023fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023fe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 Tb2 = module * f_sin_0_60;
 8002402:	4b9c      	ldr	r3, [pc, #624]	; (8002674 <DSP_K_SVPWM+0x6f4>)
 8002404:	edd3 7a00 	vldr	s15, [r3]
 8002408:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800240c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002410:	edc7 7a08 	vstr	s15, [r7, #32]
 T0  = 0.5f*(1.0f-Tb1-Tb2);
 8002414:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002418:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800241c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002420:	edd7 7a08 	vldr	s15, [r7, #32]
 8002424:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002428:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800242c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002430:	edc7 7a07 	vstr	s15, [r7, #28]
 t1 = Tb1+Tb2+T0;
 8002434:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002438:	edd7 7a08 	vldr	s15, [r7, #32]
 800243c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002440:	ed97 7a07 	vldr	s14, [r7, #28]
 8002444:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002448:	edc7 7a06 	vstr	s15, [r7, #24]
 t2 = Tb2+T0;
 800244c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002450:	edd7 7a07 	vldr	s15, [r7, #28]
 8002454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002458:	edc7 7a05 	vstr	s15, [r7, #20]
 t3 = Tb1+T0;
 800245c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002460:	edd7 7a07 	vldr	s15, [r7, #28]
 8002464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002468:	edc7 7a04 	vstr	s15, [r7, #16]
Tim->CCR1 = (int)(Tim->ARR*T0+0);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	ee07 3a90 	vmov	s15, r3
 8002474:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002478:	edd7 7a07 	vldr	s15, [r7, #28]
 800247c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002480:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8002678 <DSP_K_SVPWM+0x6f8>
 8002484:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002488:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800248c:	ee17 2a90 	vmov	r2, s15
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	635a      	str	r2, [r3, #52]	; 0x34
Tim->CCR2 = (int)(Tim->ARR*t1+0);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002498:	ee07 3a90 	vmov	s15, r3
 800249c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80024a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002678 <DSP_K_SVPWM+0x6f8>
 80024ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024b4:	ee17 2a90 	vmov	r2, s15
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	639a      	str	r2, [r3, #56]	; 0x38
Tim->CCR3 = (int)(Tim->ARR*t2+0);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c0:	ee07 3a90 	vmov	s15, r3
 80024c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80024cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d0:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002678 <DSP_K_SVPWM+0x6f8>
 80024d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024dc:	ee17 2a90 	vmov	r2, s15
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80024e4:	e260      	b.n	80029a8 <DSP_K_SVPWM+0xa28>
  else if((f_sin > sin_240) && (f_sin <= sin_180)  &&\
 80024e6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80024ea:	ed9f 7a64 	vldr	s14, [pc, #400]	; 800267c <DSP_K_SVPWM+0x6fc>
 80024ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f6:	f340 80c5 	ble.w	8002684 <DSP_K_SVPWM+0x704>
 80024fa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80024fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002506:	f200 80bd 	bhi.w	8002684 <DSP_K_SVPWM+0x704>
 800250a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800250e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002512:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251a:	f2c0 80b3 	blt.w	8002684 <DSP_K_SVPWM+0x704>
    (f_cos >= cos_180) && (f_cos < cos_240) )
 800251e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002522:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002526:	eef4 7ac7 	vcmpe.f32	s15, s14
 800252a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800252e:	f140 80a9 	bpl.w	8002684 <DSP_K_SVPWM+0x704>
 f_sin_0_60 = f_sin * cos_180 - sin_180 * f_cos;
 8002532:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002536:	eeb1 7a67 	vneg.f32	s14, s15
 800253a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800253e:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8002678 <DSP_K_SVPWM+0x6f8>
 8002542:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002546:	ee77 7a67 	vsub.f32	s15, s14, s15
 800254a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 f_cos_0_60 = f_cos * cos_180 + f_sin * sin_180;
 800254e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002552:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8002678 <DSP_K_SVPWM+0x6f8>
 8002556:	ee27 7a87 	vmul.f32	s14, s15, s14
 800255a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800255e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002562:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 Tb1 = module * (sin_60 * f_cos_0_60 - cos_60 * f_sin_0_60);
 8002566:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800256a:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8002680 <DSP_K_SVPWM+0x700>
 800256e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002572:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002576:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800257a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800257e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002582:	4b3c      	ldr	r3, [pc, #240]	; (8002674 <DSP_K_SVPWM+0x6f4>)
 8002584:	edd3 7a00 	vldr	s15, [r3]
 8002588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800258c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 Tb2 = module * f_sin_0_60;
 8002590:	4b38      	ldr	r3, [pc, #224]	; (8002674 <DSP_K_SVPWM+0x6f4>)
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800259a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800259e:	edc7 7a08 	vstr	s15, [r7, #32]
 T0  = 0.5f*(1.0f-Tb1-Tb2);
 80025a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025a6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80025aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025ae:	edd7 7a08 	vldr	s15, [r7, #32]
 80025b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80025ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025be:	edc7 7a07 	vstr	s15, [r7, #28]
 t1 = Tb1+Tb2+T0;
 80025c2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80025c6:	edd7 7a08 	vldr	s15, [r7, #32]
 80025ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80025d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025d6:	edc7 7a06 	vstr	s15, [r7, #24]
 t2 = Tb2+T0;
 80025da:	ed97 7a08 	vldr	s14, [r7, #32]
 80025de:	edd7 7a07 	vldr	s15, [r7, #28]
 80025e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025e6:	edc7 7a05 	vstr	s15, [r7, #20]
 t3 = Tb1+T0;
 80025ea:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80025ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80025f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025f6:	edc7 7a04 	vstr	s15, [r7, #16]
Tim->CCR1 = (int)(Tim->ARR*T0+0);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fe:	ee07 3a90 	vmov	s15, r3
 8002602:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002606:	edd7 7a07 	vldr	s15, [r7, #28]
 800260a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800260e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002678 <DSP_K_SVPWM+0x6f8>
 8002612:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002616:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800261a:	ee17 2a90 	vmov	r2, s15
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	635a      	str	r2, [r3, #52]	; 0x34
Tim->CCR2 = (int)(Tim->ARR*t3+0);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002626:	ee07 3a90 	vmov	s15, r3
 800262a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800262e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002636:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002678 <DSP_K_SVPWM+0x6f8>
 800263a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800263e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002642:	ee17 2a90 	vmov	r2, s15
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	639a      	str	r2, [r3, #56]	; 0x38
Tim->CCR3 = (int)(Tim->ARR*t1+0);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264e:	ee07 3a90 	vmov	s15, r3
 8002652:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002656:	edd7 7a06 	vldr	s15, [r7, #24]
 800265a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800265e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002678 <DSP_K_SVPWM+0x6f8>
 8002662:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002666:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800266a:	ee17 2a90 	vmov	r2, s15
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	63da      	str	r2, [r3, #60]	; 0x3c
 8002672:	e199      	b.n	80029a8 <DSP_K_SVPWM+0xa28>
 8002674:	200000a8 	.word	0x200000a8
 8002678:	00000000 	.word	0x00000000
 800267c:	bf5db3d7 	.word	0xbf5db3d7
 8002680:	3f5db3d7 	.word	0x3f5db3d7
  else if( (f_sin <=sin_240)  &&\
 8002684:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002688:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 800267c <DSP_K_SVPWM+0x6fc>
 800268c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002694:	f200 80bb 	bhi.w	800280e <DSP_K_SVPWM+0x88e>
 8002698:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800269c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80026a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a8:	f2c0 80b1 	blt.w	800280e <DSP_K_SVPWM+0x88e>
    (f_cos >= cos_240) && (f_cos < cos_300) )
 80026ac:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80026b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80026b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026bc:	f140 80a7 	bpl.w	800280e <DSP_K_SVPWM+0x88e>
 f_sin_0_60 = f_sin * cos_240 - sin_240 * f_cos;
 80026c0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80026c4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80026c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80026cc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80026d0:	ed5f 6a15 	vldr	s13, [pc, #-84]	; 8002680 <DSP_K_SVPWM+0x700>
 80026d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80026d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026dc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 f_cos_0_60 = f_cos * cos_240 + f_sin * sin_240;
 80026e0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80026e4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80026e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80026ec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80026f0:	ed5f 6a1e 	vldr	s13, [pc, #-120]	; 800267c <DSP_K_SVPWM+0x6fc>
 80026f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80026f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026fc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 Tb1 = module * (sin_60 * f_cos_0_60 - cos_60 * f_sin_0_60);
 8002700:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002704:	ed1f 7a22 	vldr	s14, [pc, #-136]	; 8002680 <DSP_K_SVPWM+0x700>
 8002708:	ee27 7a87 	vmul.f32	s14, s15, s14
 800270c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002710:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002714:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002718:	ee37 7a67 	vsub.f32	s14, s14, s15
 800271c:	4ba4      	ldr	r3, [pc, #656]	; (80029b0 <DSP_K_SVPWM+0xa30>)
 800271e:	edd3 7a00 	vldr	s15, [r3]
 8002722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002726:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 Tb2 = module * f_sin_0_60;
 800272a:	4ba1      	ldr	r3, [pc, #644]	; (80029b0 <DSP_K_SVPWM+0xa30>)
 800272c:	edd3 7a00 	vldr	s15, [r3]
 8002730:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002738:	edc7 7a08 	vstr	s15, [r7, #32]
 T0  = 0.5f*(1.0f-Tb1-Tb2);
 800273c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002740:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002744:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002748:	edd7 7a08 	vldr	s15, [r7, #32]
 800274c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002750:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002754:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002758:	edc7 7a07 	vstr	s15, [r7, #28]
 t1 = Tb1+Tb2+T0;
 800275c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002760:	edd7 7a08 	vldr	s15, [r7, #32]
 8002764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002768:	ed97 7a07 	vldr	s14, [r7, #28]
 800276c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002770:	edc7 7a06 	vstr	s15, [r7, #24]
 t2 = Tb2+T0;
 8002774:	ed97 7a08 	vldr	s14, [r7, #32]
 8002778:	edd7 7a07 	vldr	s15, [r7, #28]
 800277c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002780:	edc7 7a05 	vstr	s15, [r7, #20]
 t3 = Tb1+T0;
 8002784:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002788:	edd7 7a07 	vldr	s15, [r7, #28]
 800278c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002790:	edc7 7a04 	vstr	s15, [r7, #16]
Tim->CCR1 = (int)(Tim->ARR*t2+0);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002798:	ee07 3a90 	vmov	s15, r3
 800279c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80027a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a8:	ed9f 7a82 	vldr	s14, [pc, #520]	; 80029b4 <DSP_K_SVPWM+0xa34>
 80027ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027b4:	ee17 2a90 	vmov	r2, s15
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	635a      	str	r2, [r3, #52]	; 0x34
Tim->CCR2 = (int)(Tim->ARR*T0+0);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c0:	ee07 3a90 	vmov	s15, r3
 80027c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80027cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d0:	ed9f 7a78 	vldr	s14, [pc, #480]	; 80029b4 <DSP_K_SVPWM+0xa34>
 80027d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027dc:	ee17 2a90 	vmov	r2, s15
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	639a      	str	r2, [r3, #56]	; 0x38
Tim->CCR3 = (int)(Tim->ARR*t1+0);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	ee07 3a90 	vmov	s15, r3
 80027ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80027f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027f8:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80029b4 <DSP_K_SVPWM+0xa34>
 80027fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002800:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002804:	ee17 2a90 	vmov	r2, s15
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	63da      	str	r2, [r3, #60]	; 0x3c
 800280c:	e0cc      	b.n	80029a8 <DSP_K_SVPWM+0xa28>
 else if((f_sin >= sin_300) && (f_sin < sin_0)  &&\
 800280e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002812:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80029b8 <DSP_K_SVPWM+0xa38>
 8002816:	eef4 7ac7 	vcmpe.f32	s15, s14
 800281a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800281e:	da00      	bge.n	8002822 <DSP_K_SVPWM+0x8a2>
}
 8002820:	e0c2      	b.n	80029a8 <DSP_K_SVPWM+0xa28>
 else if((f_sin >= sin_300) && (f_sin < sin_0)  &&\
 8002822:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002826:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800282a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800282e:	d400      	bmi.n	8002832 <DSP_K_SVPWM+0x8b2>
}
 8002830:	e0ba      	b.n	80029a8 <DSP_K_SVPWM+0xa28>
 else if((f_sin >= sin_300) && (f_sin < sin_0)  &&\
 8002832:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002836:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800283a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800283e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002842:	da00      	bge.n	8002846 <DSP_K_SVPWM+0x8c6>
}
 8002844:	e0b0      	b.n	80029a8 <DSP_K_SVPWM+0xa28>
    (f_cos >= cos_300) && (f_cos < cos_0) )
 8002846:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800284a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800284e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002856:	d400      	bmi.n	800285a <DSP_K_SVPWM+0x8da>
}
 8002858:	e0a6      	b.n	80029a8 <DSP_K_SVPWM+0xa28>
 f_sin_0_60 = f_sin * cos_300 - sin_300 * f_cos;
 800285a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800285e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002862:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002866:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800286a:	eddf 6a54 	vldr	s13, [pc, #336]	; 80029bc <DSP_K_SVPWM+0xa3c>
 800286e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002872:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002876:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 f_cos_0_60 = f_cos * cos_300 + f_sin * sin_300;
 800287a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800287e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002882:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002886:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800288a:	eddf 6a4b 	vldr	s13, [pc, #300]	; 80029b8 <DSP_K_SVPWM+0xa38>
 800288e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002896:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 Tb1 = module * (sin_60 * f_cos_0_60 - cos_60 * f_sin_0_60);
 800289a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800289e:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80029bc <DSP_K_SVPWM+0xa3c>
 80028a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028a6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80028aa:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80028ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028b6:	4b3e      	ldr	r3, [pc, #248]	; (80029b0 <DSP_K_SVPWM+0xa30>)
 80028b8:	edd3 7a00 	vldr	s15, [r3]
 80028bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028c0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 Tb2 = module * f_sin_0_60;
 80028c4:	4b3a      	ldr	r3, [pc, #232]	; (80029b0 <DSP_K_SVPWM+0xa30>)
 80028c6:	edd3 7a00 	vldr	s15, [r3]
 80028ca:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80028ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028d2:	edc7 7a08 	vstr	s15, [r7, #32]
 T0  = 0.5f*(1.0f-Tb1-Tb2);
 80028d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028da:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80028de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028e2:	edd7 7a08 	vldr	s15, [r7, #32]
 80028e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80028ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028f2:	edc7 7a07 	vstr	s15, [r7, #28]
 t1 = Tb1+Tb2+T0;
 80028f6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80028fa:	edd7 7a08 	vldr	s15, [r7, #32]
 80028fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002902:	ed97 7a07 	vldr	s14, [r7, #28]
 8002906:	ee77 7a27 	vadd.f32	s15, s14, s15
 800290a:	edc7 7a06 	vstr	s15, [r7, #24]
 t2 = Tb2+T0;
 800290e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002912:	edd7 7a07 	vldr	s15, [r7, #28]
 8002916:	ee77 7a27 	vadd.f32	s15, s14, s15
 800291a:	edc7 7a05 	vstr	s15, [r7, #20]
 t3 = Tb1+T0;
 800291e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002922:	edd7 7a07 	vldr	s15, [r7, #28]
 8002926:	ee77 7a27 	vadd.f32	s15, s14, s15
 800292a:	edc7 7a04 	vstr	s15, [r7, #16]
Tim->CCR1 = (int)(Tim->ARR*t1+0);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002932:	ee07 3a90 	vmov	s15, r3
 8002936:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800293a:	edd7 7a06 	vldr	s15, [r7, #24]
 800293e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002942:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80029b4 <DSP_K_SVPWM+0xa34>
 8002946:	ee77 7a87 	vadd.f32	s15, s15, s14
 800294a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800294e:	ee17 2a90 	vmov	r2, s15
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	635a      	str	r2, [r3, #52]	; 0x34
Tim->CCR2 = (int)(Tim->ARR*T0+0);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295a:	ee07 3a90 	vmov	s15, r3
 800295e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002962:	edd7 7a07 	vldr	s15, [r7, #28]
 8002966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800296a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80029b4 <DSP_K_SVPWM+0xa34>
 800296e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002972:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002976:	ee17 2a90 	vmov	r2, s15
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	639a      	str	r2, [r3, #56]	; 0x38
Tim->CCR3 = (int)(Tim->ARR*t3+0);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002982:	ee07 3a90 	vmov	s15, r3
 8002986:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800298a:	edd7 7a04 	vldr	s15, [r7, #16]
 800298e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002992:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80029b4 <DSP_K_SVPWM+0xa34>
 8002996:	ee77 7a87 	vadd.f32	s15, s15, s14
 800299a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800299e:	ee17 2a90 	vmov	r2, s15
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80029a6:	e7ff      	b.n	80029a8 <DSP_K_SVPWM+0xa28>
 80029a8:	bf00      	nop
 80029aa:	3738      	adds	r7, #56	; 0x38
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	200000a8 	.word	0x200000a8
 80029b4:	00000000 	.word	0x00000000
 80029b8:	bf5db3d7 	.word	0xbf5db3d7
 80029bc:	3f5db3d7 	.word	0x3f5db3d7

080029c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029c4:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <HAL_Init+0x40>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a0d      	ldr	r2, [pc, #52]	; (8002a00 <HAL_Init+0x40>)
 80029ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029d0:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <HAL_Init+0x40>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a0a      	ldr	r2, [pc, #40]	; (8002a00 <HAL_Init+0x40>)
 80029d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029dc:	4b08      	ldr	r3, [pc, #32]	; (8002a00 <HAL_Init+0x40>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a07      	ldr	r2, [pc, #28]	; (8002a00 <HAL_Init+0x40>)
 80029e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029e8:	2003      	movs	r0, #3
 80029ea:	f000 fd7d 	bl	80034e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029ee:	2000      	movs	r0, #0
 80029f0:	f000 f808 	bl	8002a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029f4:	f7fe fcbe 	bl	8001374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40023c00 	.word	0x40023c00

08002a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a0c:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <HAL_InitTick+0x54>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <HAL_InitTick+0x58>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	4619      	mov	r1, r3
 8002a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 fda3 	bl	800356e <HAL_SYSTICK_Config>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e00e      	b.n	8002a50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b0f      	cmp	r3, #15
 8002a36:	d80a      	bhi.n	8002a4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a40:	f000 fd5d 	bl	80034fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a44:	4a06      	ldr	r2, [pc, #24]	; (8002a60 <HAL_InitTick+0x5c>)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	e000      	b.n	8002a50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20000008 	.word	0x20000008
 8002a5c:	20000010 	.word	0x20000010
 8002a60:	2000000c 	.word	0x2000000c

08002a64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a68:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <HAL_IncTick+0x20>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <HAL_IncTick+0x24>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4413      	add	r3, r2
 8002a74:	4a04      	ldr	r2, [pc, #16]	; (8002a88 <HAL_IncTick+0x24>)
 8002a76:	6013      	str	r3, [r2, #0]
}
 8002a78:	bf00      	nop
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	20000010 	.word	0x20000010
 8002a88:	200003f8 	.word	0x200003f8

08002a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a90:	4b03      	ldr	r3, [pc, #12]	; (8002aa0 <HAL_GetTick+0x14>)
 8002a92:	681b      	ldr	r3, [r3, #0]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	200003f8 	.word	0x200003f8

08002aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002aac:	f7ff ffee 	bl	8002a8c <HAL_GetTick>
 8002ab0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002abc:	d005      	beq.n	8002aca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002abe:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <HAL_Delay+0x44>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002aca:	bf00      	nop
 8002acc:	f7ff ffde 	bl	8002a8c <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d8f7      	bhi.n	8002acc <HAL_Delay+0x28>
  {
  }
}
 8002adc:	bf00      	nop
 8002ade:	bf00      	nop
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000010 	.word	0x20000010

08002aec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002af4:	2300      	movs	r3, #0
 8002af6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e033      	b.n	8002b6a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d109      	bne.n	8002b1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7fe fc5a 	bl	80013c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f003 0310 	and.w	r3, r3, #16
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d118      	bne.n	8002b5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b32:	f023 0302 	bic.w	r3, r3, #2
 8002b36:	f043 0202 	orr.w	r2, r3, #2
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f958 	bl	8002df4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f023 0303 	bic.w	r3, r3, #3
 8002b52:	f043 0201 	orr.w	r2, r3, #1
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	641a      	str	r2, [r3, #64]	; 0x40
 8002b5a:	e001      	b.n	8002b60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x1c>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e105      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x228>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b09      	cmp	r3, #9
 8002bda:	d925      	bls.n	8002c28 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68d9      	ldr	r1, [r3, #12]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	461a      	mov	r2, r3
 8002bea:	4613      	mov	r3, r2
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	4413      	add	r3, r2
 8002bf0:	3b1e      	subs	r3, #30
 8002bf2:	2207      	movs	r2, #7
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	43da      	mvns	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	400a      	ands	r2, r1
 8002c00:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68d9      	ldr	r1, [r3, #12]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	4618      	mov	r0, r3
 8002c14:	4603      	mov	r3, r0
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	4403      	add	r3, r0
 8002c1a:	3b1e      	subs	r3, #30
 8002c1c:	409a      	lsls	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	60da      	str	r2, [r3, #12]
 8002c26:	e022      	b.n	8002c6e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6919      	ldr	r1, [r3, #16]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	461a      	mov	r2, r3
 8002c36:	4613      	mov	r3, r2
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	4413      	add	r3, r2
 8002c3c:	2207      	movs	r2, #7
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43da      	mvns	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	400a      	ands	r2, r1
 8002c4a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6919      	ldr	r1, [r3, #16]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	4603      	mov	r3, r0
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	4403      	add	r3, r0
 8002c64:	409a      	lsls	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b06      	cmp	r3, #6
 8002c74:	d824      	bhi.n	8002cc0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	3b05      	subs	r3, #5
 8002c88:	221f      	movs	r2, #31
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43da      	mvns	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	400a      	ands	r2, r1
 8002c96:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	3b05      	subs	r3, #5
 8002cb2:	fa00 f203 	lsl.w	r2, r0, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	635a      	str	r2, [r3, #52]	; 0x34
 8002cbe:	e04c      	b.n	8002d5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b0c      	cmp	r3, #12
 8002cc6:	d824      	bhi.n	8002d12 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3b23      	subs	r3, #35	; 0x23
 8002cda:	221f      	movs	r2, #31
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43da      	mvns	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	400a      	ands	r2, r1
 8002ce8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	3b23      	subs	r3, #35	; 0x23
 8002d04:	fa00 f203 	lsl.w	r2, r0, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
 8002d10:	e023      	b.n	8002d5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	3b41      	subs	r3, #65	; 0x41
 8002d24:	221f      	movs	r2, #31
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	43da      	mvns	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	400a      	ands	r2, r1
 8002d32:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	4618      	mov	r0, r3
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3b41      	subs	r3, #65	; 0x41
 8002d4e:	fa00 f203 	lsl.w	r2, r0, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d5a:	4b22      	ldr	r3, [pc, #136]	; (8002de4 <HAL_ADC_ConfigChannel+0x234>)
 8002d5c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a21      	ldr	r2, [pc, #132]	; (8002de8 <HAL_ADC_ConfigChannel+0x238>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d109      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x1cc>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b12      	cmp	r3, #18
 8002d6e:	d105      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a19      	ldr	r2, [pc, #100]	; (8002de8 <HAL_ADC_ConfigChannel+0x238>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d123      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x21e>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2b10      	cmp	r3, #16
 8002d8c:	d003      	beq.n	8002d96 <HAL_ADC_ConfigChannel+0x1e6>
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b11      	cmp	r3, #17
 8002d94:	d11b      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2b10      	cmp	r3, #16
 8002da8:	d111      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002daa:	4b10      	ldr	r3, [pc, #64]	; (8002dec <HAL_ADC_ConfigChannel+0x23c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a10      	ldr	r2, [pc, #64]	; (8002df0 <HAL_ADC_ConfigChannel+0x240>)
 8002db0:	fba2 2303 	umull	r2, r3, r2, r3
 8002db4:	0c9a      	lsrs	r2, r3, #18
 8002db6:	4613      	mov	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002dc0:	e002      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f9      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	40012300 	.word	0x40012300
 8002de8:	40012000 	.word	0x40012000
 8002dec:	20000008 	.word	0x20000008
 8002df0:	431bde83 	.word	0x431bde83

08002df4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dfc:	4b79      	ldr	r3, [pc, #484]	; (8002fe4 <ADC_Init+0x1f0>)
 8002dfe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	431a      	orrs	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6859      	ldr	r1, [r3, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	021a      	lsls	r2, r3, #8
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6859      	ldr	r1, [r3, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6899      	ldr	r1, [r3, #8]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e86:	4a58      	ldr	r2, [pc, #352]	; (8002fe8 <ADC_Init+0x1f4>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d022      	beq.n	8002ed2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e9a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6899      	ldr	r1, [r3, #8]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ebc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6899      	ldr	r1, [r3, #8]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	e00f      	b.n	8002ef2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ee0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ef0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0202 	bic.w	r2, r2, #2
 8002f00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6899      	ldr	r1, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	7e1b      	ldrb	r3, [r3, #24]
 8002f0c:	005a      	lsls	r2, r3, #1
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d01b      	beq.n	8002f58 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f2e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f3e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6859      	ldr	r1, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	035a      	lsls	r2, r3, #13
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	605a      	str	r2, [r3, #4]
 8002f56:	e007      	b.n	8002f68 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f66:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	051a      	lsls	r2, r3, #20
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6899      	ldr	r1, [r3, #8]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002faa:	025a      	lsls	r2, r3, #9
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6899      	ldr	r1, [r3, #8]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	029a      	lsls	r2, r3, #10
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	609a      	str	r2, [r3, #8]
}
 8002fd8:	bf00      	nop
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	40012300 	.word	0x40012300
 8002fe8:	0f000001 	.word	0x0f000001

08002fec <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData   Pointer to buffer in which transferred from ADC peripheral to memory will be stored. 
  * @param  Length  The length of data to be transferred from ADC peripheral to memory.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	613b      	str	r3, [r7, #16]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003002:	2b01      	cmp	r3, #1
 8003004:	d101      	bne.n	800300a <HAL_ADCEx_MultiModeStart_DMA+0x1e>
 8003006:	2302      	movs	r3, #2
 8003008:	e0ab      	b.n	8003162 <HAL_ADCEx_MultiModeStart_DMA+0x176>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b01      	cmp	r3, #1
 800301e:	d018      	beq.n	8003052 <HAL_ADCEx_MultiModeStart_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0201 	orr.w	r2, r2, #1
 800302e:	609a      	str	r2, [r3, #8]
    
    /* Delay for temperature sensor stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003030:	4b4e      	ldr	r3, [pc, #312]	; (800316c <HAL_ADCEx_MultiModeStart_DMA+0x180>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a4e      	ldr	r2, [pc, #312]	; (8003170 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 8003036:	fba2 2303 	umull	r2, r3, r2, r3
 800303a:	0c9a      	lsrs	r2, r3, #18
 800303c:	4613      	mov	r3, r2
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	4413      	add	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003044:	e002      	b.n	800304c <HAL_ADCEx_MultiModeStart_DMA+0x60>
    {
      counter--;
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	3b01      	subs	r3, #1
 800304a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1f9      	bne.n	8003046 <HAL_ADCEx_MultiModeStart_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b01      	cmp	r3, #1
 800305e:	d173      	bne.n	8003148 <HAL_ADCEx_MultiModeStart_DMA+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003068:	f023 0301 	bic.w	r3, r3, #1
 800306c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800307e:	2b00      	cmp	r3, #0
 8003080:	d007      	beq.n	8003092 <HAL_ADCEx_MultiModeStart_DMA+0xa6>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800308a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800309a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800309e:	d106      	bne.n	80030ae <HAL_ADCEx_MultiModeStart_DMA+0xc2>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a4:	f023 0206 	bic.w	r2, r3, #6
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	645a      	str	r2, [r3, #68]	; 0x44
 80030ac:	e002      	b.n	80030b4 <HAL_ADCEx_MultiModeStart_DMA+0xc8>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvCplt;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c0:	4a2c      	ldr	r2, [pc, #176]	; (8003174 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 80030c2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_MultiModeDMAHalfConvCplt;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c8:	4a2b      	ldr	r2, [pc, #172]	; (8003178 <HAL_ADCEx_MultiModeStart_DMA+0x18c>)
 80030ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError ;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d0:	4a2a      	ldr	r2, [pc, #168]	; (800317c <HAL_ADCEx_MultiModeStart_DMA+0x190>)
 80030d2:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f06f 0202 	mvn.w	r2, #2
 80030dc:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80030ec:	605a      	str	r2, [r3, #4]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030ee:	4b24      	ldr	r3, [pc, #144]	; (8003180 <HAL_ADCEx_MultiModeStart_DMA+0x194>)
 80030f0:	617b      	str	r3, [r7, #20]

    if (hadc->Init.DMAContinuousRequests != DISABLE)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d006      	beq.n	800310a <HAL_ADCEx_MultiModeStart_DMA+0x11e>
    {
      /* Enable the selected ADC DMA request after last transfer */
      tmpADC_Common->CCR |= ADC_CCR_DDS;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	605a      	str	r2, [r3, #4]
 8003108:	e005      	b.n	8003116 <HAL_ADCEx_MultiModeStart_DMA+0x12a>
    }
    else
    {
      /* Disable the selected ADC EOC rising on each regular channel conversion */
      tmpADC_Common->CCR &= ~ADC_CCR_DDS;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	605a      	str	r2, [r3, #4]
    }
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	3308      	adds	r3, #8
 800311e:	4619      	mov	r1, r3
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f000 fbc6 	bl	80038b4 <HAL_DMA_Start_IT>
    
    /* if no external trigger present enable software conversion of regular channels */
    if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d114      	bne.n	8003160 <HAL_ADCEx_MultiModeStart_DMA+0x174>
    {
      /* Enable the selected ADC software conversion for regular group */
      hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003144:	609a      	str	r2, [r3, #8]
 8003146:	e00b      	b.n	8003160 <HAL_ADCEx_MultiModeStart_DMA+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	f043 0210 	orr.w	r2, r3, #16
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003158:	f043 0201 	orr.w	r2, r3, #1
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	20000008 	.word	0x20000008
 8003170:	431bde83 	.word	0x431bde83
 8003174:	08003211 	.word	0x08003211
 8003178:	080032b7 	.word	0x080032b7
 800317c:	080032d3 	.word	0x080032d3
 8003180:	40012300 	.word	0x40012300

08003184 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8003198:	2302      	movs	r3, #2
 800319a:	e031      	b.n	8003200 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031a4:	4b19      	ldr	r3, [pc, #100]	; (800320c <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f023 021f 	bic.w	r2, r3, #31
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	431a      	orrs	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	431a      	orrs	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	431a      	orrs	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	40012300 	.word	0x40012300

08003210 <ADC_MultiModeDMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003226:	2b00      	cmp	r3, #0
 8003228:	d13c      	bne.n	80032a4 <ADC_MultiModeDMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d12b      	bne.n	800329c <ADC_MultiModeDMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003248:	2b00      	cmp	r3, #0
 800324a:	d127      	bne.n	800329c <ADC_MultiModeDMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003252:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003256:	2b00      	cmp	r3, #0
 8003258:	d006      	beq.n	8003268 <ADC_MultiModeDMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003264:	2b00      	cmp	r3, #0
 8003266:	d119      	bne.n	800329c <ADC_MultiModeDMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0220 	bic.w	r2, r2, #32
 8003276:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d105      	bne.n	800329c <ADC_MultiModeDMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	f043 0201 	orr.w	r2, r3, #1
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f7ff fc68 	bl	8002b72 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80032a2:	e004      	b.n	80032ae <ADC_MultiModeDMAConvCplt+0x9e>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	4798      	blx	r3
}
 80032ae:	bf00      	nop
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <ADC_MultiModeDMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b084      	sub	sp, #16
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
    ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c2:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
    HAL_ADC_ConvHalfCpltCallback(hadc); 
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f7ff fc5e 	bl	8002b86 <HAL_ADC_ConvHalfCpltCallback>
}
 80032ca:	bf00      	nop
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <ADC_MultiModeDMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma)   
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
    ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032de:	60fb      	str	r3, [r7, #12]
    hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2240      	movs	r2, #64	; 0x40
 80032e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Set ADC error code to DMA error */
    hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ea:	f043 0204 	orr.w	r2, r3, #4
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_ADC_ErrorCallback(hadc); 
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f7ff fc51 	bl	8002b9a <HAL_ADC_ErrorCallback>
}
 80032f8:	bf00      	nop
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003310:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <__NVIC_SetPriorityGrouping+0x44>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800331c:	4013      	ands	r3, r2
 800331e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003328:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800332c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003332:	4a04      	ldr	r2, [pc, #16]	; (8003344 <__NVIC_SetPriorityGrouping+0x44>)
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	60d3      	str	r3, [r2, #12]
}
 8003338:	bf00      	nop
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	e000ed00 	.word	0xe000ed00

08003348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800334c:	4b04      	ldr	r3, [pc, #16]	; (8003360 <__NVIC_GetPriorityGrouping+0x18>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	0a1b      	lsrs	r3, r3, #8
 8003352:	f003 0307 	and.w	r3, r3, #7
}
 8003356:	4618      	mov	r0, r3
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	e000ed00 	.word	0xe000ed00

08003364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800336e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003372:	2b00      	cmp	r3, #0
 8003374:	db0b      	blt.n	800338e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	f003 021f 	and.w	r2, r3, #31
 800337c:	4907      	ldr	r1, [pc, #28]	; (800339c <__NVIC_EnableIRQ+0x38>)
 800337e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003382:	095b      	lsrs	r3, r3, #5
 8003384:	2001      	movs	r0, #1
 8003386:	fa00 f202 	lsl.w	r2, r0, r2
 800338a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	e000e100 	.word	0xe000e100

080033a0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	db12      	blt.n	80033d8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	f003 021f 	and.w	r2, r3, #31
 80033b8:	490a      	ldr	r1, [pc, #40]	; (80033e4 <__NVIC_DisableIRQ+0x44>)
 80033ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033be:	095b      	lsrs	r3, r3, #5
 80033c0:	2001      	movs	r0, #1
 80033c2:	fa00 f202 	lsl.w	r2, r0, r2
 80033c6:	3320      	adds	r3, #32
 80033c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80033cc:	f3bf 8f4f 	dsb	sy
}
 80033d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80033d2:	f3bf 8f6f 	isb	sy
}
 80033d6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	e000e100 	.word	0xe000e100

080033e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	6039      	str	r1, [r7, #0]
 80033f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	db0a      	blt.n	8003412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	490c      	ldr	r1, [pc, #48]	; (8003434 <__NVIC_SetPriority+0x4c>)
 8003402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003406:	0112      	lsls	r2, r2, #4
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	440b      	add	r3, r1
 800340c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003410:	e00a      	b.n	8003428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	b2da      	uxtb	r2, r3
 8003416:	4908      	ldr	r1, [pc, #32]	; (8003438 <__NVIC_SetPriority+0x50>)
 8003418:	79fb      	ldrb	r3, [r7, #7]
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	3b04      	subs	r3, #4
 8003420:	0112      	lsls	r2, r2, #4
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	440b      	add	r3, r1
 8003426:	761a      	strb	r2, [r3, #24]
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	e000e100 	.word	0xe000e100
 8003438:	e000ed00 	.word	0xe000ed00

0800343c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800343c:	b480      	push	{r7}
 800343e:	b089      	sub	sp, #36	; 0x24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f1c3 0307 	rsb	r3, r3, #7
 8003456:	2b04      	cmp	r3, #4
 8003458:	bf28      	it	cs
 800345a:	2304      	movcs	r3, #4
 800345c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	3304      	adds	r3, #4
 8003462:	2b06      	cmp	r3, #6
 8003464:	d902      	bls.n	800346c <NVIC_EncodePriority+0x30>
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	3b03      	subs	r3, #3
 800346a:	e000      	b.n	800346e <NVIC_EncodePriority+0x32>
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003470:	f04f 32ff 	mov.w	r2, #4294967295
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	43da      	mvns	r2, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	401a      	ands	r2, r3
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003484:	f04f 31ff 	mov.w	r1, #4294967295
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	fa01 f303 	lsl.w	r3, r1, r3
 800348e:	43d9      	mvns	r1, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003494:	4313      	orrs	r3, r2
         );
}
 8003496:	4618      	mov	r0, r3
 8003498:	3724      	adds	r7, #36	; 0x24
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
	...

080034a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034b4:	d301      	bcc.n	80034ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034b6:	2301      	movs	r3, #1
 80034b8:	e00f      	b.n	80034da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ba:	4a0a      	ldr	r2, [pc, #40]	; (80034e4 <SysTick_Config+0x40>)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3b01      	subs	r3, #1
 80034c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034c2:	210f      	movs	r1, #15
 80034c4:	f04f 30ff 	mov.w	r0, #4294967295
 80034c8:	f7ff ff8e 	bl	80033e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034cc:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <SysTick_Config+0x40>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034d2:	4b04      	ldr	r3, [pc, #16]	; (80034e4 <SysTick_Config+0x40>)
 80034d4:	2207      	movs	r2, #7
 80034d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	e000e010 	.word	0xe000e010

080034e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f7ff ff05 	bl	8003300 <__NVIC_SetPriorityGrouping>
}
 80034f6:	bf00      	nop
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034fe:	b580      	push	{r7, lr}
 8003500:	b086      	sub	sp, #24
 8003502:	af00      	add	r7, sp, #0
 8003504:	4603      	mov	r3, r0
 8003506:	60b9      	str	r1, [r7, #8]
 8003508:	607a      	str	r2, [r7, #4]
 800350a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003510:	f7ff ff1a 	bl	8003348 <__NVIC_GetPriorityGrouping>
 8003514:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	68b9      	ldr	r1, [r7, #8]
 800351a:	6978      	ldr	r0, [r7, #20]
 800351c:	f7ff ff8e 	bl	800343c <NVIC_EncodePriority>
 8003520:	4602      	mov	r2, r0
 8003522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003526:	4611      	mov	r1, r2
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff ff5d 	bl	80033e8 <__NVIC_SetPriority>
}
 800352e:	bf00      	nop
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b082      	sub	sp, #8
 800353a:	af00      	add	r7, sp, #0
 800353c:	4603      	mov	r3, r0
 800353e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff ff0d 	bl	8003364 <__NVIC_EnableIRQ>
}
 800354a:	bf00      	nop
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b082      	sub	sp, #8
 8003556:	af00      	add	r7, sp, #0
 8003558:	4603      	mov	r3, r0
 800355a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800355c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff ff1d 	bl	80033a0 <__NVIC_DisableIRQ>
}
 8003566:	bf00      	nop
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b082      	sub	sp, #8
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7ff ff94 	bl	80034a4 <SysTick_Config>
 800357c:	4603      	mov	r3, r0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b082      	sub	sp, #8
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e014      	b.n	80035c2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	791b      	ldrb	r3, [r3, #4]
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d105      	bne.n	80035ae <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7fd ffe5 	bl	8001578 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2202      	movs	r2, #2
 80035b2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
 80035d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	795b      	ldrb	r3, [r3, #5]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <HAL_DAC_Start+0x16>
 80035dc:	2302      	movs	r3, #2
 80035de:	e040      	b.n	8003662 <HAL_DAC_Start+0x98>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2202      	movs	r2, #2
 80035ea:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6819      	ldr	r1, [r3, #0]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	f003 0310 	and.w	r3, r3, #16
 80035f8:	2201      	movs	r2, #1
 80035fa:	409a      	lsls	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10f      	bne.n	800362a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003614:	2b3c      	cmp	r3, #60	; 0x3c
 8003616:	d11d      	bne.n	8003654 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0201 	orr.w	r2, r2, #1
 8003626:	605a      	str	r2, [r3, #4]
 8003628:	e014      	b.n	8003654 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	f003 0310 	and.w	r3, r3, #16
 800363a:	213c      	movs	r1, #60	; 0x3c
 800363c:	fa01 f303 	lsl.w	r3, r1, r3
 8003640:	429a      	cmp	r2, r3
 8003642:	d107      	bne.n	8003654 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0202 	orr.w	r2, r2, #2
 8003652:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800366e:	b480      	push	{r7}
 8003670:	b087      	sub	sp, #28
 8003672:	af00      	add	r7, sp, #0
 8003674:	60f8      	str	r0, [r7, #12]
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	607a      	str	r2, [r7, #4]
 800367a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d105      	bne.n	8003698 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4413      	add	r3, r2
 8003692:	3308      	adds	r3, #8
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	e004      	b.n	80036a2 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4413      	add	r3, r2
 800369e:	3314      	adds	r3, #20
 80036a0:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	461a      	mov	r2, r3
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	371c      	adds	r7, #28
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	795b      	ldrb	r3, [r3, #5]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_DAC_ConfigChannel+0x18>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e03c      	b.n	800374a <HAL_DAC_ConfigChannel+0x92>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2201      	movs	r2, #1
 80036d4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2202      	movs	r2, #2
 80036da:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f003 0310 	and.w	r3, r3, #16
 80036ea:	f640 72fe 	movw	r2, #4094	; 0xffe
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	43db      	mvns	r3, r3
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	4013      	ands	r3, r2
 80036f8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	4313      	orrs	r3, r2
 8003704:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f003 0310 	and.w	r3, r3, #16
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	4313      	orrs	r3, r2
 8003716:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6819      	ldr	r1, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f003 0310 	and.w	r3, r3, #16
 800372c:	22c0      	movs	r2, #192	; 0xc0
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	43da      	mvns	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	400a      	ands	r2, r1
 800373a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2201      	movs	r2, #1
 8003740:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	371c      	adds	r7, #28
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
	...

08003758 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003764:	f7ff f992 	bl	8002a8c <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e099      	b.n	80038a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0201 	bic.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003794:	e00f      	b.n	80037b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003796:	f7ff f979 	bl	8002a8c <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b05      	cmp	r3, #5
 80037a2:	d908      	bls.n	80037b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2220      	movs	r2, #32
 80037a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2203      	movs	r2, #3
 80037ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e078      	b.n	80038a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1e8      	bne.n	8003796 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	4b38      	ldr	r3, [pc, #224]	; (80038b0 <HAL_DMA_Init+0x158>)
 80037d0:	4013      	ands	r3, r2
 80037d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	4313      	orrs	r3, r2
 8003806:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	2b04      	cmp	r3, #4
 800380e:	d107      	bne.n	8003820 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	4313      	orrs	r3, r2
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	4313      	orrs	r3, r2
 800381e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f023 0307 	bic.w	r3, r3, #7
 8003836:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	4313      	orrs	r3, r2
 8003840:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	2b04      	cmp	r3, #4
 8003848:	d117      	bne.n	800387a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	4313      	orrs	r3, r2
 8003852:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00e      	beq.n	800387a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f8e5 	bl	8003a2c <DMA_CheckFifoParam>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d008      	beq.n	800387a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2240      	movs	r2, #64	; 0x40
 800386c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003876:	2301      	movs	r3, #1
 8003878:	e016      	b.n	80038a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f89c 	bl	80039c0 <DMA_CalcBaseAndBitshift>
 8003888:	4603      	mov	r3, r0
 800388a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003890:	223f      	movs	r2, #63	; 0x3f
 8003892:	409a      	lsls	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	f010803f 	.word	0xf010803f

080038b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
 80038c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d101      	bne.n	80038da <HAL_DMA_Start_IT+0x26>
 80038d6:	2302      	movs	r3, #2
 80038d8:	e040      	b.n	800395c <HAL_DMA_Start_IT+0xa8>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d12f      	bne.n	800394e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2202      	movs	r2, #2
 80038f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	68b9      	ldr	r1, [r7, #8]
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 f82e 	bl	8003964 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390c:	223f      	movs	r2, #63	; 0x3f
 800390e:	409a      	lsls	r2, r3
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 0216 	orr.w	r2, r2, #22
 8003922:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	2b00      	cmp	r3, #0
 800392a:	d007      	beq.n	800393c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0208 	orr.w	r2, r2, #8
 800393a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0201 	orr.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	e005      	b.n	800395a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003956:	2302      	movs	r3, #2
 8003958:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800395a:	7dfb      	ldrb	r3, [r7, #23]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3718      	adds	r7, #24
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003980:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	2b40      	cmp	r3, #64	; 0x40
 8003990:	d108      	bne.n	80039a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039a2:	e007      	b.n	80039b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	60da      	str	r2, [r3, #12]
}
 80039b4:	bf00      	nop
 80039b6:	3714      	adds	r7, #20
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	3b10      	subs	r3, #16
 80039d0:	4a14      	ldr	r2, [pc, #80]	; (8003a24 <DMA_CalcBaseAndBitshift+0x64>)
 80039d2:	fba2 2303 	umull	r2, r3, r2, r3
 80039d6:	091b      	lsrs	r3, r3, #4
 80039d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039da:	4a13      	ldr	r2, [pc, #76]	; (8003a28 <DMA_CalcBaseAndBitshift+0x68>)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4413      	add	r3, r2
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	461a      	mov	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2b03      	cmp	r3, #3
 80039ec:	d909      	bls.n	8003a02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039f6:	f023 0303 	bic.w	r3, r3, #3
 80039fa:	1d1a      	adds	r2, r3, #4
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	659a      	str	r2, [r3, #88]	; 0x58
 8003a00:	e007      	b.n	8003a12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a0a:	f023 0303 	bic.w	r3, r3, #3
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	aaaaaaab 	.word	0xaaaaaaab
 8003a28:	08006d64 	.word	0x08006d64

08003a2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d11f      	bne.n	8003a86 <DMA_CheckFifoParam+0x5a>
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b03      	cmp	r3, #3
 8003a4a:	d856      	bhi.n	8003afa <DMA_CheckFifoParam+0xce>
 8003a4c:	a201      	add	r2, pc, #4	; (adr r2, 8003a54 <DMA_CheckFifoParam+0x28>)
 8003a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a52:	bf00      	nop
 8003a54:	08003a65 	.word	0x08003a65
 8003a58:	08003a77 	.word	0x08003a77
 8003a5c:	08003a65 	.word	0x08003a65
 8003a60:	08003afb 	.word	0x08003afb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d046      	beq.n	8003afe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a74:	e043      	b.n	8003afe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a7e:	d140      	bne.n	8003b02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a84:	e03d      	b.n	8003b02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a8e:	d121      	bne.n	8003ad4 <DMA_CheckFifoParam+0xa8>
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	2b03      	cmp	r3, #3
 8003a94:	d837      	bhi.n	8003b06 <DMA_CheckFifoParam+0xda>
 8003a96:	a201      	add	r2, pc, #4	; (adr r2, 8003a9c <DMA_CheckFifoParam+0x70>)
 8003a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9c:	08003aad 	.word	0x08003aad
 8003aa0:	08003ab3 	.word	0x08003ab3
 8003aa4:	08003aad 	.word	0x08003aad
 8003aa8:	08003ac5 	.word	0x08003ac5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab0:	e030      	b.n	8003b14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d025      	beq.n	8003b0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ac2:	e022      	b.n	8003b0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003acc:	d11f      	bne.n	8003b0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ad2:	e01c      	b.n	8003b0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d903      	bls.n	8003ae2 <DMA_CheckFifoParam+0xb6>
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2b03      	cmp	r3, #3
 8003ade:	d003      	beq.n	8003ae8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ae0:	e018      	b.n	8003b14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	73fb      	strb	r3, [r7, #15]
      break;
 8003ae6:	e015      	b.n	8003b14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00e      	beq.n	8003b12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	73fb      	strb	r3, [r7, #15]
      break;
 8003af8:	e00b      	b.n	8003b12 <DMA_CheckFifoParam+0xe6>
      break;
 8003afa:	bf00      	nop
 8003afc:	e00a      	b.n	8003b14 <DMA_CheckFifoParam+0xe8>
      break;
 8003afe:	bf00      	nop
 8003b00:	e008      	b.n	8003b14 <DMA_CheckFifoParam+0xe8>
      break;
 8003b02:	bf00      	nop
 8003b04:	e006      	b.n	8003b14 <DMA_CheckFifoParam+0xe8>
      break;
 8003b06:	bf00      	nop
 8003b08:	e004      	b.n	8003b14 <DMA_CheckFifoParam+0xe8>
      break;
 8003b0a:	bf00      	nop
 8003b0c:	e002      	b.n	8003b14 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b0e:	bf00      	nop
 8003b10:	e000      	b.n	8003b14 <DMA_CheckFifoParam+0xe8>
      break;
 8003b12:	bf00      	nop
    }
  } 
  
  return status; 
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop

08003b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b089      	sub	sp, #36	; 0x24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61fb      	str	r3, [r7, #28]
 8003b3e:	e16b      	b.n	8003e18 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b40:	2201      	movs	r2, #1
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	4013      	ands	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	f040 815a 	bne.w	8003e12 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d005      	beq.n	8003b76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d130      	bne.n	8003bd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	2203      	movs	r2, #3
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	43db      	mvns	r3, r3
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bac:	2201      	movs	r2, #1
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	091b      	lsrs	r3, r3, #4
 8003bc2:	f003 0201 	and.w	r2, r3, #1
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f003 0303 	and.w	r3, r3, #3
 8003be0:	2b03      	cmp	r3, #3
 8003be2:	d017      	beq.n	8003c14 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	2203      	movs	r2, #3
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f003 0303 	and.w	r3, r3, #3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d123      	bne.n	8003c68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	08da      	lsrs	r2, r3, #3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3208      	adds	r2, #8
 8003c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	220f      	movs	r2, #15
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	4013      	ands	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	08da      	lsrs	r2, r3, #3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3208      	adds	r2, #8
 8003c62:	69b9      	ldr	r1, [r7, #24]
 8003c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	2203      	movs	r2, #3
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 0203 	and.w	r2, r3, #3
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 80b4 	beq.w	8003e12 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003caa:	2300      	movs	r3, #0
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	4b60      	ldr	r3, [pc, #384]	; (8003e30 <HAL_GPIO_Init+0x30c>)
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb2:	4a5f      	ldr	r2, [pc, #380]	; (8003e30 <HAL_GPIO_Init+0x30c>)
 8003cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8003cba:	4b5d      	ldr	r3, [pc, #372]	; (8003e30 <HAL_GPIO_Init+0x30c>)
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cc6:	4a5b      	ldr	r2, [pc, #364]	; (8003e34 <HAL_GPIO_Init+0x310>)
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	089b      	lsrs	r3, r3, #2
 8003ccc:	3302      	adds	r3, #2
 8003cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	220f      	movs	r2, #15
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	43db      	mvns	r3, r3
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a52      	ldr	r2, [pc, #328]	; (8003e38 <HAL_GPIO_Init+0x314>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d02b      	beq.n	8003d4a <HAL_GPIO_Init+0x226>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a51      	ldr	r2, [pc, #324]	; (8003e3c <HAL_GPIO_Init+0x318>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d025      	beq.n	8003d46 <HAL_GPIO_Init+0x222>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a50      	ldr	r2, [pc, #320]	; (8003e40 <HAL_GPIO_Init+0x31c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d01f      	beq.n	8003d42 <HAL_GPIO_Init+0x21e>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a4f      	ldr	r2, [pc, #316]	; (8003e44 <HAL_GPIO_Init+0x320>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d019      	beq.n	8003d3e <HAL_GPIO_Init+0x21a>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a4e      	ldr	r2, [pc, #312]	; (8003e48 <HAL_GPIO_Init+0x324>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d013      	beq.n	8003d3a <HAL_GPIO_Init+0x216>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a4d      	ldr	r2, [pc, #308]	; (8003e4c <HAL_GPIO_Init+0x328>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d00d      	beq.n	8003d36 <HAL_GPIO_Init+0x212>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a4c      	ldr	r2, [pc, #304]	; (8003e50 <HAL_GPIO_Init+0x32c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d007      	beq.n	8003d32 <HAL_GPIO_Init+0x20e>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a4b      	ldr	r2, [pc, #300]	; (8003e54 <HAL_GPIO_Init+0x330>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d101      	bne.n	8003d2e <HAL_GPIO_Init+0x20a>
 8003d2a:	2307      	movs	r3, #7
 8003d2c:	e00e      	b.n	8003d4c <HAL_GPIO_Init+0x228>
 8003d2e:	2308      	movs	r3, #8
 8003d30:	e00c      	b.n	8003d4c <HAL_GPIO_Init+0x228>
 8003d32:	2306      	movs	r3, #6
 8003d34:	e00a      	b.n	8003d4c <HAL_GPIO_Init+0x228>
 8003d36:	2305      	movs	r3, #5
 8003d38:	e008      	b.n	8003d4c <HAL_GPIO_Init+0x228>
 8003d3a:	2304      	movs	r3, #4
 8003d3c:	e006      	b.n	8003d4c <HAL_GPIO_Init+0x228>
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e004      	b.n	8003d4c <HAL_GPIO_Init+0x228>
 8003d42:	2302      	movs	r3, #2
 8003d44:	e002      	b.n	8003d4c <HAL_GPIO_Init+0x228>
 8003d46:	2301      	movs	r3, #1
 8003d48:	e000      	b.n	8003d4c <HAL_GPIO_Init+0x228>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	69fa      	ldr	r2, [r7, #28]
 8003d4e:	f002 0203 	and.w	r2, r2, #3
 8003d52:	0092      	lsls	r2, r2, #2
 8003d54:	4093      	lsls	r3, r2
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d5c:	4935      	ldr	r1, [pc, #212]	; (8003e34 <HAL_GPIO_Init+0x310>)
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	089b      	lsrs	r3, r3, #2
 8003d62:	3302      	adds	r3, #2
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d6a:	4b3b      	ldr	r3, [pc, #236]	; (8003e58 <HAL_GPIO_Init+0x334>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	43db      	mvns	r3, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4013      	ands	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d8e:	4a32      	ldr	r2, [pc, #200]	; (8003e58 <HAL_GPIO_Init+0x334>)
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d94:	4b30      	ldr	r3, [pc, #192]	; (8003e58 <HAL_GPIO_Init+0x334>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4013      	ands	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003db8:	4a27      	ldr	r2, [pc, #156]	; (8003e58 <HAL_GPIO_Init+0x334>)
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dbe:	4b26      	ldr	r3, [pc, #152]	; (8003e58 <HAL_GPIO_Init+0x334>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003de2:	4a1d      	ldr	r2, [pc, #116]	; (8003e58 <HAL_GPIO_Init+0x334>)
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003de8:	4b1b      	ldr	r3, [pc, #108]	; (8003e58 <HAL_GPIO_Init+0x334>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	43db      	mvns	r3, r3
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	4013      	ands	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e0c:	4a12      	ldr	r2, [pc, #72]	; (8003e58 <HAL_GPIO_Init+0x334>)
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	3301      	adds	r3, #1
 8003e16:	61fb      	str	r3, [r7, #28]
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	2b0f      	cmp	r3, #15
 8003e1c:	f67f ae90 	bls.w	8003b40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e20:	bf00      	nop
 8003e22:	bf00      	nop
 8003e24:	3724      	adds	r7, #36	; 0x24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	40023800 	.word	0x40023800
 8003e34:	40013800 	.word	0x40013800
 8003e38:	40020000 	.word	0x40020000
 8003e3c:	40020400 	.word	0x40020400
 8003e40:	40020800 	.word	0x40020800
 8003e44:	40020c00 	.word	0x40020c00
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	40021400 	.word	0x40021400
 8003e50:	40021800 	.word	0x40021800
 8003e54:	40021c00 	.word	0x40021c00
 8003e58:	40013c00 	.word	0x40013c00

08003e5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	460b      	mov	r3, r1
 8003e66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691a      	ldr	r2, [r3, #16]
 8003e6c:	887b      	ldrh	r3, [r7, #2]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e74:	2301      	movs	r3, #1
 8003e76:	73fb      	strb	r3, [r7, #15]
 8003e78:	e001      	b.n	8003e7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	460b      	mov	r3, r1
 8003e96:	807b      	strh	r3, [r7, #2]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e9c:	787b      	ldrb	r3, [r7, #1]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ea2:	887a      	ldrh	r2, [r7, #2]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ea8:	e003      	b.n	8003eb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003eaa:	887b      	ldrh	r3, [r7, #2]
 8003eac:	041a      	lsls	r2, r3, #16
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	619a      	str	r2, [r3, #24]
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
	...

08003ec0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e264      	b.n	800439c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d075      	beq.n	8003fca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ede:	4ba3      	ldr	r3, [pc, #652]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 030c 	and.w	r3, r3, #12
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d00c      	beq.n	8003f04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eea:	4ba0      	ldr	r3, [pc, #640]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ef2:	2b08      	cmp	r3, #8
 8003ef4:	d112      	bne.n	8003f1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ef6:	4b9d      	ldr	r3, [pc, #628]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003efe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f02:	d10b      	bne.n	8003f1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f04:	4b99      	ldr	r3, [pc, #612]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d05b      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x108>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d157      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e23f      	b.n	800439c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f24:	d106      	bne.n	8003f34 <HAL_RCC_OscConfig+0x74>
 8003f26:	4b91      	ldr	r3, [pc, #580]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a90      	ldr	r2, [pc, #576]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	e01d      	b.n	8003f70 <HAL_RCC_OscConfig+0xb0>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f3c:	d10c      	bne.n	8003f58 <HAL_RCC_OscConfig+0x98>
 8003f3e:	4b8b      	ldr	r3, [pc, #556]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a8a      	ldr	r2, [pc, #552]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	4b88      	ldr	r3, [pc, #544]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a87      	ldr	r2, [pc, #540]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	e00b      	b.n	8003f70 <HAL_RCC_OscConfig+0xb0>
 8003f58:	4b84      	ldr	r3, [pc, #528]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a83      	ldr	r2, [pc, #524]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f62:	6013      	str	r3, [r2, #0]
 8003f64:	4b81      	ldr	r3, [pc, #516]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a80      	ldr	r2, [pc, #512]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003f6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d013      	beq.n	8003fa0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f78:	f7fe fd88 	bl	8002a8c <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f80:	f7fe fd84 	bl	8002a8c <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b64      	cmp	r3, #100	; 0x64
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e204      	b.n	800439c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f92:	4b76      	ldr	r3, [pc, #472]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0f0      	beq.n	8003f80 <HAL_RCC_OscConfig+0xc0>
 8003f9e:	e014      	b.n	8003fca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa0:	f7fe fd74 	bl	8002a8c <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fa8:	f7fe fd70 	bl	8002a8c <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b64      	cmp	r3, #100	; 0x64
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e1f0      	b.n	800439c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fba:	4b6c      	ldr	r3, [pc, #432]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1f0      	bne.n	8003fa8 <HAL_RCC_OscConfig+0xe8>
 8003fc6:	e000      	b.n	8003fca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d063      	beq.n	800409e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fd6:	4b65      	ldr	r3, [pc, #404]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 030c 	and.w	r3, r3, #12
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00b      	beq.n	8003ffa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fe2:	4b62      	ldr	r3, [pc, #392]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d11c      	bne.n	8004028 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fee:	4b5f      	ldr	r3, [pc, #380]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d116      	bne.n	8004028 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ffa:	4b5c      	ldr	r3, [pc, #368]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d005      	beq.n	8004012 <HAL_RCC_OscConfig+0x152>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d001      	beq.n	8004012 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e1c4      	b.n	800439c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004012:	4b56      	ldr	r3, [pc, #344]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	4952      	ldr	r1, [pc, #328]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8004022:	4313      	orrs	r3, r2
 8004024:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004026:	e03a      	b.n	800409e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d020      	beq.n	8004072 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004030:	4b4f      	ldr	r3, [pc, #316]	; (8004170 <HAL_RCC_OscConfig+0x2b0>)
 8004032:	2201      	movs	r2, #1
 8004034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004036:	f7fe fd29 	bl	8002a8c <HAL_GetTick>
 800403a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800403c:	e008      	b.n	8004050 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800403e:	f7fe fd25 	bl	8002a8c <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e1a5      	b.n	800439c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004050:	4b46      	ldr	r3, [pc, #280]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0f0      	beq.n	800403e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800405c:	4b43      	ldr	r3, [pc, #268]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	4940      	ldr	r1, [pc, #256]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 800406c:	4313      	orrs	r3, r2
 800406e:	600b      	str	r3, [r1, #0]
 8004070:	e015      	b.n	800409e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004072:	4b3f      	ldr	r3, [pc, #252]	; (8004170 <HAL_RCC_OscConfig+0x2b0>)
 8004074:	2200      	movs	r2, #0
 8004076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004078:	f7fe fd08 	bl	8002a8c <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004080:	f7fe fd04 	bl	8002a8c <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e184      	b.n	800439c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004092:	4b36      	ldr	r3, [pc, #216]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1f0      	bne.n	8004080 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0308 	and.w	r3, r3, #8
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d030      	beq.n	800410c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d016      	beq.n	80040e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040b2:	4b30      	ldr	r3, [pc, #192]	; (8004174 <HAL_RCC_OscConfig+0x2b4>)
 80040b4:	2201      	movs	r2, #1
 80040b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b8:	f7fe fce8 	bl	8002a8c <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040c0:	f7fe fce4 	bl	8002a8c <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e164      	b.n	800439c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040d2:	4b26      	ldr	r3, [pc, #152]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 80040d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0f0      	beq.n	80040c0 <HAL_RCC_OscConfig+0x200>
 80040de:	e015      	b.n	800410c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040e0:	4b24      	ldr	r3, [pc, #144]	; (8004174 <HAL_RCC_OscConfig+0x2b4>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040e6:	f7fe fcd1 	bl	8002a8c <HAL_GetTick>
 80040ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040ec:	e008      	b.n	8004100 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040ee:	f7fe fccd 	bl	8002a8c <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e14d      	b.n	800439c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004100:	4b1a      	ldr	r3, [pc, #104]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8004102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1f0      	bne.n	80040ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 80a0 	beq.w	800425a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800411a:	2300      	movs	r3, #0
 800411c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800411e:	4b13      	ldr	r3, [pc, #76]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10f      	bne.n	800414a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800412a:	2300      	movs	r3, #0
 800412c:	60bb      	str	r3, [r7, #8]
 800412e:	4b0f      	ldr	r3, [pc, #60]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	4a0e      	ldr	r2, [pc, #56]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8004134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004138:	6413      	str	r3, [r2, #64]	; 0x40
 800413a:	4b0c      	ldr	r3, [pc, #48]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004142:	60bb      	str	r3, [r7, #8]
 8004144:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004146:	2301      	movs	r3, #1
 8004148:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800414a:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <HAL_RCC_OscConfig+0x2b8>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004152:	2b00      	cmp	r3, #0
 8004154:	d121      	bne.n	800419a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004156:	4b08      	ldr	r3, [pc, #32]	; (8004178 <HAL_RCC_OscConfig+0x2b8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a07      	ldr	r2, [pc, #28]	; (8004178 <HAL_RCC_OscConfig+0x2b8>)
 800415c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004160:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004162:	f7fe fc93 	bl	8002a8c <HAL_GetTick>
 8004166:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004168:	e011      	b.n	800418e <HAL_RCC_OscConfig+0x2ce>
 800416a:	bf00      	nop
 800416c:	40023800 	.word	0x40023800
 8004170:	42470000 	.word	0x42470000
 8004174:	42470e80 	.word	0x42470e80
 8004178:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800417c:	f7fe fc86 	bl	8002a8c <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e106      	b.n	800439c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800418e:	4b85      	ldr	r3, [pc, #532]	; (80043a4 <HAL_RCC_OscConfig+0x4e4>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0f0      	beq.n	800417c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d106      	bne.n	80041b0 <HAL_RCC_OscConfig+0x2f0>
 80041a2:	4b81      	ldr	r3, [pc, #516]	; (80043a8 <HAL_RCC_OscConfig+0x4e8>)
 80041a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a6:	4a80      	ldr	r2, [pc, #512]	; (80043a8 <HAL_RCC_OscConfig+0x4e8>)
 80041a8:	f043 0301 	orr.w	r3, r3, #1
 80041ac:	6713      	str	r3, [r2, #112]	; 0x70
 80041ae:	e01c      	b.n	80041ea <HAL_RCC_OscConfig+0x32a>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	2b05      	cmp	r3, #5
 80041b6:	d10c      	bne.n	80041d2 <HAL_RCC_OscConfig+0x312>
 80041b8:	4b7b      	ldr	r3, [pc, #492]	; (80043a8 <HAL_RCC_OscConfig+0x4e8>)
 80041ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041bc:	4a7a      	ldr	r2, [pc, #488]	; (80043a8 <HAL_RCC_OscConfig+0x4e8>)
 80041be:	f043 0304 	orr.w	r3, r3, #4
 80041c2:	6713      	str	r3, [r2, #112]	; 0x70
 80041c4:	4b78      	ldr	r3, [pc, #480]	; (80043a8 <HAL_RCC_OscConfig+0x4e8>)
 80041c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c8:	4a77      	ldr	r2, [pc, #476]	; (80043a8 <HAL_RCC_OscConfig+0x4e8>)
 80041ca:	f043 0301 	orr.w	r3, r3, #1
 80041ce:	6713      	str	r3, [r2, #112]	; 0x70
 80041d0:	e00b      	b.n	80041ea <HAL_RCC_OscConfig+0x32a>
 80041d2:	4b75      	ldr	r3, [pc, #468]	; (80043a8 <HAL_RCC_OscConfig+0x4e8>)
 80041d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d6:	4a74      	ldr	r2, [pc, #464]	; (80043a8 <HAL_RCC_OscConfig+0x4e8>)
 80041d8:	f023 0301 	bic.w	r3, r3, #1
 80041dc:	6713      	str	r3, [r2, #112]	; 0x70
 80041de:	4b72      	ldr	r3, [pc, #456]	; (80043a8 <HAL_RCC_OscConfig+0x4e8>)
 80041e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e2:	4a71      	ldr	r2, [pc, #452]	; (80043a8 <HAL_RCC_OscConfig+0x4e8>)
 80041e4:	f023 0304 	bic.w	r3, r3, #4
 80041e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d015      	beq.n	800421e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f2:	f7fe fc4b 	bl	8002a8c <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f8:	e00a      	b.n	8004210 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041fa:	f7fe fc47 	bl	8002a8c <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	f241 3288 	movw	r2, #5000	; 0x1388
 8004208:	4293      	cmp	r3, r2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e0c5      	b.n	800439c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004210:	4b65      	ldr	r3, [pc, #404]	; (80043a8 <HAL_RCC_OscConfig+0x4e8>)
 8004212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0ee      	beq.n	80041fa <HAL_RCC_OscConfig+0x33a>
 800421c:	e014      	b.n	8004248 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800421e:	f7fe fc35 	bl	8002a8c <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004224:	e00a      	b.n	800423c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004226:	f7fe fc31 	bl	8002a8c <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	f241 3288 	movw	r2, #5000	; 0x1388
 8004234:	4293      	cmp	r3, r2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e0af      	b.n	800439c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800423c:	4b5a      	ldr	r3, [pc, #360]	; (80043a8 <HAL_RCC_OscConfig+0x4e8>)
 800423e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1ee      	bne.n	8004226 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004248:	7dfb      	ldrb	r3, [r7, #23]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d105      	bne.n	800425a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800424e:	4b56      	ldr	r3, [pc, #344]	; (80043a8 <HAL_RCC_OscConfig+0x4e8>)
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	4a55      	ldr	r2, [pc, #340]	; (80043a8 <HAL_RCC_OscConfig+0x4e8>)
 8004254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004258:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 809b 	beq.w	800439a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004264:	4b50      	ldr	r3, [pc, #320]	; (80043a8 <HAL_RCC_OscConfig+0x4e8>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 030c 	and.w	r3, r3, #12
 800426c:	2b08      	cmp	r3, #8
 800426e:	d05c      	beq.n	800432a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	2b02      	cmp	r3, #2
 8004276:	d141      	bne.n	80042fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004278:	4b4c      	ldr	r3, [pc, #304]	; (80043ac <HAL_RCC_OscConfig+0x4ec>)
 800427a:	2200      	movs	r2, #0
 800427c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427e:	f7fe fc05 	bl	8002a8c <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004284:	e008      	b.n	8004298 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004286:	f7fe fc01 	bl	8002a8c <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e081      	b.n	800439c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004298:	4b43      	ldr	r3, [pc, #268]	; (80043a8 <HAL_RCC_OscConfig+0x4e8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1f0      	bne.n	8004286 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	69da      	ldr	r2, [r3, #28]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	431a      	orrs	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	019b      	lsls	r3, r3, #6
 80042b4:	431a      	orrs	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ba:	085b      	lsrs	r3, r3, #1
 80042bc:	3b01      	subs	r3, #1
 80042be:	041b      	lsls	r3, r3, #16
 80042c0:	431a      	orrs	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c6:	061b      	lsls	r3, r3, #24
 80042c8:	4937      	ldr	r1, [pc, #220]	; (80043a8 <HAL_RCC_OscConfig+0x4e8>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042ce:	4b37      	ldr	r3, [pc, #220]	; (80043ac <HAL_RCC_OscConfig+0x4ec>)
 80042d0:	2201      	movs	r2, #1
 80042d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d4:	f7fe fbda 	bl	8002a8c <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042dc:	f7fe fbd6 	bl	8002a8c <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e056      	b.n	800439c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ee:	4b2e      	ldr	r3, [pc, #184]	; (80043a8 <HAL_RCC_OscConfig+0x4e8>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0f0      	beq.n	80042dc <HAL_RCC_OscConfig+0x41c>
 80042fa:	e04e      	b.n	800439a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042fc:	4b2b      	ldr	r3, [pc, #172]	; (80043ac <HAL_RCC_OscConfig+0x4ec>)
 80042fe:	2200      	movs	r2, #0
 8004300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004302:	f7fe fbc3 	bl	8002a8c <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800430a:	f7fe fbbf 	bl	8002a8c <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e03f      	b.n	800439c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800431c:	4b22      	ldr	r3, [pc, #136]	; (80043a8 <HAL_RCC_OscConfig+0x4e8>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1f0      	bne.n	800430a <HAL_RCC_OscConfig+0x44a>
 8004328:	e037      	b.n	800439a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d101      	bne.n	8004336 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e032      	b.n	800439c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004336:	4b1c      	ldr	r3, [pc, #112]	; (80043a8 <HAL_RCC_OscConfig+0x4e8>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d028      	beq.n	8004396 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800434e:	429a      	cmp	r2, r3
 8004350:	d121      	bne.n	8004396 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800435c:	429a      	cmp	r2, r3
 800435e:	d11a      	bne.n	8004396 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004366:	4013      	ands	r3, r2
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800436c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800436e:	4293      	cmp	r3, r2
 8004370:	d111      	bne.n	8004396 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437c:	085b      	lsrs	r3, r3, #1
 800437e:	3b01      	subs	r3, #1
 8004380:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004382:	429a      	cmp	r2, r3
 8004384:	d107      	bne.n	8004396 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004390:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004392:	429a      	cmp	r2, r3
 8004394:	d001      	beq.n	800439a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3718      	adds	r7, #24
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40007000 	.word	0x40007000
 80043a8:	40023800 	.word	0x40023800
 80043ac:	42470060 	.word	0x42470060

080043b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d101      	bne.n	80043c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e0cc      	b.n	800455e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043c4:	4b68      	ldr	r3, [pc, #416]	; (8004568 <HAL_RCC_ClockConfig+0x1b8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 030f 	and.w	r3, r3, #15
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d90c      	bls.n	80043ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043d2:	4b65      	ldr	r3, [pc, #404]	; (8004568 <HAL_RCC_ClockConfig+0x1b8>)
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043da:	4b63      	ldr	r3, [pc, #396]	; (8004568 <HAL_RCC_ClockConfig+0x1b8>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d001      	beq.n	80043ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e0b8      	b.n	800455e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d020      	beq.n	800443a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	d005      	beq.n	8004410 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004404:	4b59      	ldr	r3, [pc, #356]	; (800456c <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	4a58      	ldr	r2, [pc, #352]	; (800456c <HAL_RCC_ClockConfig+0x1bc>)
 800440a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800440e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0308 	and.w	r3, r3, #8
 8004418:	2b00      	cmp	r3, #0
 800441a:	d005      	beq.n	8004428 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800441c:	4b53      	ldr	r3, [pc, #332]	; (800456c <HAL_RCC_ClockConfig+0x1bc>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	4a52      	ldr	r2, [pc, #328]	; (800456c <HAL_RCC_ClockConfig+0x1bc>)
 8004422:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004426:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004428:	4b50      	ldr	r3, [pc, #320]	; (800456c <HAL_RCC_ClockConfig+0x1bc>)
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	494d      	ldr	r1, [pc, #308]	; (800456c <HAL_RCC_ClockConfig+0x1bc>)
 8004436:	4313      	orrs	r3, r2
 8004438:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d044      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d107      	bne.n	800445e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800444e:	4b47      	ldr	r3, [pc, #284]	; (800456c <HAL_RCC_ClockConfig+0x1bc>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d119      	bne.n	800448e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e07f      	b.n	800455e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2b02      	cmp	r3, #2
 8004464:	d003      	beq.n	800446e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800446a:	2b03      	cmp	r3, #3
 800446c:	d107      	bne.n	800447e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800446e:	4b3f      	ldr	r3, [pc, #252]	; (800456c <HAL_RCC_ClockConfig+0x1bc>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d109      	bne.n	800448e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e06f      	b.n	800455e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800447e:	4b3b      	ldr	r3, [pc, #236]	; (800456c <HAL_RCC_ClockConfig+0x1bc>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e067      	b.n	800455e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800448e:	4b37      	ldr	r3, [pc, #220]	; (800456c <HAL_RCC_ClockConfig+0x1bc>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f023 0203 	bic.w	r2, r3, #3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	4934      	ldr	r1, [pc, #208]	; (800456c <HAL_RCC_ClockConfig+0x1bc>)
 800449c:	4313      	orrs	r3, r2
 800449e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044a0:	f7fe faf4 	bl	8002a8c <HAL_GetTick>
 80044a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044a6:	e00a      	b.n	80044be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044a8:	f7fe faf0 	bl	8002a8c <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e04f      	b.n	800455e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044be:	4b2b      	ldr	r3, [pc, #172]	; (800456c <HAL_RCC_ClockConfig+0x1bc>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 020c 	and.w	r2, r3, #12
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d1eb      	bne.n	80044a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044d0:	4b25      	ldr	r3, [pc, #148]	; (8004568 <HAL_RCC_ClockConfig+0x1b8>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 030f 	and.w	r3, r3, #15
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d20c      	bcs.n	80044f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044de:	4b22      	ldr	r3, [pc, #136]	; (8004568 <HAL_RCC_ClockConfig+0x1b8>)
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	b2d2      	uxtb	r2, r2
 80044e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e6:	4b20      	ldr	r3, [pc, #128]	; (8004568 <HAL_RCC_ClockConfig+0x1b8>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 030f 	and.w	r3, r3, #15
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d001      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e032      	b.n	800455e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	d008      	beq.n	8004516 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004504:	4b19      	ldr	r3, [pc, #100]	; (800456c <HAL_RCC_ClockConfig+0x1bc>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	4916      	ldr	r1, [pc, #88]	; (800456c <HAL_RCC_ClockConfig+0x1bc>)
 8004512:	4313      	orrs	r3, r2
 8004514:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0308 	and.w	r3, r3, #8
 800451e:	2b00      	cmp	r3, #0
 8004520:	d009      	beq.n	8004536 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004522:	4b12      	ldr	r3, [pc, #72]	; (800456c <HAL_RCC_ClockConfig+0x1bc>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	490e      	ldr	r1, [pc, #56]	; (800456c <HAL_RCC_ClockConfig+0x1bc>)
 8004532:	4313      	orrs	r3, r2
 8004534:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004536:	f000 f821 	bl	800457c <HAL_RCC_GetSysClockFreq>
 800453a:	4602      	mov	r2, r0
 800453c:	4b0b      	ldr	r3, [pc, #44]	; (800456c <HAL_RCC_ClockConfig+0x1bc>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	091b      	lsrs	r3, r3, #4
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	490a      	ldr	r1, [pc, #40]	; (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 8004548:	5ccb      	ldrb	r3, [r1, r3]
 800454a:	fa22 f303 	lsr.w	r3, r2, r3
 800454e:	4a09      	ldr	r2, [pc, #36]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004552:	4b09      	ldr	r3, [pc, #36]	; (8004578 <HAL_RCC_ClockConfig+0x1c8>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4618      	mov	r0, r3
 8004558:	f7fe fa54 	bl	8002a04 <HAL_InitTick>

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	40023c00 	.word	0x40023c00
 800456c:	40023800 	.word	0x40023800
 8004570:	08006d54 	.word	0x08006d54
 8004574:	20000008 	.word	0x20000008
 8004578:	2000000c 	.word	0x2000000c

0800457c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800457c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004580:	b084      	sub	sp, #16
 8004582:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	607b      	str	r3, [r7, #4]
 8004588:	2300      	movs	r3, #0
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	2300      	movs	r3, #0
 800458e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004590:	2300      	movs	r3, #0
 8004592:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004594:	4b67      	ldr	r3, [pc, #412]	; (8004734 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f003 030c 	and.w	r3, r3, #12
 800459c:	2b08      	cmp	r3, #8
 800459e:	d00d      	beq.n	80045bc <HAL_RCC_GetSysClockFreq+0x40>
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	f200 80bd 	bhi.w	8004720 <HAL_RCC_GetSysClockFreq+0x1a4>
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <HAL_RCC_GetSysClockFreq+0x34>
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d003      	beq.n	80045b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80045ae:	e0b7      	b.n	8004720 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045b0:	4b61      	ldr	r3, [pc, #388]	; (8004738 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80045b2:	60bb      	str	r3, [r7, #8]
       break;
 80045b4:	e0b7      	b.n	8004726 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045b6:	4b61      	ldr	r3, [pc, #388]	; (800473c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80045b8:	60bb      	str	r3, [r7, #8]
      break;
 80045ba:	e0b4      	b.n	8004726 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045bc:	4b5d      	ldr	r3, [pc, #372]	; (8004734 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045c6:	4b5b      	ldr	r3, [pc, #364]	; (8004734 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d04d      	beq.n	800466e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045d2:	4b58      	ldr	r3, [pc, #352]	; (8004734 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	099b      	lsrs	r3, r3, #6
 80045d8:	461a      	mov	r2, r3
 80045da:	f04f 0300 	mov.w	r3, #0
 80045de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80045e2:	f04f 0100 	mov.w	r1, #0
 80045e6:	ea02 0800 	and.w	r8, r2, r0
 80045ea:	ea03 0901 	and.w	r9, r3, r1
 80045ee:	4640      	mov	r0, r8
 80045f0:	4649      	mov	r1, r9
 80045f2:	f04f 0200 	mov.w	r2, #0
 80045f6:	f04f 0300 	mov.w	r3, #0
 80045fa:	014b      	lsls	r3, r1, #5
 80045fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004600:	0142      	lsls	r2, r0, #5
 8004602:	4610      	mov	r0, r2
 8004604:	4619      	mov	r1, r3
 8004606:	ebb0 0008 	subs.w	r0, r0, r8
 800460a:	eb61 0109 	sbc.w	r1, r1, r9
 800460e:	f04f 0200 	mov.w	r2, #0
 8004612:	f04f 0300 	mov.w	r3, #0
 8004616:	018b      	lsls	r3, r1, #6
 8004618:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800461c:	0182      	lsls	r2, r0, #6
 800461e:	1a12      	subs	r2, r2, r0
 8004620:	eb63 0301 	sbc.w	r3, r3, r1
 8004624:	f04f 0000 	mov.w	r0, #0
 8004628:	f04f 0100 	mov.w	r1, #0
 800462c:	00d9      	lsls	r1, r3, #3
 800462e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004632:	00d0      	lsls	r0, r2, #3
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	eb12 0208 	adds.w	r2, r2, r8
 800463c:	eb43 0309 	adc.w	r3, r3, r9
 8004640:	f04f 0000 	mov.w	r0, #0
 8004644:	f04f 0100 	mov.w	r1, #0
 8004648:	0259      	lsls	r1, r3, #9
 800464a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800464e:	0250      	lsls	r0, r2, #9
 8004650:	4602      	mov	r2, r0
 8004652:	460b      	mov	r3, r1
 8004654:	4610      	mov	r0, r2
 8004656:	4619      	mov	r1, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	461a      	mov	r2, r3
 800465c:	f04f 0300 	mov.w	r3, #0
 8004660:	f7fb fdb2 	bl	80001c8 <__aeabi_uldivmod>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	4613      	mov	r3, r2
 800466a:	60fb      	str	r3, [r7, #12]
 800466c:	e04a      	b.n	8004704 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800466e:	4b31      	ldr	r3, [pc, #196]	; (8004734 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	099b      	lsrs	r3, r3, #6
 8004674:	461a      	mov	r2, r3
 8004676:	f04f 0300 	mov.w	r3, #0
 800467a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800467e:	f04f 0100 	mov.w	r1, #0
 8004682:	ea02 0400 	and.w	r4, r2, r0
 8004686:	ea03 0501 	and.w	r5, r3, r1
 800468a:	4620      	mov	r0, r4
 800468c:	4629      	mov	r1, r5
 800468e:	f04f 0200 	mov.w	r2, #0
 8004692:	f04f 0300 	mov.w	r3, #0
 8004696:	014b      	lsls	r3, r1, #5
 8004698:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800469c:	0142      	lsls	r2, r0, #5
 800469e:	4610      	mov	r0, r2
 80046a0:	4619      	mov	r1, r3
 80046a2:	1b00      	subs	r0, r0, r4
 80046a4:	eb61 0105 	sbc.w	r1, r1, r5
 80046a8:	f04f 0200 	mov.w	r2, #0
 80046ac:	f04f 0300 	mov.w	r3, #0
 80046b0:	018b      	lsls	r3, r1, #6
 80046b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80046b6:	0182      	lsls	r2, r0, #6
 80046b8:	1a12      	subs	r2, r2, r0
 80046ba:	eb63 0301 	sbc.w	r3, r3, r1
 80046be:	f04f 0000 	mov.w	r0, #0
 80046c2:	f04f 0100 	mov.w	r1, #0
 80046c6:	00d9      	lsls	r1, r3, #3
 80046c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046cc:	00d0      	lsls	r0, r2, #3
 80046ce:	4602      	mov	r2, r0
 80046d0:	460b      	mov	r3, r1
 80046d2:	1912      	adds	r2, r2, r4
 80046d4:	eb45 0303 	adc.w	r3, r5, r3
 80046d8:	f04f 0000 	mov.w	r0, #0
 80046dc:	f04f 0100 	mov.w	r1, #0
 80046e0:	0299      	lsls	r1, r3, #10
 80046e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80046e6:	0290      	lsls	r0, r2, #10
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	4610      	mov	r0, r2
 80046ee:	4619      	mov	r1, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	461a      	mov	r2, r3
 80046f4:	f04f 0300 	mov.w	r3, #0
 80046f8:	f7fb fd66 	bl	80001c8 <__aeabi_uldivmod>
 80046fc:	4602      	mov	r2, r0
 80046fe:	460b      	mov	r3, r1
 8004700:	4613      	mov	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004704:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	0c1b      	lsrs	r3, r3, #16
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	3301      	adds	r3, #1
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	fbb2 f3f3 	udiv	r3, r2, r3
 800471c:	60bb      	str	r3, [r7, #8]
      break;
 800471e:	e002      	b.n	8004726 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004720:	4b05      	ldr	r3, [pc, #20]	; (8004738 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004722:	60bb      	str	r3, [r7, #8]
      break;
 8004724:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004726:	68bb      	ldr	r3, [r7, #8]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004732:	bf00      	nop
 8004734:	40023800 	.word	0x40023800
 8004738:	00f42400 	.word	0x00f42400
 800473c:	007a1200 	.word	0x007a1200

08004740 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e07b      	b.n	800484a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	2b00      	cmp	r3, #0
 8004758:	d108      	bne.n	800476c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004762:	d009      	beq.n	8004778 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	61da      	str	r2, [r3, #28]
 800476a:	e005      	b.n	8004778 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d106      	bne.n	8004798 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7fc ff34 	bl	8001600 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	431a      	orrs	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047e8:	431a      	orrs	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047fc:	ea42 0103 	orr.w	r1, r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004804:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	0c1b      	lsrs	r3, r3, #16
 8004816:	f003 0104 	and.w	r1, r3, #4
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	f003 0210 	and.w	r2, r3, #16
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	69da      	ldr	r2, [r3, #28]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004838:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
	...

08004854 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	4613      	mov	r3, r2
 8004860:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d110      	bne.n	8004890 <HAL_SPI_Receive_DMA+0x3c>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004876:	d10b      	bne.n	8004890 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2204      	movs	r2, #4
 800487c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8004880:	88fb      	ldrh	r3, [r7, #6]
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	68b9      	ldr	r1, [r7, #8]
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 f8ac 	bl	80049e4 <HAL_SPI_TransmitReceive_DMA>
 800488c:	4603      	mov	r3, r0
 800488e:	e09f      	b.n	80049d0 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004896:	2b01      	cmp	r3, #1
 8004898:	d101      	bne.n	800489e <HAL_SPI_Receive_DMA+0x4a>
 800489a:	2302      	movs	r3, #2
 800489c:	e098      	b.n	80049d0 <HAL_SPI_Receive_DMA+0x17c>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d002      	beq.n	80048b8 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 80048b2:	2302      	movs	r3, #2
 80048b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80048b6:	e086      	b.n	80049c6 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d002      	beq.n	80048c4 <HAL_SPI_Receive_DMA+0x70>
 80048be:	88fb      	ldrh	r3, [r7, #6]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d102      	bne.n	80048ca <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80048c8:	e07d      	b.n	80049c6 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2204      	movs	r2, #4
 80048ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	88fa      	ldrh	r2, [r7, #6]
 80048e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	88fa      	ldrh	r2, [r7, #6]
 80048e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800490a:	d10f      	bne.n	800492c <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800491a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800492a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004930:	4a29      	ldr	r2, [pc, #164]	; (80049d8 <HAL_SPI_Receive_DMA+0x184>)
 8004932:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004938:	4a28      	ldr	r2, [pc, #160]	; (80049dc <HAL_SPI_Receive_DMA+0x188>)
 800493a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004940:	4a27      	ldr	r2, [pc, #156]	; (80049e0 <HAL_SPI_Receive_DMA+0x18c>)
 8004942:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004948:	2200      	movs	r2, #0
 800494a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	330c      	adds	r3, #12
 8004956:	4619      	mov	r1, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004962:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004964:	f7fe ffa6 	bl	80038b4 <HAL_DMA_Start_IT>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00c      	beq.n	8004988 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004972:	f043 0210 	orr.w	r2, r3, #16
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004986:	e01e      	b.n	80049c6 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004992:	2b40      	cmp	r3, #64	; 0x40
 8004994:	d007      	beq.n	80049a6 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049a4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f042 0220 	orr.w	r2, r2, #32
 80049b4:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f042 0201 	orr.w	r2, r2, #1
 80049c4:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3718      	adds	r7, #24
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	08004d85 	.word	0x08004d85
 80049dc:	08004c4d 	.word	0x08004c4d
 80049e0:	08004dbd 	.word	0x08004dbd

080049e4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
 80049f0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049f2:	2300      	movs	r3, #0
 80049f4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d101      	bne.n	8004a04 <HAL_SPI_TransmitReceive_DMA+0x20>
 8004a00:	2302      	movs	r3, #2
 8004a02:	e0e3      	b.n	8004bcc <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a12:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004a1a:	7dbb      	ldrb	r3, [r7, #22]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d00d      	beq.n	8004a3c <HAL_SPI_TransmitReceive_DMA+0x58>
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a26:	d106      	bne.n	8004a36 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d102      	bne.n	8004a36 <HAL_SPI_TransmitReceive_DMA+0x52>
 8004a30:	7dbb      	ldrb	r3, [r7, #22]
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	d002      	beq.n	8004a3c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8004a36:	2302      	movs	r3, #2
 8004a38:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a3a:	e0c2      	b.n	8004bc2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d005      	beq.n	8004a4e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d002      	beq.n	8004a4e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004a48:	887b      	ldrh	r3, [r7, #2]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d102      	bne.n	8004a54 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a52:	e0b6      	b.n	8004bc2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d003      	beq.n	8004a68 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2205      	movs	r2, #5
 8004a64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	887a      	ldrh	r2, [r7, #2]
 8004a78:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	887a      	ldrh	r2, [r7, #2]
 8004a7e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	887a      	ldrh	r2, [r7, #2]
 8004a8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	887a      	ldrh	r2, [r7, #2]
 8004a90:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b04      	cmp	r3, #4
 8004aa8:	d108      	bne.n	8004abc <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aae:	4a49      	ldr	r2, [pc, #292]	; (8004bd4 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8004ab0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab6:	4a48      	ldr	r2, [pc, #288]	; (8004bd8 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8004ab8:	63da      	str	r2, [r3, #60]	; 0x3c
 8004aba:	e007      	b.n	8004acc <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ac0:	4a46      	ldr	r2, [pc, #280]	; (8004bdc <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8004ac2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ac8:	4a45      	ldr	r2, [pc, #276]	; (8004be0 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8004aca:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad0:	4a44      	ldr	r2, [pc, #272]	; (8004be4 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8004ad2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad8:	2200      	movs	r2, #0
 8004ada:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	330c      	adds	r3, #12
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aec:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004af2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004af4:	f7fe fede 	bl	80038b4 <HAL_DMA_Start_IT>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00c      	beq.n	8004b18 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b02:	f043 0210 	orr.w	r2, r3, #16
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004b16:	e054      	b.n	8004bc2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 0201 	orr.w	r2, r2, #1
 8004b26:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b34:	2200      	movs	r2, #0
 8004b36:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b44:	2200      	movs	r2, #0
 8004b46:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b50:	4619      	mov	r1, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	330c      	adds	r3, #12
 8004b58:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b5e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004b60:	f7fe fea8 	bl	80038b4 <HAL_DMA_Start_IT>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00c      	beq.n	8004b84 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6e:	f043 0210 	orr.w	r2, r3, #16
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004b82:	e01e      	b.n	8004bc2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8e:	2b40      	cmp	r3, #64	; 0x40
 8004b90:	d007      	beq.n	8004ba2 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ba0:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f042 0220 	orr.w	r2, r2, #32
 8004bb0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f042 0202 	orr.w	r2, r2, #2
 8004bc0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3718      	adds	r7, #24
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	08004d85 	.word	0x08004d85
 8004bd8:	08004c4d 	.word	0x08004c4d
 8004bdc:	08004da1 	.word	0x08004da1
 8004be0:	08004cf5 	.word	0x08004cf5
 8004be4:	08004dbd 	.word	0x08004dbd

08004be8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c58:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c5a:	f7fd ff17 	bl	8002a8c <HAL_GetTick>
 8004c5e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c6e:	d03b      	beq.n	8004ce8 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0220 	bic.w	r2, r2, #32
 8004c7e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10d      	bne.n	8004ca4 <SPI_DMAReceiveCplt+0x58>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c90:	d108      	bne.n	8004ca4 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0203 	bic.w	r2, r2, #3
 8004ca0:	605a      	str	r2, [r3, #4]
 8004ca2:	e007      	b.n	8004cb4 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 0201 	bic.w	r2, r2, #1
 8004cb2:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	2164      	movs	r1, #100	; 0x64
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 f927 	bl	8004f0c <SPI_EndRxTransaction>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d003      	beq.n	8004ce8 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f7ff ffa9 	bl	8004c38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004ce6:	e002      	b.n	8004cee <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f7ff ff7d 	bl	8004be8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d00:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d02:	f7fd fec3 	bl	8002a8c <HAL_GetTick>
 8004d06:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d16:	d02f      	beq.n	8004d78 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0220 	bic.w	r2, r2, #32
 8004d26:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	2164      	movs	r1, #100	; 0x64
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 f953 	bl	8004fd8 <SPI_EndRxTxTransaction>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d005      	beq.n	8004d44 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3c:	f043 0220 	orr.w	r2, r3, #32
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0203 	bic.w	r2, r2, #3
 8004d52:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f7ff ff61 	bl	8004c38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004d76:	e002      	b.n	8004d7e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f7ff ff3f 	bl	8004bfc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d90:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f7ff ff3c 	bl	8004c10 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d98:	bf00      	nop
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dac:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f7ff ff38 	bl	8004c24 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004db4:	bf00      	nop
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0203 	bic.w	r2, r2, #3
 8004dd8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dde:	f043 0210 	orr.w	r2, r3, #16
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f7ff ff22 	bl	8004c38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004df4:	bf00      	nop
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b088      	sub	sp, #32
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	603b      	str	r3, [r7, #0]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e0c:	f7fd fe3e 	bl	8002a8c <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e14:	1a9b      	subs	r3, r3, r2
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	4413      	add	r3, r2
 8004e1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e1c:	f7fd fe36 	bl	8002a8c <HAL_GetTick>
 8004e20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e22:	4b39      	ldr	r3, [pc, #228]	; (8004f08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	015b      	lsls	r3, r3, #5
 8004e28:	0d1b      	lsrs	r3, r3, #20
 8004e2a:	69fa      	ldr	r2, [r7, #28]
 8004e2c:	fb02 f303 	mul.w	r3, r2, r3
 8004e30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e32:	e054      	b.n	8004ede <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3a:	d050      	beq.n	8004ede <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e3c:	f7fd fe26 	bl	8002a8c <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	69fa      	ldr	r2, [r7, #28]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d902      	bls.n	8004e52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d13d      	bne.n	8004ece <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e6a:	d111      	bne.n	8004e90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e74:	d004      	beq.n	8004e80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e7e:	d107      	bne.n	8004e90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e98:	d10f      	bne.n	8004eba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004eb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e017      	b.n	8004efe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	3b01      	subs	r3, #1
 8004edc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	bf0c      	ite	eq
 8004eee:	2301      	moveq	r3, #1
 8004ef0:	2300      	movne	r3, #0
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	79fb      	ldrb	r3, [r7, #7]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d19b      	bne.n	8004e34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3720      	adds	r7, #32
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	20000008 	.word	0x20000008

08004f0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af02      	add	r7, sp, #8
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f20:	d111      	bne.n	8004f46 <SPI_EndRxTransaction+0x3a>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f2a:	d004      	beq.n	8004f36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f34:	d107      	bne.n	8004f46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f44:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f4e:	d12a      	bne.n	8004fa6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f58:	d012      	beq.n	8004f80 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	2200      	movs	r2, #0
 8004f62:	2180      	movs	r1, #128	; 0x80
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f7ff ff49 	bl	8004dfc <SPI_WaitFlagStateUntilTimeout>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d02d      	beq.n	8004fcc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f74:	f043 0220 	orr.w	r2, r3, #32
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e026      	b.n	8004fce <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	2200      	movs	r2, #0
 8004f88:	2101      	movs	r1, #1
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f7ff ff36 	bl	8004dfc <SPI_WaitFlagStateUntilTimeout>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d01a      	beq.n	8004fcc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9a:	f043 0220 	orr.w	r2, r3, #32
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e013      	b.n	8004fce <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	2200      	movs	r2, #0
 8004fae:	2101      	movs	r1, #1
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f7ff ff23 	bl	8004dfc <SPI_WaitFlagStateUntilTimeout>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d007      	beq.n	8004fcc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc0:	f043 0220 	orr.w	r2, r3, #32
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e000      	b.n	8004fce <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
	...

08004fd8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b088      	sub	sp, #32
 8004fdc:	af02      	add	r7, sp, #8
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004fe4:	4b1b      	ldr	r3, [pc, #108]	; (8005054 <SPI_EndRxTxTransaction+0x7c>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a1b      	ldr	r2, [pc, #108]	; (8005058 <SPI_EndRxTxTransaction+0x80>)
 8004fea:	fba2 2303 	umull	r2, r3, r2, r3
 8004fee:	0d5b      	lsrs	r3, r3, #21
 8004ff0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ff4:	fb02 f303 	mul.w	r3, r2, r3
 8004ff8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005002:	d112      	bne.n	800502a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2200      	movs	r2, #0
 800500c:	2180      	movs	r1, #128	; 0x80
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f7ff fef4 	bl	8004dfc <SPI_WaitFlagStateUntilTimeout>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d016      	beq.n	8005048 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501e:	f043 0220 	orr.w	r2, r3, #32
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e00f      	b.n	800504a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00a      	beq.n	8005046 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	3b01      	subs	r3, #1
 8005034:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005040:	2b80      	cmp	r3, #128	; 0x80
 8005042:	d0f2      	beq.n	800502a <SPI_EndRxTxTransaction+0x52>
 8005044:	e000      	b.n	8005048 <SPI_EndRxTxTransaction+0x70>
        break;
 8005046:	bf00      	nop
  }

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3718      	adds	r7, #24
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	20000008 	.word	0x20000008
 8005058:	165e9f81 	.word	0x165e9f81

0800505c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e041      	b.n	80050f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d106      	bne.n	8005088 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7fc fb6e 	bl	8001764 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3304      	adds	r3, #4
 8005098:	4619      	mov	r1, r3
 800509a:	4610      	mov	r0, r2
 800509c:	f000 fd70 	bl	8005b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b01      	cmp	r3, #1
 800510e:	d001      	beq.n	8005114 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e04e      	b.n	80051b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68da      	ldr	r2, [r3, #12]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0201 	orr.w	r2, r2, #1
 800512a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a23      	ldr	r2, [pc, #140]	; (80051c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d022      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x80>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800513e:	d01d      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x80>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a1f      	ldr	r2, [pc, #124]	; (80051c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d018      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x80>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a1e      	ldr	r2, [pc, #120]	; (80051c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d013      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x80>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a1c      	ldr	r2, [pc, #112]	; (80051cc <HAL_TIM_Base_Start_IT+0xd0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00e      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x80>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a1b      	ldr	r2, [pc, #108]	; (80051d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d009      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x80>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a19      	ldr	r2, [pc, #100]	; (80051d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d004      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x80>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a18      	ldr	r2, [pc, #96]	; (80051d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d111      	bne.n	80051a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2b06      	cmp	r3, #6
 800518c:	d010      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f042 0201 	orr.w	r2, r2, #1
 800519c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800519e:	e007      	b.n	80051b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f042 0201 	orr.w	r2, r2, #1
 80051ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	40010000 	.word	0x40010000
 80051c4:	40000400 	.word	0x40000400
 80051c8:	40000800 	.word	0x40000800
 80051cc:	40000c00 	.word	0x40000c00
 80051d0:	40010400 	.word	0x40010400
 80051d4:	40014000 	.word	0x40014000
 80051d8:	40001800 	.word	0x40001800

080051dc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e041      	b.n	8005272 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d106      	bne.n	8005208 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f839 	bl	800527a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3304      	adds	r3, #4
 8005218:	4619      	mov	r1, r3
 800521a:	4610      	mov	r0, r2
 800521c:	f000 fcb0 	bl	8005b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800527a:	b480      	push	{r7}
 800527c:	b083      	sub	sp, #12
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005282:	bf00      	nop
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
	...

08005290 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d109      	bne.n	80052b4 <HAL_TIM_OC_Start+0x24>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	bf14      	ite	ne
 80052ac:	2301      	movne	r3, #1
 80052ae:	2300      	moveq	r3, #0
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	e022      	b.n	80052fa <HAL_TIM_OC_Start+0x6a>
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d109      	bne.n	80052ce <HAL_TIM_OC_Start+0x3e>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	bf14      	ite	ne
 80052c6:	2301      	movne	r3, #1
 80052c8:	2300      	moveq	r3, #0
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	e015      	b.n	80052fa <HAL_TIM_OC_Start+0x6a>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d109      	bne.n	80052e8 <HAL_TIM_OC_Start+0x58>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b01      	cmp	r3, #1
 80052de:	bf14      	ite	ne
 80052e0:	2301      	movne	r3, #1
 80052e2:	2300      	moveq	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	e008      	b.n	80052fa <HAL_TIM_OC_Start+0x6a>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	bf14      	ite	ne
 80052f4:	2301      	movne	r3, #1
 80052f6:	2300      	moveq	r3, #0
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e07c      	b.n	80053fc <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d104      	bne.n	8005312 <HAL_TIM_OC_Start+0x82>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005310:	e013      	b.n	800533a <HAL_TIM_OC_Start+0xaa>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b04      	cmp	r3, #4
 8005316:	d104      	bne.n	8005322 <HAL_TIM_OC_Start+0x92>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005320:	e00b      	b.n	800533a <HAL_TIM_OC_Start+0xaa>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b08      	cmp	r3, #8
 8005326:	d104      	bne.n	8005332 <HAL_TIM_OC_Start+0xa2>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005330:	e003      	b.n	800533a <HAL_TIM_OC_Start+0xaa>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2202      	movs	r2, #2
 8005336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2201      	movs	r2, #1
 8005340:	6839      	ldr	r1, [r7, #0]
 8005342:	4618      	mov	r0, r3
 8005344:	f000 ff94 	bl	8006270 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a2d      	ldr	r2, [pc, #180]	; (8005404 <HAL_TIM_OC_Start+0x174>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d004      	beq.n	800535c <HAL_TIM_OC_Start+0xcc>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a2c      	ldr	r2, [pc, #176]	; (8005408 <HAL_TIM_OC_Start+0x178>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d101      	bne.n	8005360 <HAL_TIM_OC_Start+0xd0>
 800535c:	2301      	movs	r3, #1
 800535e:	e000      	b.n	8005362 <HAL_TIM_OC_Start+0xd2>
 8005360:	2300      	movs	r3, #0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d007      	beq.n	8005376 <HAL_TIM_OC_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005374:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a22      	ldr	r2, [pc, #136]	; (8005404 <HAL_TIM_OC_Start+0x174>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d022      	beq.n	80053c6 <HAL_TIM_OC_Start+0x136>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005388:	d01d      	beq.n	80053c6 <HAL_TIM_OC_Start+0x136>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a1f      	ldr	r2, [pc, #124]	; (800540c <HAL_TIM_OC_Start+0x17c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d018      	beq.n	80053c6 <HAL_TIM_OC_Start+0x136>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a1d      	ldr	r2, [pc, #116]	; (8005410 <HAL_TIM_OC_Start+0x180>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d013      	beq.n	80053c6 <HAL_TIM_OC_Start+0x136>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a1c      	ldr	r2, [pc, #112]	; (8005414 <HAL_TIM_OC_Start+0x184>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d00e      	beq.n	80053c6 <HAL_TIM_OC_Start+0x136>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a16      	ldr	r2, [pc, #88]	; (8005408 <HAL_TIM_OC_Start+0x178>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d009      	beq.n	80053c6 <HAL_TIM_OC_Start+0x136>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a18      	ldr	r2, [pc, #96]	; (8005418 <HAL_TIM_OC_Start+0x188>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d004      	beq.n	80053c6 <HAL_TIM_OC_Start+0x136>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a16      	ldr	r2, [pc, #88]	; (800541c <HAL_TIM_OC_Start+0x18c>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d111      	bne.n	80053ea <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f003 0307 	and.w	r3, r3, #7
 80053d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2b06      	cmp	r3, #6
 80053d6:	d010      	beq.n	80053fa <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f042 0201 	orr.w	r2, r2, #1
 80053e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e8:	e007      	b.n	80053fa <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f042 0201 	orr.w	r2, r2, #1
 80053f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	40010000 	.word	0x40010000
 8005408:	40010400 	.word	0x40010400
 800540c:	40000400 	.word	0x40000400
 8005410:	40000800 	.word	0x40000800
 8005414:	40000c00 	.word	0x40000c00
 8005418:	40014000 	.word	0x40014000
 800541c:	40001800 	.word	0x40001800

08005420 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e041      	b.n	80054b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d106      	bne.n	800544c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f839 	bl	80054be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	3304      	adds	r3, #4
 800545c:	4619      	mov	r1, r3
 800545e:	4610      	mov	r0, r2
 8005460:	f000 fb8e 	bl	8005b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b082      	sub	sp, #8
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d122      	bne.n	800552e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d11b      	bne.n	800552e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f06f 0202 	mvn.w	r2, #2
 80054fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	f003 0303 	and.w	r3, r3, #3
 8005510:	2b00      	cmp	r3, #0
 8005512:	d003      	beq.n	800551c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 fb15 	bl	8005b44 <HAL_TIM_IC_CaptureCallback>
 800551a:	e005      	b.n	8005528 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 fb07 	bl	8005b30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 fb18 	bl	8005b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	f003 0304 	and.w	r3, r3, #4
 8005538:	2b04      	cmp	r3, #4
 800553a:	d122      	bne.n	8005582 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	f003 0304 	and.w	r3, r3, #4
 8005546:	2b04      	cmp	r3, #4
 8005548:	d11b      	bne.n	8005582 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f06f 0204 	mvn.w	r2, #4
 8005552:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005564:	2b00      	cmp	r3, #0
 8005566:	d003      	beq.n	8005570 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 faeb 	bl	8005b44 <HAL_TIM_IC_CaptureCallback>
 800556e:	e005      	b.n	800557c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 fadd 	bl	8005b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 faee 	bl	8005b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	f003 0308 	and.w	r3, r3, #8
 800558c:	2b08      	cmp	r3, #8
 800558e:	d122      	bne.n	80055d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f003 0308 	and.w	r3, r3, #8
 800559a:	2b08      	cmp	r3, #8
 800559c:	d11b      	bne.n	80055d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f06f 0208 	mvn.w	r2, #8
 80055a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2204      	movs	r2, #4
 80055ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	f003 0303 	and.w	r3, r3, #3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d003      	beq.n	80055c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 fac1 	bl	8005b44 <HAL_TIM_IC_CaptureCallback>
 80055c2:	e005      	b.n	80055d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 fab3 	bl	8005b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fac4 	bl	8005b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	f003 0310 	and.w	r3, r3, #16
 80055e0:	2b10      	cmp	r3, #16
 80055e2:	d122      	bne.n	800562a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f003 0310 	and.w	r3, r3, #16
 80055ee:	2b10      	cmp	r3, #16
 80055f0:	d11b      	bne.n	800562a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f06f 0210 	mvn.w	r2, #16
 80055fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2208      	movs	r2, #8
 8005600:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800560c:	2b00      	cmp	r3, #0
 800560e:	d003      	beq.n	8005618 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 fa97 	bl	8005b44 <HAL_TIM_IC_CaptureCallback>
 8005616:	e005      	b.n	8005624 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 fa89 	bl	8005b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 fa9a 	bl	8005b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b01      	cmp	r3, #1
 8005636:	d10e      	bne.n	8005656 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b01      	cmp	r3, #1
 8005644:	d107      	bne.n	8005656 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f06f 0201 	mvn.w	r2, #1
 800564e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 fa63 	bl	8005b1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005660:	2b80      	cmp	r3, #128	; 0x80
 8005662:	d10e      	bne.n	8005682 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566e:	2b80      	cmp	r3, #128	; 0x80
 8005670:	d107      	bne.n	8005682 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800567a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 fef5 	bl	800646c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568c:	2b40      	cmp	r3, #64	; 0x40
 800568e:	d10e      	bne.n	80056ae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569a:	2b40      	cmp	r3, #64	; 0x40
 800569c:	d107      	bne.n	80056ae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 fa5f 	bl	8005b6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	f003 0320 	and.w	r3, r3, #32
 80056b8:	2b20      	cmp	r3, #32
 80056ba:	d10e      	bne.n	80056da <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	2b20      	cmp	r3, #32
 80056c8:	d107      	bne.n	80056da <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f06f 0220 	mvn.w	r2, #32
 80056d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 febf 	bl	8006458 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056da:	bf00      	nop
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
	...

080056e4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d101      	bne.n	80056fe <HAL_TIM_OC_ConfigChannel+0x1a>
 80056fa:	2302      	movs	r3, #2
 80056fc:	e046      	b.n	800578c <HAL_TIM_OC_ConfigChannel+0xa8>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b0c      	cmp	r3, #12
 800570a:	d839      	bhi.n	8005780 <HAL_TIM_OC_ConfigChannel+0x9c>
 800570c:	a201      	add	r2, pc, #4	; (adr r2, 8005714 <HAL_TIM_OC_ConfigChannel+0x30>)
 800570e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005712:	bf00      	nop
 8005714:	08005749 	.word	0x08005749
 8005718:	08005781 	.word	0x08005781
 800571c:	08005781 	.word	0x08005781
 8005720:	08005781 	.word	0x08005781
 8005724:	08005757 	.word	0x08005757
 8005728:	08005781 	.word	0x08005781
 800572c:	08005781 	.word	0x08005781
 8005730:	08005781 	.word	0x08005781
 8005734:	08005765 	.word	0x08005765
 8005738:	08005781 	.word	0x08005781
 800573c:	08005781 	.word	0x08005781
 8005740:	08005781 	.word	0x08005781
 8005744:	08005773 	.word	0x08005773
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68b9      	ldr	r1, [r7, #8]
 800574e:	4618      	mov	r0, r3
 8005750:	f000 fab6 	bl	8005cc0 <TIM_OC1_SetConfig>
      break;
 8005754:	e015      	b.n	8005782 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68b9      	ldr	r1, [r7, #8]
 800575c:	4618      	mov	r0, r3
 800575e:	f000 fb1f 	bl	8005da0 <TIM_OC2_SetConfig>
      break;
 8005762:	e00e      	b.n	8005782 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68b9      	ldr	r1, [r7, #8]
 800576a:	4618      	mov	r0, r3
 800576c:	f000 fb8e 	bl	8005e8c <TIM_OC3_SetConfig>
      break;
 8005770:	e007      	b.n	8005782 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68b9      	ldr	r1, [r7, #8]
 8005778:	4618      	mov	r0, r3
 800577a:	f000 fbfb 	bl	8005f74 <TIM_OC4_SetConfig>
      break;
 800577e:	e000      	b.n	8005782 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8005780:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d101      	bne.n	80057ae <HAL_TIM_PWM_ConfigChannel+0x1a>
 80057aa:	2302      	movs	r3, #2
 80057ac:	e0ac      	b.n	8005908 <HAL_TIM_PWM_ConfigChannel+0x174>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b0c      	cmp	r3, #12
 80057ba:	f200 809f 	bhi.w	80058fc <HAL_TIM_PWM_ConfigChannel+0x168>
 80057be:	a201      	add	r2, pc, #4	; (adr r2, 80057c4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80057c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c4:	080057f9 	.word	0x080057f9
 80057c8:	080058fd 	.word	0x080058fd
 80057cc:	080058fd 	.word	0x080058fd
 80057d0:	080058fd 	.word	0x080058fd
 80057d4:	08005839 	.word	0x08005839
 80057d8:	080058fd 	.word	0x080058fd
 80057dc:	080058fd 	.word	0x080058fd
 80057e0:	080058fd 	.word	0x080058fd
 80057e4:	0800587b 	.word	0x0800587b
 80057e8:	080058fd 	.word	0x080058fd
 80057ec:	080058fd 	.word	0x080058fd
 80057f0:	080058fd 	.word	0x080058fd
 80057f4:	080058bb 	.word	0x080058bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68b9      	ldr	r1, [r7, #8]
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 fa5e 	bl	8005cc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	699a      	ldr	r2, [r3, #24]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f042 0208 	orr.w	r2, r2, #8
 8005812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699a      	ldr	r2, [r3, #24]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f022 0204 	bic.w	r2, r2, #4
 8005822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6999      	ldr	r1, [r3, #24]
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	691a      	ldr	r2, [r3, #16]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	619a      	str	r2, [r3, #24]
      break;
 8005836:	e062      	b.n	80058fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68b9      	ldr	r1, [r7, #8]
 800583e:	4618      	mov	r0, r3
 8005840:	f000 faae 	bl	8005da0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	699a      	ldr	r2, [r3, #24]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005852:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	699a      	ldr	r2, [r3, #24]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005862:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6999      	ldr	r1, [r3, #24]
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	021a      	lsls	r2, r3, #8
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	430a      	orrs	r2, r1
 8005876:	619a      	str	r2, [r3, #24]
      break;
 8005878:	e041      	b.n	80058fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68b9      	ldr	r1, [r7, #8]
 8005880:	4618      	mov	r0, r3
 8005882:	f000 fb03 	bl	8005e8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	69da      	ldr	r2, [r3, #28]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f042 0208 	orr.w	r2, r2, #8
 8005894:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	69da      	ldr	r2, [r3, #28]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 0204 	bic.w	r2, r2, #4
 80058a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	69d9      	ldr	r1, [r3, #28]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	691a      	ldr	r2, [r3, #16]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	430a      	orrs	r2, r1
 80058b6:	61da      	str	r2, [r3, #28]
      break;
 80058b8:	e021      	b.n	80058fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68b9      	ldr	r1, [r7, #8]
 80058c0:	4618      	mov	r0, r3
 80058c2:	f000 fb57 	bl	8005f74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	69da      	ldr	r2, [r3, #28]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	69da      	ldr	r2, [r3, #28]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	69d9      	ldr	r1, [r3, #28]
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	021a      	lsls	r2, r3, #8
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	61da      	str	r2, [r3, #28]
      break;
 80058fa:	e000      	b.n	80058fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80058fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005920:	2b01      	cmp	r3, #1
 8005922:	d101      	bne.n	8005928 <HAL_TIM_ConfigClockSource+0x18>
 8005924:	2302      	movs	r3, #2
 8005926:	e0b3      	b.n	8005a90 <HAL_TIM_ConfigClockSource+0x180>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2202      	movs	r2, #2
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005946:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800594e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005960:	d03e      	beq.n	80059e0 <HAL_TIM_ConfigClockSource+0xd0>
 8005962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005966:	f200 8087 	bhi.w	8005a78 <HAL_TIM_ConfigClockSource+0x168>
 800596a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800596e:	f000 8085 	beq.w	8005a7c <HAL_TIM_ConfigClockSource+0x16c>
 8005972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005976:	d87f      	bhi.n	8005a78 <HAL_TIM_ConfigClockSource+0x168>
 8005978:	2b70      	cmp	r3, #112	; 0x70
 800597a:	d01a      	beq.n	80059b2 <HAL_TIM_ConfigClockSource+0xa2>
 800597c:	2b70      	cmp	r3, #112	; 0x70
 800597e:	d87b      	bhi.n	8005a78 <HAL_TIM_ConfigClockSource+0x168>
 8005980:	2b60      	cmp	r3, #96	; 0x60
 8005982:	d050      	beq.n	8005a26 <HAL_TIM_ConfigClockSource+0x116>
 8005984:	2b60      	cmp	r3, #96	; 0x60
 8005986:	d877      	bhi.n	8005a78 <HAL_TIM_ConfigClockSource+0x168>
 8005988:	2b50      	cmp	r3, #80	; 0x50
 800598a:	d03c      	beq.n	8005a06 <HAL_TIM_ConfigClockSource+0xf6>
 800598c:	2b50      	cmp	r3, #80	; 0x50
 800598e:	d873      	bhi.n	8005a78 <HAL_TIM_ConfigClockSource+0x168>
 8005990:	2b40      	cmp	r3, #64	; 0x40
 8005992:	d058      	beq.n	8005a46 <HAL_TIM_ConfigClockSource+0x136>
 8005994:	2b40      	cmp	r3, #64	; 0x40
 8005996:	d86f      	bhi.n	8005a78 <HAL_TIM_ConfigClockSource+0x168>
 8005998:	2b30      	cmp	r3, #48	; 0x30
 800599a:	d064      	beq.n	8005a66 <HAL_TIM_ConfigClockSource+0x156>
 800599c:	2b30      	cmp	r3, #48	; 0x30
 800599e:	d86b      	bhi.n	8005a78 <HAL_TIM_ConfigClockSource+0x168>
 80059a0:	2b20      	cmp	r3, #32
 80059a2:	d060      	beq.n	8005a66 <HAL_TIM_ConfigClockSource+0x156>
 80059a4:	2b20      	cmp	r3, #32
 80059a6:	d867      	bhi.n	8005a78 <HAL_TIM_ConfigClockSource+0x168>
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d05c      	beq.n	8005a66 <HAL_TIM_ConfigClockSource+0x156>
 80059ac:	2b10      	cmp	r3, #16
 80059ae:	d05a      	beq.n	8005a66 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80059b0:	e062      	b.n	8005a78 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6818      	ldr	r0, [r3, #0]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	6899      	ldr	r1, [r3, #8]
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	f000 fc35 	bl	8006230 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	609a      	str	r2, [r3, #8]
      break;
 80059de:	e04e      	b.n	8005a7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6818      	ldr	r0, [r3, #0]
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	6899      	ldr	r1, [r3, #8]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	f000 fc1e 	bl	8006230 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689a      	ldr	r2, [r3, #8]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a02:	609a      	str	r2, [r3, #8]
      break;
 8005a04:	e03b      	b.n	8005a7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6818      	ldr	r0, [r3, #0]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	6859      	ldr	r1, [r3, #4]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	461a      	mov	r2, r3
 8005a14:	f000 fb92 	bl	800613c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2150      	movs	r1, #80	; 0x50
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 fbeb 	bl	80061fa <TIM_ITRx_SetConfig>
      break;
 8005a24:	e02b      	b.n	8005a7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6818      	ldr	r0, [r3, #0]
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	6859      	ldr	r1, [r3, #4]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	461a      	mov	r2, r3
 8005a34:	f000 fbb1 	bl	800619a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2160      	movs	r1, #96	; 0x60
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 fbdb 	bl	80061fa <TIM_ITRx_SetConfig>
      break;
 8005a44:	e01b      	b.n	8005a7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6818      	ldr	r0, [r3, #0]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	6859      	ldr	r1, [r3, #4]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	461a      	mov	r2, r3
 8005a54:	f000 fb72 	bl	800613c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2140      	movs	r1, #64	; 0x40
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 fbcb 	bl	80061fa <TIM_ITRx_SetConfig>
      break;
 8005a64:	e00b      	b.n	8005a7e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4619      	mov	r1, r3
 8005a70:	4610      	mov	r0, r2
 8005a72:	f000 fbc2 	bl	80061fa <TIM_ITRx_SetConfig>
        break;
 8005a76:	e002      	b.n	8005a7e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005a78:	bf00      	nop
 8005a7a:	e000      	b.n	8005a7e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005a7c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d101      	bne.n	8005ab0 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005aac:	2302      	movs	r3, #2
 8005aae:	e031      	b.n	8005b14 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2202      	movs	r2, #2
 8005abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005ac0:	6839      	ldr	r1, [r7, #0]
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 faac 	bl	8006020 <TIM_SlaveTimer_SetConfig>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d009      	beq.n	8005ae2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e018      	b.n	8005b14 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68da      	ldr	r2, [r3, #12]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005af0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68da      	ldr	r2, [r3, #12]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b00:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3708      	adds	r7, #8
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a40      	ldr	r2, [pc, #256]	; (8005c94 <TIM_Base_SetConfig+0x114>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d013      	beq.n	8005bc0 <TIM_Base_SetConfig+0x40>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b9e:	d00f      	beq.n	8005bc0 <TIM_Base_SetConfig+0x40>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a3d      	ldr	r2, [pc, #244]	; (8005c98 <TIM_Base_SetConfig+0x118>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d00b      	beq.n	8005bc0 <TIM_Base_SetConfig+0x40>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a3c      	ldr	r2, [pc, #240]	; (8005c9c <TIM_Base_SetConfig+0x11c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d007      	beq.n	8005bc0 <TIM_Base_SetConfig+0x40>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a3b      	ldr	r2, [pc, #236]	; (8005ca0 <TIM_Base_SetConfig+0x120>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d003      	beq.n	8005bc0 <TIM_Base_SetConfig+0x40>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a3a      	ldr	r2, [pc, #232]	; (8005ca4 <TIM_Base_SetConfig+0x124>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d108      	bne.n	8005bd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a2f      	ldr	r2, [pc, #188]	; (8005c94 <TIM_Base_SetConfig+0x114>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d02b      	beq.n	8005c32 <TIM_Base_SetConfig+0xb2>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be0:	d027      	beq.n	8005c32 <TIM_Base_SetConfig+0xb2>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a2c      	ldr	r2, [pc, #176]	; (8005c98 <TIM_Base_SetConfig+0x118>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d023      	beq.n	8005c32 <TIM_Base_SetConfig+0xb2>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a2b      	ldr	r2, [pc, #172]	; (8005c9c <TIM_Base_SetConfig+0x11c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d01f      	beq.n	8005c32 <TIM_Base_SetConfig+0xb2>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a2a      	ldr	r2, [pc, #168]	; (8005ca0 <TIM_Base_SetConfig+0x120>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d01b      	beq.n	8005c32 <TIM_Base_SetConfig+0xb2>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a29      	ldr	r2, [pc, #164]	; (8005ca4 <TIM_Base_SetConfig+0x124>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d017      	beq.n	8005c32 <TIM_Base_SetConfig+0xb2>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a28      	ldr	r2, [pc, #160]	; (8005ca8 <TIM_Base_SetConfig+0x128>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d013      	beq.n	8005c32 <TIM_Base_SetConfig+0xb2>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a27      	ldr	r2, [pc, #156]	; (8005cac <TIM_Base_SetConfig+0x12c>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d00f      	beq.n	8005c32 <TIM_Base_SetConfig+0xb2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a26      	ldr	r2, [pc, #152]	; (8005cb0 <TIM_Base_SetConfig+0x130>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d00b      	beq.n	8005c32 <TIM_Base_SetConfig+0xb2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a25      	ldr	r2, [pc, #148]	; (8005cb4 <TIM_Base_SetConfig+0x134>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d007      	beq.n	8005c32 <TIM_Base_SetConfig+0xb2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a24      	ldr	r2, [pc, #144]	; (8005cb8 <TIM_Base_SetConfig+0x138>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d003      	beq.n	8005c32 <TIM_Base_SetConfig+0xb2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a23      	ldr	r2, [pc, #140]	; (8005cbc <TIM_Base_SetConfig+0x13c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d108      	bne.n	8005c44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	689a      	ldr	r2, [r3, #8]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a0a      	ldr	r2, [pc, #40]	; (8005c94 <TIM_Base_SetConfig+0x114>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d003      	beq.n	8005c78 <TIM_Base_SetConfig+0xf8>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a0c      	ldr	r2, [pc, #48]	; (8005ca4 <TIM_Base_SetConfig+0x124>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d103      	bne.n	8005c80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	691a      	ldr	r2, [r3, #16]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	615a      	str	r2, [r3, #20]
}
 8005c86:	bf00      	nop
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	40010000 	.word	0x40010000
 8005c98:	40000400 	.word	0x40000400
 8005c9c:	40000800 	.word	0x40000800
 8005ca0:	40000c00 	.word	0x40000c00
 8005ca4:	40010400 	.word	0x40010400
 8005ca8:	40014000 	.word	0x40014000
 8005cac:	40014400 	.word	0x40014400
 8005cb0:	40014800 	.word	0x40014800
 8005cb4:	40001800 	.word	0x40001800
 8005cb8:	40001c00 	.word	0x40001c00
 8005cbc:	40002000 	.word	0x40002000

08005cc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	f023 0201 	bic.w	r2, r3, #1
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f023 0303 	bic.w	r3, r3, #3
 8005cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f023 0302 	bic.w	r3, r3, #2
 8005d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a20      	ldr	r2, [pc, #128]	; (8005d98 <TIM_OC1_SetConfig+0xd8>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d003      	beq.n	8005d24 <TIM_OC1_SetConfig+0x64>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a1f      	ldr	r2, [pc, #124]	; (8005d9c <TIM_OC1_SetConfig+0xdc>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d10c      	bne.n	8005d3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f023 0308 	bic.w	r3, r3, #8
 8005d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f023 0304 	bic.w	r3, r3, #4
 8005d3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a15      	ldr	r2, [pc, #84]	; (8005d98 <TIM_OC1_SetConfig+0xd8>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d003      	beq.n	8005d4e <TIM_OC1_SetConfig+0x8e>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a14      	ldr	r2, [pc, #80]	; (8005d9c <TIM_OC1_SetConfig+0xdc>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d111      	bne.n	8005d72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	621a      	str	r2, [r3, #32]
}
 8005d8c:	bf00      	nop
 8005d8e:	371c      	adds	r7, #28
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr
 8005d98:	40010000 	.word	0x40010000
 8005d9c:	40010400 	.word	0x40010400

08005da0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b087      	sub	sp, #28
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	f023 0210 	bic.w	r2, r3, #16
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	021b      	lsls	r3, r3, #8
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f023 0320 	bic.w	r3, r3, #32
 8005dea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	011b      	lsls	r3, r3, #4
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a22      	ldr	r2, [pc, #136]	; (8005e84 <TIM_OC2_SetConfig+0xe4>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d003      	beq.n	8005e08 <TIM_OC2_SetConfig+0x68>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a21      	ldr	r2, [pc, #132]	; (8005e88 <TIM_OC2_SetConfig+0xe8>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d10d      	bne.n	8005e24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	011b      	lsls	r3, r3, #4
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a17      	ldr	r2, [pc, #92]	; (8005e84 <TIM_OC2_SetConfig+0xe4>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d003      	beq.n	8005e34 <TIM_OC2_SetConfig+0x94>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a16      	ldr	r2, [pc, #88]	; (8005e88 <TIM_OC2_SetConfig+0xe8>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d113      	bne.n	8005e5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	621a      	str	r2, [r3, #32]
}
 8005e76:	bf00      	nop
 8005e78:	371c      	adds	r7, #28
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	40010000 	.word	0x40010000
 8005e88:	40010400 	.word	0x40010400

08005e8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	69db      	ldr	r3, [r3, #28]
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 0303 	bic.w	r3, r3, #3
 8005ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	021b      	lsls	r3, r3, #8
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a21      	ldr	r2, [pc, #132]	; (8005f6c <TIM_OC3_SetConfig+0xe0>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d003      	beq.n	8005ef2 <TIM_OC3_SetConfig+0x66>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a20      	ldr	r2, [pc, #128]	; (8005f70 <TIM_OC3_SetConfig+0xe4>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d10d      	bne.n	8005f0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ef8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	021b      	lsls	r3, r3, #8
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a16      	ldr	r2, [pc, #88]	; (8005f6c <TIM_OC3_SetConfig+0xe0>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d003      	beq.n	8005f1e <TIM_OC3_SetConfig+0x92>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a15      	ldr	r2, [pc, #84]	; (8005f70 <TIM_OC3_SetConfig+0xe4>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d113      	bne.n	8005f46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	011b      	lsls	r3, r3, #4
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	011b      	lsls	r3, r3, #4
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	697a      	ldr	r2, [r7, #20]
 8005f5e:	621a      	str	r2, [r3, #32]
}
 8005f60:	bf00      	nop
 8005f62:	371c      	adds	r7, #28
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	40010000 	.word	0x40010000
 8005f70:	40010400 	.word	0x40010400

08005f74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b087      	sub	sp, #28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	021b      	lsls	r3, r3, #8
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	031b      	lsls	r3, r3, #12
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a12      	ldr	r2, [pc, #72]	; (8006018 <TIM_OC4_SetConfig+0xa4>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d003      	beq.n	8005fdc <TIM_OC4_SetConfig+0x68>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a11      	ldr	r2, [pc, #68]	; (800601c <TIM_OC4_SetConfig+0xa8>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d109      	bne.n	8005ff0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fe2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	019b      	lsls	r3, r3, #6
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	621a      	str	r2, [r3, #32]
}
 800600a:	bf00      	nop
 800600c:	371c      	adds	r7, #28
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	40010000 	.word	0x40010000
 800601c:	40010400 	.word	0x40010400

08006020 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006038:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	4313      	orrs	r3, r2
 8006042:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	f023 0307 	bic.w	r3, r3, #7
 800604a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	4313      	orrs	r3, r2
 8006054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	2b70      	cmp	r3, #112	; 0x70
 8006064:	d01a      	beq.n	800609c <TIM_SlaveTimer_SetConfig+0x7c>
 8006066:	2b70      	cmp	r3, #112	; 0x70
 8006068:	d860      	bhi.n	800612c <TIM_SlaveTimer_SetConfig+0x10c>
 800606a:	2b60      	cmp	r3, #96	; 0x60
 800606c:	d054      	beq.n	8006118 <TIM_SlaveTimer_SetConfig+0xf8>
 800606e:	2b60      	cmp	r3, #96	; 0x60
 8006070:	d85c      	bhi.n	800612c <TIM_SlaveTimer_SetConfig+0x10c>
 8006072:	2b50      	cmp	r3, #80	; 0x50
 8006074:	d046      	beq.n	8006104 <TIM_SlaveTimer_SetConfig+0xe4>
 8006076:	2b50      	cmp	r3, #80	; 0x50
 8006078:	d858      	bhi.n	800612c <TIM_SlaveTimer_SetConfig+0x10c>
 800607a:	2b40      	cmp	r3, #64	; 0x40
 800607c:	d019      	beq.n	80060b2 <TIM_SlaveTimer_SetConfig+0x92>
 800607e:	2b40      	cmp	r3, #64	; 0x40
 8006080:	d854      	bhi.n	800612c <TIM_SlaveTimer_SetConfig+0x10c>
 8006082:	2b30      	cmp	r3, #48	; 0x30
 8006084:	d054      	beq.n	8006130 <TIM_SlaveTimer_SetConfig+0x110>
 8006086:	2b30      	cmp	r3, #48	; 0x30
 8006088:	d850      	bhi.n	800612c <TIM_SlaveTimer_SetConfig+0x10c>
 800608a:	2b20      	cmp	r3, #32
 800608c:	d050      	beq.n	8006130 <TIM_SlaveTimer_SetConfig+0x110>
 800608e:	2b20      	cmp	r3, #32
 8006090:	d84c      	bhi.n	800612c <TIM_SlaveTimer_SetConfig+0x10c>
 8006092:	2b00      	cmp	r3, #0
 8006094:	d04c      	beq.n	8006130 <TIM_SlaveTimer_SetConfig+0x110>
 8006096:	2b10      	cmp	r3, #16
 8006098:	d04a      	beq.n	8006130 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800609a:	e047      	b.n	800612c <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6818      	ldr	r0, [r3, #0]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	68d9      	ldr	r1, [r3, #12]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	689a      	ldr	r2, [r3, #8]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	f000 f8c0 	bl	8006230 <TIM_ETR_SetConfig>
      break;
 80060b0:	e03f      	b.n	8006132 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2b05      	cmp	r3, #5
 80060b8:	d101      	bne.n	80060be <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e03a      	b.n	8006134 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6a1a      	ldr	r2, [r3, #32]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f022 0201 	bic.w	r2, r2, #1
 80060d4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060e4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	011b      	lsls	r3, r3, #4
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	621a      	str	r2, [r3, #32]
      break;
 8006102:	e016      	b.n	8006132 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6818      	ldr	r0, [r3, #0]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	6899      	ldr	r1, [r3, #8]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	461a      	mov	r2, r3
 8006112:	f000 f813 	bl	800613c <TIM_TI1_ConfigInputStage>
      break;
 8006116:	e00c      	b.n	8006132 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6818      	ldr	r0, [r3, #0]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	6899      	ldr	r1, [r3, #8]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	461a      	mov	r2, r3
 8006126:	f000 f838 	bl	800619a <TIM_TI2_ConfigInputStage>
      break;
 800612a:	e002      	b.n	8006132 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 800612c:	bf00      	nop
 800612e:	e000      	b.n	8006132 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8006130:	bf00      	nop
  }
  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3718      	adds	r7, #24
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800613c:	b480      	push	{r7}
 800613e:	b087      	sub	sp, #28
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	f023 0201 	bic.w	r2, r3, #1
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006166:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	011b      	lsls	r3, r3, #4
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	4313      	orrs	r3, r2
 8006170:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f023 030a 	bic.w	r3, r3, #10
 8006178:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	4313      	orrs	r3, r2
 8006180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	621a      	str	r2, [r3, #32]
}
 800618e:	bf00      	nop
 8006190:	371c      	adds	r7, #28
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800619a:	b480      	push	{r7}
 800619c:	b087      	sub	sp, #28
 800619e:	af00      	add	r7, sp, #0
 80061a0:	60f8      	str	r0, [r7, #12]
 80061a2:	60b9      	str	r1, [r7, #8]
 80061a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	f023 0210 	bic.w	r2, r3, #16
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6a1b      	ldr	r3, [r3, #32]
 80061bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	031b      	lsls	r3, r3, #12
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	011b      	lsls	r3, r3, #4
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	4313      	orrs	r3, r2
 80061e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	621a      	str	r2, [r3, #32]
}
 80061ee:	bf00      	nop
 80061f0:	371c      	adds	r7, #28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b085      	sub	sp, #20
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
 8006202:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006210:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4313      	orrs	r3, r2
 8006218:	f043 0307 	orr.w	r3, r3, #7
 800621c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	609a      	str	r2, [r3, #8]
}
 8006224:	bf00      	nop
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
 800623c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800624a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	021a      	lsls	r2, r3, #8
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	431a      	orrs	r2, r3
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	4313      	orrs	r3, r2
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	4313      	orrs	r3, r2
 800625c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	609a      	str	r2, [r3, #8]
}
 8006264:	bf00      	nop
 8006266:	371c      	adds	r7, #28
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006270:	b480      	push	{r7}
 8006272:	b087      	sub	sp, #28
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f003 031f 	and.w	r3, r3, #31
 8006282:	2201      	movs	r2, #1
 8006284:	fa02 f303 	lsl.w	r3, r2, r3
 8006288:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6a1a      	ldr	r2, [r3, #32]
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	43db      	mvns	r3, r3
 8006292:	401a      	ands	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6a1a      	ldr	r2, [r3, #32]
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	f003 031f 	and.w	r3, r3, #31
 80062a2:	6879      	ldr	r1, [r7, #4]
 80062a4:	fa01 f303 	lsl.w	r3, r1, r3
 80062a8:	431a      	orrs	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	621a      	str	r2, [r3, #32]
}
 80062ae:	bf00      	nop
 80062b0:	371c      	adds	r7, #28
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
	...

080062bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d101      	bne.n	80062d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062d0:	2302      	movs	r3, #2
 80062d2:	e05a      	b.n	800638a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2202      	movs	r2, #2
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	4313      	orrs	r3, r2
 8006304:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a21      	ldr	r2, [pc, #132]	; (8006398 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d022      	beq.n	800635e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006320:	d01d      	beq.n	800635e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a1d      	ldr	r2, [pc, #116]	; (800639c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d018      	beq.n	800635e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a1b      	ldr	r2, [pc, #108]	; (80063a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d013      	beq.n	800635e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a1a      	ldr	r2, [pc, #104]	; (80063a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d00e      	beq.n	800635e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a18      	ldr	r2, [pc, #96]	; (80063a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d009      	beq.n	800635e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a17      	ldr	r2, [pc, #92]	; (80063ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d004      	beq.n	800635e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a15      	ldr	r2, [pc, #84]	; (80063b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d10c      	bne.n	8006378 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006364:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	68ba      	ldr	r2, [r7, #8]
 800636c:	4313      	orrs	r3, r2
 800636e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	40010000 	.word	0x40010000
 800639c:	40000400 	.word	0x40000400
 80063a0:	40000800 	.word	0x40000800
 80063a4:	40000c00 	.word	0x40000c00
 80063a8:	40010400 	.word	0x40010400
 80063ac:	40014000 	.word	0x40014000
 80063b0:	40001800 	.word	0x40001800

080063b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80063be:	2300      	movs	r3, #0
 80063c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d101      	bne.n	80063d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80063cc:	2302      	movs	r3, #2
 80063ce:	e03d      	b.n	800644c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	4313      	orrs	r3, r2
 8006400:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4313      	orrs	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	4313      	orrs	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	4313      	orrs	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	4313      	orrs	r3, r2
 8006438:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3714      	adds	r7, #20
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <__errno>:
 8006480:	4b01      	ldr	r3, [pc, #4]	; (8006488 <__errno+0x8>)
 8006482:	6818      	ldr	r0, [r3, #0]
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	20000014 	.word	0x20000014

0800648c <__libc_init_array>:
 800648c:	b570      	push	{r4, r5, r6, lr}
 800648e:	4d0d      	ldr	r5, [pc, #52]	; (80064c4 <__libc_init_array+0x38>)
 8006490:	4c0d      	ldr	r4, [pc, #52]	; (80064c8 <__libc_init_array+0x3c>)
 8006492:	1b64      	subs	r4, r4, r5
 8006494:	10a4      	asrs	r4, r4, #2
 8006496:	2600      	movs	r6, #0
 8006498:	42a6      	cmp	r6, r4
 800649a:	d109      	bne.n	80064b0 <__libc_init_array+0x24>
 800649c:	4d0b      	ldr	r5, [pc, #44]	; (80064cc <__libc_init_array+0x40>)
 800649e:	4c0c      	ldr	r4, [pc, #48]	; (80064d0 <__libc_init_array+0x44>)
 80064a0:	f000 f84a 	bl	8006538 <_init>
 80064a4:	1b64      	subs	r4, r4, r5
 80064a6:	10a4      	asrs	r4, r4, #2
 80064a8:	2600      	movs	r6, #0
 80064aa:	42a6      	cmp	r6, r4
 80064ac:	d105      	bne.n	80064ba <__libc_init_array+0x2e>
 80064ae:	bd70      	pop	{r4, r5, r6, pc}
 80064b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80064b4:	4798      	blx	r3
 80064b6:	3601      	adds	r6, #1
 80064b8:	e7ee      	b.n	8006498 <__libc_init_array+0xc>
 80064ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80064be:	4798      	blx	r3
 80064c0:	3601      	adds	r6, #1
 80064c2:	e7f2      	b.n	80064aa <__libc_init_array+0x1e>
 80064c4:	08006d74 	.word	0x08006d74
 80064c8:	08006d74 	.word	0x08006d74
 80064cc:	08006d74 	.word	0x08006d74
 80064d0:	08006d78 	.word	0x08006d78

080064d4 <memset>:
 80064d4:	4402      	add	r2, r0
 80064d6:	4603      	mov	r3, r0
 80064d8:	4293      	cmp	r3, r2
 80064da:	d100      	bne.n	80064de <memset+0xa>
 80064dc:	4770      	bx	lr
 80064de:	f803 1b01 	strb.w	r1, [r3], #1
 80064e2:	e7f9      	b.n	80064d8 <memset+0x4>

080064e4 <sqrtf>:
 80064e4:	b508      	push	{r3, lr}
 80064e6:	ed2d 8b02 	vpush	{d8}
 80064ea:	eeb0 8a40 	vmov.f32	s16, s0
 80064ee:	f000 f81f 	bl	8006530 <__ieee754_sqrtf>
 80064f2:	4b0d      	ldr	r3, [pc, #52]	; (8006528 <sqrtf+0x44>)
 80064f4:	f993 3000 	ldrsb.w	r3, [r3]
 80064f8:	3301      	adds	r3, #1
 80064fa:	d011      	beq.n	8006520 <sqrtf+0x3c>
 80064fc:	eeb4 8a48 	vcmp.f32	s16, s16
 8006500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006504:	d60c      	bvs.n	8006520 <sqrtf+0x3c>
 8006506:	eddf 8a09 	vldr	s17, [pc, #36]	; 800652c <sqrtf+0x48>
 800650a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800650e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006512:	d505      	bpl.n	8006520 <sqrtf+0x3c>
 8006514:	f7ff ffb4 	bl	8006480 <__errno>
 8006518:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800651c:	2321      	movs	r3, #33	; 0x21
 800651e:	6003      	str	r3, [r0, #0]
 8006520:	ecbd 8b02 	vpop	{d8}
 8006524:	bd08      	pop	{r3, pc}
 8006526:	bf00      	nop
 8006528:	20000078 	.word	0x20000078
 800652c:	00000000 	.word	0x00000000

08006530 <__ieee754_sqrtf>:
 8006530:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006534:	4770      	bx	lr
	...

08006538 <_init>:
 8006538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653a:	bf00      	nop
 800653c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800653e:	bc08      	pop	{r3}
 8006540:	469e      	mov	lr, r3
 8006542:	4770      	bx	lr

08006544 <_fini>:
 8006544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006546:	bf00      	nop
 8006548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800654a:	bc08      	pop	{r3}
 800654c:	469e      	mov	lr, r3
 800654e:	4770      	bx	lr
