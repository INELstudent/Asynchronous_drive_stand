
Asynchronous_drive_stand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a08  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000081c  08006b90  08006b90  00016b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073ac  080073ac  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080073ac  080073ac  000173ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073b4  080073b4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073b4  080073b4  000173b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073b8  080073b8  000173b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080073bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  2000007c  08007438  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  08007438  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000169ff  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003100  00000000  00000000  00036aab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  00039bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00021d0e  00000000  00000000  0003abc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001560c  00000000  00000000  0005c8d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d972f  00000000  00000000  00071ee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0014b611  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000ea8  00000000  00000000  0014b668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000043b8  00000000  00000000  0014c510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006b78 	.word	0x08006b78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08006b78 	.word	0x08006b78

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_d2f>:
 8000540:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000544:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000548:	bf24      	itt	cs
 800054a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800054e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000552:	d90d      	bls.n	8000570 <__aeabi_d2f+0x30>
 8000554:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000558:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800055c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000560:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000564:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000568:	bf08      	it	eq
 800056a:	f020 0001 	biceq.w	r0, r0, #1
 800056e:	4770      	bx	lr
 8000570:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000574:	d121      	bne.n	80005ba <__aeabi_d2f+0x7a>
 8000576:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800057a:	bfbc      	itt	lt
 800057c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000580:	4770      	bxlt	lr
 8000582:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000586:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800058a:	f1c2 0218 	rsb	r2, r2, #24
 800058e:	f1c2 0c20 	rsb	ip, r2, #32
 8000592:	fa10 f30c 	lsls.w	r3, r0, ip
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	bf18      	it	ne
 800059c:	f040 0001 	orrne.w	r0, r0, #1
 80005a0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005a4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005a8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005ac:	ea40 000c 	orr.w	r0, r0, ip
 80005b0:	fa23 f302 	lsr.w	r3, r3, r2
 80005b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005b8:	e7cc      	b.n	8000554 <__aeabi_d2f+0x14>
 80005ba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005be:	d107      	bne.n	80005d0 <__aeabi_d2f+0x90>
 80005c0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005c4:	bf1e      	ittt	ne
 80005c6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005ca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005ce:	4770      	bxne	lr
 80005d0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <__aeabi_uldivmod>:
 80005e0:	b953      	cbnz	r3, 80005f8 <__aeabi_uldivmod+0x18>
 80005e2:	b94a      	cbnz	r2, 80005f8 <__aeabi_uldivmod+0x18>
 80005e4:	2900      	cmp	r1, #0
 80005e6:	bf08      	it	eq
 80005e8:	2800      	cmpeq	r0, #0
 80005ea:	bf1c      	itt	ne
 80005ec:	f04f 31ff 	movne.w	r1, #4294967295
 80005f0:	f04f 30ff 	movne.w	r0, #4294967295
 80005f4:	f000 b96e 	b.w	80008d4 <__aeabi_idiv0>
 80005f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000600:	f000 f806 	bl	8000610 <__udivmoddi4>
 8000604:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000608:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800060c:	b004      	add	sp, #16
 800060e:	4770      	bx	lr

08000610 <__udivmoddi4>:
 8000610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000614:	9d08      	ldr	r5, [sp, #32]
 8000616:	4604      	mov	r4, r0
 8000618:	468c      	mov	ip, r1
 800061a:	2b00      	cmp	r3, #0
 800061c:	f040 8083 	bne.w	8000726 <__udivmoddi4+0x116>
 8000620:	428a      	cmp	r2, r1
 8000622:	4617      	mov	r7, r2
 8000624:	d947      	bls.n	80006b6 <__udivmoddi4+0xa6>
 8000626:	fab2 f282 	clz	r2, r2
 800062a:	b142      	cbz	r2, 800063e <__udivmoddi4+0x2e>
 800062c:	f1c2 0020 	rsb	r0, r2, #32
 8000630:	fa24 f000 	lsr.w	r0, r4, r0
 8000634:	4091      	lsls	r1, r2
 8000636:	4097      	lsls	r7, r2
 8000638:	ea40 0c01 	orr.w	ip, r0, r1
 800063c:	4094      	lsls	r4, r2
 800063e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000642:	0c23      	lsrs	r3, r4, #16
 8000644:	fbbc f6f8 	udiv	r6, ip, r8
 8000648:	fa1f fe87 	uxth.w	lr, r7
 800064c:	fb08 c116 	mls	r1, r8, r6, ip
 8000650:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000654:	fb06 f10e 	mul.w	r1, r6, lr
 8000658:	4299      	cmp	r1, r3
 800065a:	d909      	bls.n	8000670 <__udivmoddi4+0x60>
 800065c:	18fb      	adds	r3, r7, r3
 800065e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000662:	f080 8119 	bcs.w	8000898 <__udivmoddi4+0x288>
 8000666:	4299      	cmp	r1, r3
 8000668:	f240 8116 	bls.w	8000898 <__udivmoddi4+0x288>
 800066c:	3e02      	subs	r6, #2
 800066e:	443b      	add	r3, r7
 8000670:	1a5b      	subs	r3, r3, r1
 8000672:	b2a4      	uxth	r4, r4
 8000674:	fbb3 f0f8 	udiv	r0, r3, r8
 8000678:	fb08 3310 	mls	r3, r8, r0, r3
 800067c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000680:	fb00 fe0e 	mul.w	lr, r0, lr
 8000684:	45a6      	cmp	lr, r4
 8000686:	d909      	bls.n	800069c <__udivmoddi4+0x8c>
 8000688:	193c      	adds	r4, r7, r4
 800068a:	f100 33ff 	add.w	r3, r0, #4294967295
 800068e:	f080 8105 	bcs.w	800089c <__udivmoddi4+0x28c>
 8000692:	45a6      	cmp	lr, r4
 8000694:	f240 8102 	bls.w	800089c <__udivmoddi4+0x28c>
 8000698:	3802      	subs	r0, #2
 800069a:	443c      	add	r4, r7
 800069c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006a0:	eba4 040e 	sub.w	r4, r4, lr
 80006a4:	2600      	movs	r6, #0
 80006a6:	b11d      	cbz	r5, 80006b0 <__udivmoddi4+0xa0>
 80006a8:	40d4      	lsrs	r4, r2
 80006aa:	2300      	movs	r3, #0
 80006ac:	e9c5 4300 	strd	r4, r3, [r5]
 80006b0:	4631      	mov	r1, r6
 80006b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006b6:	b902      	cbnz	r2, 80006ba <__udivmoddi4+0xaa>
 80006b8:	deff      	udf	#255	; 0xff
 80006ba:	fab2 f282 	clz	r2, r2
 80006be:	2a00      	cmp	r2, #0
 80006c0:	d150      	bne.n	8000764 <__udivmoddi4+0x154>
 80006c2:	1bcb      	subs	r3, r1, r7
 80006c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80006c8:	fa1f f887 	uxth.w	r8, r7
 80006cc:	2601      	movs	r6, #1
 80006ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80006d2:	0c21      	lsrs	r1, r4, #16
 80006d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80006d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006dc:	fb08 f30c 	mul.w	r3, r8, ip
 80006e0:	428b      	cmp	r3, r1
 80006e2:	d907      	bls.n	80006f4 <__udivmoddi4+0xe4>
 80006e4:	1879      	adds	r1, r7, r1
 80006e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80006ea:	d202      	bcs.n	80006f2 <__udivmoddi4+0xe2>
 80006ec:	428b      	cmp	r3, r1
 80006ee:	f200 80e9 	bhi.w	80008c4 <__udivmoddi4+0x2b4>
 80006f2:	4684      	mov	ip, r0
 80006f4:	1ac9      	subs	r1, r1, r3
 80006f6:	b2a3      	uxth	r3, r4
 80006f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80006fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000700:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000704:	fb08 f800 	mul.w	r8, r8, r0
 8000708:	45a0      	cmp	r8, r4
 800070a:	d907      	bls.n	800071c <__udivmoddi4+0x10c>
 800070c:	193c      	adds	r4, r7, r4
 800070e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000712:	d202      	bcs.n	800071a <__udivmoddi4+0x10a>
 8000714:	45a0      	cmp	r8, r4
 8000716:	f200 80d9 	bhi.w	80008cc <__udivmoddi4+0x2bc>
 800071a:	4618      	mov	r0, r3
 800071c:	eba4 0408 	sub.w	r4, r4, r8
 8000720:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000724:	e7bf      	b.n	80006a6 <__udivmoddi4+0x96>
 8000726:	428b      	cmp	r3, r1
 8000728:	d909      	bls.n	800073e <__udivmoddi4+0x12e>
 800072a:	2d00      	cmp	r5, #0
 800072c:	f000 80b1 	beq.w	8000892 <__udivmoddi4+0x282>
 8000730:	2600      	movs	r6, #0
 8000732:	e9c5 0100 	strd	r0, r1, [r5]
 8000736:	4630      	mov	r0, r6
 8000738:	4631      	mov	r1, r6
 800073a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073e:	fab3 f683 	clz	r6, r3
 8000742:	2e00      	cmp	r6, #0
 8000744:	d14a      	bne.n	80007dc <__udivmoddi4+0x1cc>
 8000746:	428b      	cmp	r3, r1
 8000748:	d302      	bcc.n	8000750 <__udivmoddi4+0x140>
 800074a:	4282      	cmp	r2, r0
 800074c:	f200 80b8 	bhi.w	80008c0 <__udivmoddi4+0x2b0>
 8000750:	1a84      	subs	r4, r0, r2
 8000752:	eb61 0103 	sbc.w	r1, r1, r3
 8000756:	2001      	movs	r0, #1
 8000758:	468c      	mov	ip, r1
 800075a:	2d00      	cmp	r5, #0
 800075c:	d0a8      	beq.n	80006b0 <__udivmoddi4+0xa0>
 800075e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000762:	e7a5      	b.n	80006b0 <__udivmoddi4+0xa0>
 8000764:	f1c2 0320 	rsb	r3, r2, #32
 8000768:	fa20 f603 	lsr.w	r6, r0, r3
 800076c:	4097      	lsls	r7, r2
 800076e:	fa01 f002 	lsl.w	r0, r1, r2
 8000772:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000776:	40d9      	lsrs	r1, r3
 8000778:	4330      	orrs	r0, r6
 800077a:	0c03      	lsrs	r3, r0, #16
 800077c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000780:	fa1f f887 	uxth.w	r8, r7
 8000784:	fb0e 1116 	mls	r1, lr, r6, r1
 8000788:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800078c:	fb06 f108 	mul.w	r1, r6, r8
 8000790:	4299      	cmp	r1, r3
 8000792:	fa04 f402 	lsl.w	r4, r4, r2
 8000796:	d909      	bls.n	80007ac <__udivmoddi4+0x19c>
 8000798:	18fb      	adds	r3, r7, r3
 800079a:	f106 3cff 	add.w	ip, r6, #4294967295
 800079e:	f080 808d 	bcs.w	80008bc <__udivmoddi4+0x2ac>
 80007a2:	4299      	cmp	r1, r3
 80007a4:	f240 808a 	bls.w	80008bc <__udivmoddi4+0x2ac>
 80007a8:	3e02      	subs	r6, #2
 80007aa:	443b      	add	r3, r7
 80007ac:	1a5b      	subs	r3, r3, r1
 80007ae:	b281      	uxth	r1, r0
 80007b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80007b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80007b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007bc:	fb00 f308 	mul.w	r3, r0, r8
 80007c0:	428b      	cmp	r3, r1
 80007c2:	d907      	bls.n	80007d4 <__udivmoddi4+0x1c4>
 80007c4:	1879      	adds	r1, r7, r1
 80007c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80007ca:	d273      	bcs.n	80008b4 <__udivmoddi4+0x2a4>
 80007cc:	428b      	cmp	r3, r1
 80007ce:	d971      	bls.n	80008b4 <__udivmoddi4+0x2a4>
 80007d0:	3802      	subs	r0, #2
 80007d2:	4439      	add	r1, r7
 80007d4:	1acb      	subs	r3, r1, r3
 80007d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80007da:	e778      	b.n	80006ce <__udivmoddi4+0xbe>
 80007dc:	f1c6 0c20 	rsb	ip, r6, #32
 80007e0:	fa03 f406 	lsl.w	r4, r3, r6
 80007e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80007e8:	431c      	orrs	r4, r3
 80007ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80007ee:	fa01 f306 	lsl.w	r3, r1, r6
 80007f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80007f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80007fa:	431f      	orrs	r7, r3
 80007fc:	0c3b      	lsrs	r3, r7, #16
 80007fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000802:	fa1f f884 	uxth.w	r8, r4
 8000806:	fb0e 1119 	mls	r1, lr, r9, r1
 800080a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800080e:	fb09 fa08 	mul.w	sl, r9, r8
 8000812:	458a      	cmp	sl, r1
 8000814:	fa02 f206 	lsl.w	r2, r2, r6
 8000818:	fa00 f306 	lsl.w	r3, r0, r6
 800081c:	d908      	bls.n	8000830 <__udivmoddi4+0x220>
 800081e:	1861      	adds	r1, r4, r1
 8000820:	f109 30ff 	add.w	r0, r9, #4294967295
 8000824:	d248      	bcs.n	80008b8 <__udivmoddi4+0x2a8>
 8000826:	458a      	cmp	sl, r1
 8000828:	d946      	bls.n	80008b8 <__udivmoddi4+0x2a8>
 800082a:	f1a9 0902 	sub.w	r9, r9, #2
 800082e:	4421      	add	r1, r4
 8000830:	eba1 010a 	sub.w	r1, r1, sl
 8000834:	b2bf      	uxth	r7, r7
 8000836:	fbb1 f0fe 	udiv	r0, r1, lr
 800083a:	fb0e 1110 	mls	r1, lr, r0, r1
 800083e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000842:	fb00 f808 	mul.w	r8, r0, r8
 8000846:	45b8      	cmp	r8, r7
 8000848:	d907      	bls.n	800085a <__udivmoddi4+0x24a>
 800084a:	19e7      	adds	r7, r4, r7
 800084c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000850:	d22e      	bcs.n	80008b0 <__udivmoddi4+0x2a0>
 8000852:	45b8      	cmp	r8, r7
 8000854:	d92c      	bls.n	80008b0 <__udivmoddi4+0x2a0>
 8000856:	3802      	subs	r0, #2
 8000858:	4427      	add	r7, r4
 800085a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800085e:	eba7 0708 	sub.w	r7, r7, r8
 8000862:	fba0 8902 	umull	r8, r9, r0, r2
 8000866:	454f      	cmp	r7, r9
 8000868:	46c6      	mov	lr, r8
 800086a:	4649      	mov	r1, r9
 800086c:	d31a      	bcc.n	80008a4 <__udivmoddi4+0x294>
 800086e:	d017      	beq.n	80008a0 <__udivmoddi4+0x290>
 8000870:	b15d      	cbz	r5, 800088a <__udivmoddi4+0x27a>
 8000872:	ebb3 020e 	subs.w	r2, r3, lr
 8000876:	eb67 0701 	sbc.w	r7, r7, r1
 800087a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800087e:	40f2      	lsrs	r2, r6
 8000880:	ea4c 0202 	orr.w	r2, ip, r2
 8000884:	40f7      	lsrs	r7, r6
 8000886:	e9c5 2700 	strd	r2, r7, [r5]
 800088a:	2600      	movs	r6, #0
 800088c:	4631      	mov	r1, r6
 800088e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000892:	462e      	mov	r6, r5
 8000894:	4628      	mov	r0, r5
 8000896:	e70b      	b.n	80006b0 <__udivmoddi4+0xa0>
 8000898:	4606      	mov	r6, r0
 800089a:	e6e9      	b.n	8000670 <__udivmoddi4+0x60>
 800089c:	4618      	mov	r0, r3
 800089e:	e6fd      	b.n	800069c <__udivmoddi4+0x8c>
 80008a0:	4543      	cmp	r3, r8
 80008a2:	d2e5      	bcs.n	8000870 <__udivmoddi4+0x260>
 80008a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80008a8:	eb69 0104 	sbc.w	r1, r9, r4
 80008ac:	3801      	subs	r0, #1
 80008ae:	e7df      	b.n	8000870 <__udivmoddi4+0x260>
 80008b0:	4608      	mov	r0, r1
 80008b2:	e7d2      	b.n	800085a <__udivmoddi4+0x24a>
 80008b4:	4660      	mov	r0, ip
 80008b6:	e78d      	b.n	80007d4 <__udivmoddi4+0x1c4>
 80008b8:	4681      	mov	r9, r0
 80008ba:	e7b9      	b.n	8000830 <__udivmoddi4+0x220>
 80008bc:	4666      	mov	r6, ip
 80008be:	e775      	b.n	80007ac <__udivmoddi4+0x19c>
 80008c0:	4630      	mov	r0, r6
 80008c2:	e74a      	b.n	800075a <__udivmoddi4+0x14a>
 80008c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80008c8:	4439      	add	r1, r7
 80008ca:	e713      	b.n	80006f4 <__udivmoddi4+0xe4>
 80008cc:	3802      	subs	r0, #2
 80008ce:	443c      	add	r4, r7
 80008d0:	e724      	b.n	800071c <__udivmoddi4+0x10c>
 80008d2:	bf00      	nop

080008d4 <__aeabi_idiv0>:
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop

080008d8 <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b092      	sub	sp, #72	; 0x48
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2U;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	089b      	lsrs	r3, r3, #2
 80008e8:	647b      	str	r3, [r7, #68]	; 0x44

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 80008ea:	e0c2      	b.n	8000a72 <arm_cmplx_mag_f32+0x19a>
  {

    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	1d1a      	adds	r2, r3, #4
 80008f0:	60fa      	str	r2, [r7, #12]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	1d1a      	adds	r2, r3, #4
 80008fa:	60fa      	str	r2, [r7, #12]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8000900:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000904:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000908:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800090c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000910:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	1d1a      	adds	r2, r3, #4
 8000918:	60ba      	str	r2, [r7, #8]
 800091a:	edc7 7a08 	vstr	s15, [r7, #32]
 800091e:	61fb      	str	r3, [r7, #28]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8000920:	edd7 7a08 	vldr	s15, [r7, #32]
 8000924:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800092c:	db09      	blt.n	8000942 <arm_cmplx_mag_f32+0x6a>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 800092e:	ed97 0a08 	vldr	s0, [r7, #32]
 8000932:	f006 f8f7 	bl	8006b24 <sqrtf>
 8000936:	eef0 7a40 	vmov.f32	s15, s0
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8000940:	e004      	b.n	800094c <arm_cmplx_mag_f32+0x74>
    }
    else
    {
      *pOut = 0.0f;
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	f04f 0200 	mov.w	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800094a:	bf00      	nop

    realIn = *pSrc++;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	1d1a      	adds	r2, r3, #4
 8000950:	60fa      	str	r2, [r7, #12]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	1d1a      	adds	r2, r3, #4
 800095a:	60fa      	str	r2, [r7, #12]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8000960:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000964:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000968:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800096c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000970:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	1d1a      	adds	r2, r3, #4
 8000978:	60ba      	str	r2, [r7, #8]
 800097a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
    if (in >= 0.0f)
 8000980:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000984:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800098c:	db09      	blt.n	80009a2 <arm_cmplx_mag_f32+0xca>
      *pOut = __builtin_sqrtf(in);
 800098e:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8000992:	f006 f8c7 	bl	8006b24 <sqrtf>
 8000996:	eef0 7a40 	vmov.f32	s15, s0
 800099a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099c:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 80009a0:	e004      	b.n	80009ac <arm_cmplx_mag_f32+0xd4>
      *pOut = 0.0f;
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	f04f 0200 	mov.w	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80009aa:	bf00      	nop

    realIn = *pSrc++;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	1d1a      	adds	r2, r3, #4
 80009b0:	60fa      	str	r2, [r7, #12]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	1d1a      	adds	r2, r3, #4
 80009ba:	60fa      	str	r2, [r7, #12]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80009c0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80009c4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80009c8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80009cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80009d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	1d1a      	adds	r2, r3, #4
 80009d8:	60ba      	str	r2, [r7, #8]
 80009da:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80009de:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (in >= 0.0f)
 80009e0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80009e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80009e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ec:	db09      	blt.n	8000a02 <arm_cmplx_mag_f32+0x12a>
      *pOut = __builtin_sqrtf(in);
 80009ee:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 80009f2:	f006 f897 	bl	8006b24 <sqrtf>
 80009f6:	eef0 7a40 	vmov.f32	s15, s0
 80009fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fc:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8000a00:	e004      	b.n	8000a0c <arm_cmplx_mag_f32+0x134>
      *pOut = 0.0f;
 8000a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a04:	f04f 0200 	mov.w	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000a0a:	bf00      	nop

    realIn = *pSrc++;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	1d1a      	adds	r2, r3, #4
 8000a10:	60fa      	str	r2, [r7, #12]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	1d1a      	adds	r2, r3, #4
 8000a1a:	60fa      	str	r2, [r7, #12]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8000a20:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000a24:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000a28:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000a2c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000a30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	1d1a      	adds	r2, r3, #4
 8000a38:	60ba      	str	r2, [r7, #8]
 8000a3a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8000a3e:	637b      	str	r3, [r7, #52]	; 0x34
    if (in >= 0.0f)
 8000a40:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000a44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a4c:	db09      	blt.n	8000a62 <arm_cmplx_mag_f32+0x18a>
      *pOut = __builtin_sqrtf(in);
 8000a4e:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8000a52:	f006 f867 	bl	8006b24 <sqrtf>
 8000a56:	eef0 7a40 	vmov.f32	s15, s0
 8000a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a5c:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8000a60:	e004      	b.n	8000a6c <arm_cmplx_mag_f32+0x194>
      *pOut = 0.0f;
 8000a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a64:	f04f 0200 	mov.w	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000a6a:	bf00      	nop


    /* Decrement the loop counter */
    blkCnt--;
 8000a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	647b      	str	r3, [r7, #68]	; 0x44
  while (blkCnt > 0U)
 8000a72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	f47f af39 	bne.w	80008ec <arm_cmplx_mag_f32+0x14>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4U;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f003 0303 	and.w	r3, r3, #3
 8000a80:	647b      	str	r3, [r7, #68]	; 0x44

  while (blkCnt > 0U)
 8000a82:	e032      	b.n	8000aea <arm_cmplx_mag_f32+0x212>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	1d1a      	adds	r2, r3, #4
 8000a88:	60fa      	str	r2, [r7, #12]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	1d1a      	adds	r2, r3, #4
 8000a92:	60fa      	str	r2, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8000a98:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000a9c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000aa0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000aa4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000aa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	1d1a      	adds	r2, r3, #4
 8000ab0:	60ba      	str	r2, [r7, #8]
 8000ab2:	edc7 7a06 	vstr	s15, [r7, #24]
 8000ab6:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 8000ab8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000abc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac4:	db09      	blt.n	8000ada <arm_cmplx_mag_f32+0x202>
      *pOut = __builtin_sqrtf(in);
 8000ac6:	ed97 0a06 	vldr	s0, [r7, #24]
 8000aca:	f006 f82b 	bl	8006b24 <sqrtf>
 8000ace:	eef0 7a40 	vmov.f32	s15, s0
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8000ad8:	e004      	b.n	8000ae4 <arm_cmplx_mag_f32+0x20c>
      *pOut = 0.0f;
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	f04f 0200 	mov.w	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000ae2:	bf00      	nop

    /* Decrement the loop counter */
    blkCnt--;
 8000ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	647b      	str	r3, [r7, #68]	; 0x44
  while (blkCnt > 0U)
 8000aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d1c9      	bne.n	8000a84 <arm_cmplx_mag_f32+0x1ac>
    numSamples--;
  }

#endif /* #if defined (ARM_MATH_DSP) */

}
 8000af0:	bf00      	nop
 8000af2:	bf00      	nop
 8000af4:	3748      	adds	r7, #72	; 0x48
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <arm_cos_f32>:
 * @return cos(x).
 */

float32_t arm_cos_f32(
  float32_t x)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b08b      	sub	sp, #44	; 0x2c
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 8000b06:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b0a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8000be8 <arm_cos_f32+0xec>
 8000b0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b12:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8000b16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b1a:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8000b1e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000b22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b26:	ee17 3a90 	vmov	r3, s15
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8000b2c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000b30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b38:	d502      	bpl.n	8000b40 <arm_cos_f32+0x44>
  {
    n--;
 8000b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8000b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b42:	ee07 3a90 	vmov	s15, r3
 8000b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b4a:	ed97 7a08 	vldr	s14, [r7, #32]
 8000b4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b52:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 8000b56:	edd7 7a08 	vldr	s15, [r7, #32]
 8000b5a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000bec <arm_cos_f32+0xf0>
 8000b5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b62:	edc7 7a07 	vstr	s15, [r7, #28]
  index = ((uint16_t)findex) & 0x1ff;
 8000b66:	edd7 7a07 	vldr	s15, [r7, #28]
 8000b6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b6e:	ee17 3a90 	vmov	r3, s15
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b78:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8000b7a:	8b7b      	ldrh	r3, [r7, #26]
 8000b7c:	ee07 3a90 	vmov	s15, r3
 8000b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b84:	ed97 7a07 	vldr	s14, [r7, #28]
 8000b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b8c:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 8000b90:	8b7b      	ldrh	r3, [r7, #26]
 8000b92:	4a17      	ldr	r2, [pc, #92]	; (8000bf0 <arm_cos_f32+0xf4>)
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	4413      	add	r3, r2
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8000b9c:	8b7b      	ldrh	r3, [r7, #26]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	4a13      	ldr	r2, [pc, #76]	; (8000bf0 <arm_cos_f32+0xf4>)
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	4413      	add	r3, r2
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  cosVal = (1.0f-fract)*a + fract*b;
 8000baa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000bae:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bb2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000bb6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bbe:	edd7 6a05 	vldr	s13, [r7, #20]
 8000bc2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bce:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return the output value */
  return (cosVal);
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	ee07 3a90 	vmov	s15, r3
}
 8000bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bdc:	372c      	adds	r7, #44	; 0x2c
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	3e22f983 	.word	0x3e22f983
 8000bec:	44000000 	.word	0x44000000
 8000bf0:	08006b90 	.word	0x08006b90

08000bf4 <arm_sin_f32>:
 * @return  sin(x).
 */

float32_t arm_sin_f32(
  float32_t x)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b08b      	sub	sp, #44	; 0x2c
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	ed87 0a01 	vstr	s0, [r7, #4]
  float32_t a, b;                                        /* Two nearest output values */
  int32_t n;
  float32_t findex;

  /* Special case for small negative inputs */
  if ((x < 0.0f) && (x >= -1.9e-7f)) {
 8000bfe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c0a:	d50a      	bpl.n	8000c22 <arm_sin_f32+0x2e>
 8000c0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c10:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8000cfc <arm_sin_f32+0x108>
 8000c14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c1c:	db01      	blt.n	8000c22 <arm_sin_f32+0x2e>
     return x;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	e062      	b.n	8000ce8 <arm_sin_f32+0xf4>
  }

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 8000c22:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c26:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000d00 <arm_sin_f32+0x10c>
 8000c2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c2e:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8000c32:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c3a:	ee17 3a90 	vmov	r3, s15
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if (x < 0.0f)
 8000c40:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c4c:	d502      	bpl.n	8000c54 <arm_sin_f32+0x60>
  {
    n--;
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c50:	3b01      	subs	r3, #1
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8000c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c56:	ee07 3a90 	vmov	s15, r3
 8000c5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c5e:	ed97 7a08 	vldr	s14, [r7, #32]
 8000c62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c66:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 8000c6a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c6e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000d04 <arm_sin_f32+0x110>
 8000c72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c76:	edc7 7a07 	vstr	s15, [r7, #28]

  index = ((uint16_t)findex) & 0x1ff;
 8000c7a:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c82:	ee17 3a90 	vmov	r3, s15
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c8c:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8000c8e:	8b7b      	ldrh	r3, [r7, #26]
 8000c90:	ee07 3a90 	vmov	s15, r3
 8000c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c98:	ed97 7a07 	vldr	s14, [r7, #28]
 8000c9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ca0:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 8000ca4:	8b7b      	ldrh	r3, [r7, #26]
 8000ca6:	4a18      	ldr	r2, [pc, #96]	; (8000d08 <arm_sin_f32+0x114>)
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	4413      	add	r3, r2
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8000cb0:	8b7b      	ldrh	r3, [r7, #26]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <arm_sin_f32+0x114>)
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	4413      	add	r3, r2
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f-fract)*a + fract*b;
 8000cbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000cc2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cca:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cd2:	edd7 6a05 	vldr	s13, [r7, #20]
 8000cd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ce2:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return the output value */
  return (sinVal);
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	ee07 3a90 	vmov	s15, r3
}
 8000cec:	eeb0 0a67 	vmov.f32	s0, s15
 8000cf0:	372c      	adds	r7, #44	; 0x2c
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	b44c02cd 	.word	0xb44c02cd
 8000d00:	3e22f983 	.word	0x3e22f983
 8000d04:	44000000 	.word	0x44000000
 8000d08:	08006b90 	.word	0x08006b90

08000d0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d10:	f002 f916 	bl	8002f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d14:	f000 f85e 	bl	8000dd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d18:	f000 fbc0 	bl	800149c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d1c:	f000 fb96 	bl	800144c <MX_DMA_Init>
  MX_ADC1_Init();
 8000d20:	f000 f8c2 	bl	8000ea8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000d24:	f000 f938 	bl	8000f98 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000d28:	f000 f98e 	bl	8001048 <MX_ADC3_Init>
  MX_TIM1_Init();
 8000d2c:	f000 fa4a 	bl	80011c4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000d30:	f000 fb02 	bl	8001338 <MX_TIM3_Init>
  MX_DAC_Init();
 8000d34:	f000 f9e0 	bl	80010f8 <MX_DAC_Init>
  MX_SPI2_Init();
 8000d38:	f000 fa12 	bl	8001160 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
Device_DAC_ON();
 8000d3c:	f000 fcce 	bl	80016dc <Device_DAC_ON>

Device_ADC_Start(Device_ADC_Buf,6);
 8000d40:	2106      	movs	r1, #6
 8000d42:	4820      	ldr	r0, [pc, #128]	; (8000dc4 <main+0xb8>)
 8000d44:	f000 fcd8 	bl	80016f8 <Device_ADC_Start>

/*                                    ENCODER SPI-DMA INIT                          */
  HAL_SPI_Init(&hspi2);
 8000d48:	481f      	ldr	r0, [pc, #124]	; (8000dc8 <main+0xbc>)
 8000d4a:	f003 ffd3 	bl	8004cf4 <HAL_SPI_Init>
  HAL_SPI_MspInit(&hspi2);
 8000d4e:	481e      	ldr	r0, [pc, #120]	; (8000dc8 <main+0xbc>)
 8000d50:	f000 fec2 	bl	8001ad8 <HAL_SPI_MspInit>
  HAL_NVIC_DisableIRQ(DMA1_Stream3_IRQn);
 8000d54:	200e      	movs	r0, #14
 8000d56:	f002 febc 	bl	8003ad2 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(DMA1_Stream4_IRQn);
 8000d5a:	200f      	movs	r0, #15
 8000d5c:	f002 feb9 	bl	8003ad2 <HAL_NVIC_DisableIRQ>
  HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)&speed.angle_f[0], 1);
 8000d60:	2201      	movs	r2, #1
 8000d62:	491a      	ldr	r1, [pc, #104]	; (8000dcc <main+0xc0>)
 8000d64:	4818      	ldr	r0, [pc, #96]	; (8000dc8 <main+0xbc>)
 8000d66:	f004 f84f 	bl	8004e08 <HAL_SPI_Receive_DMA>


HAL_Delay(600);
 8000d6a:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000d6e:	f002 f959 	bl	8003024 <HAL_Delay>

Device_MainTimerStart();
 8000d72:	f000 fca9 	bl	80016c8 <Device_MainTimerStart>
Device_PWM_Channels_ON();
 8000d76:	f000 fd15 	bl	80017a4 <Device_PWM_Channels_ON>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  //Device_DAC_Out_PA4_CH1(enc_angle/8200.0f);
  Device_Toggle_Led(O_D_Led1_GPIO_Port,O_D_Led1_Pin);
 8000d7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d7e:	4814      	ldr	r0, [pc, #80]	; (8000dd0 <main+0xc4>)
 8000d80:	f000 fd30 	bl	80017e4 <Device_Toggle_Led>
  HAL_Delay(500);
 8000d84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d88:	f002 f94c 	bl	8003024 <HAL_Delay>
  Device_Toggle_Led(O_D_Led2_GPIO_Port,O_D_Led2_Pin);
 8000d8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d90:	480f      	ldr	r0, [pc, #60]	; (8000dd0 <main+0xc4>)
 8000d92:	f000 fd27 	bl	80017e4 <Device_Toggle_Led>
  HAL_Delay(500);
 8000d96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d9a:	f002 f943 	bl	8003024 <HAL_Delay>
  Device_Toggle_Led(O_D_Led3_GPIO_Port,O_D_Led3_Pin);
 8000d9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000da2:	480b      	ldr	r0, [pc, #44]	; (8000dd0 <main+0xc4>)
 8000da4:	f000 fd1e 	bl	80017e4 <Device_Toggle_Led>
  HAL_Delay(500);
 8000da8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dac:	f002 f93a 	bl	8003024 <HAL_Delay>
  Device_Toggle_Led(O_D_Led4_GPIO_Port,O_D_Led4_Pin);
 8000db0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000db4:	4806      	ldr	r0, [pc, #24]	; (8000dd0 <main+0xc4>)
 8000db6:	f000 fd15 	bl	80017e4 <Device_Toggle_Led>
  HAL_Delay(500);
 8000dba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dbe:	f002 f931 	bl	8003024 <HAL_Delay>
  Device_Toggle_Led(O_D_Led1_GPIO_Port,O_D_Led1_Pin);
 8000dc2:	e7da      	b.n	8000d7a <main+0x6e>
 8000dc4:	20000188 	.word	0x20000188
 8000dc8:	20000208 	.word	0x20000208
 8000dcc:	200003e2 	.word	0x200003e2
 8000dd0:	40020c00 	.word	0x40020c00

08000dd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b094      	sub	sp, #80	; 0x50
 8000dd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dda:	f107 0320 	add.w	r3, r7, #32
 8000dde:	2230      	movs	r2, #48	; 0x30
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f005 fe50 	bl	8006a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	4b28      	ldr	r3, [pc, #160]	; (8000ea0 <SystemClock_Config+0xcc>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	4a27      	ldr	r2, [pc, #156]	; (8000ea0 <SystemClock_Config+0xcc>)
 8000e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e06:	6413      	str	r3, [r2, #64]	; 0x40
 8000e08:	4b25      	ldr	r3, [pc, #148]	; (8000ea0 <SystemClock_Config+0xcc>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e14:	2300      	movs	r3, #0
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	4b22      	ldr	r3, [pc, #136]	; (8000ea4 <SystemClock_Config+0xd0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a21      	ldr	r2, [pc, #132]	; (8000ea4 <SystemClock_Config+0xd0>)
 8000e1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e22:	6013      	str	r3, [r2, #0]
 8000e24:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <SystemClock_Config+0xd0>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e30:	2301      	movs	r3, #1
 8000e32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e44:	2304      	movs	r3, #4
 8000e46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e48:	23a8      	movs	r3, #168	; 0xa8
 8000e4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e50:	2304      	movs	r3, #4
 8000e52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e54:	f107 0320 	add.w	r3, r7, #32
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f003 fb0b 	bl	8004474 <HAL_RCC_OscConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e64:	f000 fcea 	bl	800183c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e68:	230f      	movs	r3, #15
 8000e6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e74:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e7e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	2105      	movs	r1, #5
 8000e86:	4618      	mov	r0, r3
 8000e88:	f003 fd6c 	bl	8004964 <HAL_RCC_ClockConfig>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e92:	f000 fcd3 	bl	800183c <Error_Handler>
  }
}
 8000e96:	bf00      	nop
 8000e98:	3750      	adds	r7, #80	; 0x50
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40007000 	.word	0x40007000

08000ea8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ec6:	4b32      	ldr	r3, [pc, #200]	; (8000f90 <MX_ADC1_Init+0xe8>)
 8000ec8:	4a32      	ldr	r2, [pc, #200]	; (8000f94 <MX_ADC1_Init+0xec>)
 8000eca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ecc:	4b30      	ldr	r3, [pc, #192]	; (8000f90 <MX_ADC1_Init+0xe8>)
 8000ece:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ed2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ed4:	4b2e      	ldr	r3, [pc, #184]	; (8000f90 <MX_ADC1_Init+0xe8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000eda:	4b2d      	ldr	r3, [pc, #180]	; (8000f90 <MX_ADC1_Init+0xe8>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ee0:	4b2b      	ldr	r3, [pc, #172]	; (8000f90 <MX_ADC1_Init+0xe8>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ee6:	4b2a      	ldr	r3, [pc, #168]	; (8000f90 <MX_ADC1_Init+0xe8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000eee:	4b28      	ldr	r3, [pc, #160]	; (8000f90 <MX_ADC1_Init+0xe8>)
 8000ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ef4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_CC1;
 8000ef6:	4b26      	ldr	r3, [pc, #152]	; (8000f90 <MX_ADC1_Init+0xe8>)
 8000ef8:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8000efc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000efe:	4b24      	ldr	r3, [pc, #144]	; (8000f90 <MX_ADC1_Init+0xe8>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000f04:	4b22      	ldr	r3, [pc, #136]	; (8000f90 <MX_ADC1_Init+0xe8>)
 8000f06:	2202      	movs	r2, #2
 8000f08:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f0a:	4b21      	ldr	r3, [pc, #132]	; (8000f90 <MX_ADC1_Init+0xe8>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f12:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <MX_ADC1_Init+0xe8>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f18:	481d      	ldr	r0, [pc, #116]	; (8000f90 <MX_ADC1_Init+0xe8>)
 8000f1a:	f002 f8a7 	bl	800306c <HAL_ADC_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000f24:	f000 fc8a 	bl	800183c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_TRIPLEMODE_REGSIMULT;
 8000f28:	2316      	movs	r3, #22
 8000f2a:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_1;
 8000f2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f30:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4814      	ldr	r0, [pc, #80]	; (8000f90 <MX_ADC1_Init+0xe8>)
 8000f3e:	f002 fbe1 	bl	8003704 <HAL_ADCEx_MultiModeConfigChannel>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 8000f48:	f000 fc78 	bl	800183c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 8000f50:	2301      	movs	r3, #1
 8000f52:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	480c      	ldr	r0, [pc, #48]	; (8000f90 <MX_ADC1_Init+0xe8>)
 8000f5e:	f002 f8e7 	bl	8003130 <HAL_ADC_ConfigChannel>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000f68:	f000 fc68 	bl	800183c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 2;
 8000f70:	2302      	movs	r3, #2
 8000f72:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	4619      	mov	r1, r3
 8000f78:	4805      	ldr	r0, [pc, #20]	; (8000f90 <MX_ADC1_Init+0xe8>)
 8000f7a:	f002 f8d9 	bl	8003130 <HAL_ADC_ConfigChannel>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000f84:	f000 fc5a 	bl	800183c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f88:	bf00      	nop
 8000f8a:	3720      	adds	r7, #32
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	200000f8 	.word	0x200000f8
 8000f94:	40012000 	.word	0x40012000

08000f98 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000faa:	4b25      	ldr	r3, [pc, #148]	; (8001040 <MX_ADC2_Init+0xa8>)
 8000fac:	4a25      	ldr	r2, [pc, #148]	; (8001044 <MX_ADC2_Init+0xac>)
 8000fae:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fb0:	4b23      	ldr	r3, [pc, #140]	; (8001040 <MX_ADC2_Init+0xa8>)
 8000fb2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fb6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000fb8:	4b21      	ldr	r3, [pc, #132]	; (8001040 <MX_ADC2_Init+0xa8>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8000fbe:	4b20      	ldr	r3, [pc, #128]	; (8001040 <MX_ADC2_Init+0xa8>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000fc4:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <MX_ADC2_Init+0xa8>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000fca:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <MX_ADC2_Init+0xa8>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fd2:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <MX_ADC2_Init+0xa8>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8000fd8:	4b19      	ldr	r3, [pc, #100]	; (8001040 <MX_ADC2_Init+0xa8>)
 8000fda:	2202      	movs	r2, #2
 8000fdc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000fde:	4b18      	ldr	r3, [pc, #96]	; (8001040 <MX_ADC2_Init+0xa8>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe6:	4b16      	ldr	r3, [pc, #88]	; (8001040 <MX_ADC2_Init+0xa8>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000fec:	4814      	ldr	r0, [pc, #80]	; (8001040 <MX_ADC2_Init+0xa8>)
 8000fee:	f002 f83d 	bl	800306c <HAL_ADC_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 8000ff8:	f000 fc20 	bl	800183c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000ffc:	230b      	movs	r3, #11
 8000ffe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001000:	2301      	movs	r3, #1
 8001002:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001008:	463b      	mov	r3, r7
 800100a:	4619      	mov	r1, r3
 800100c:	480c      	ldr	r0, [pc, #48]	; (8001040 <MX_ADC2_Init+0xa8>)
 800100e:	f002 f88f 	bl	8003130 <HAL_ADC_ConfigChannel>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8001018:	f000 fc10 	bl	800183c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800101c:	230d      	movs	r3, #13
 800101e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001020:	2302      	movs	r3, #2
 8001022:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001024:	463b      	mov	r3, r7
 8001026:	4619      	mov	r1, r3
 8001028:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_ADC2_Init+0xa8>)
 800102a:	f002 f881 	bl	8003130 <HAL_ADC_ConfigChannel>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_ADC2_Init+0xa0>
  {
    Error_Handler();
 8001034:	f000 fc02 	bl	800183c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200000b0 	.word	0x200000b0
 8001044:	40012100 	.word	0x40012100

08001048 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800104e:	463b      	mov	r3, r7
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800105a:	4b25      	ldr	r3, [pc, #148]	; (80010f0 <MX_ADC3_Init+0xa8>)
 800105c:	4a25      	ldr	r2, [pc, #148]	; (80010f4 <MX_ADC3_Init+0xac>)
 800105e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001060:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <MX_ADC3_Init+0xa8>)
 8001062:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001066:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001068:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <MX_ADC3_Init+0xa8>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 800106e:	4b20      	ldr	r3, [pc, #128]	; (80010f0 <MX_ADC3_Init+0xa8>)
 8001070:	2201      	movs	r2, #1
 8001072:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001074:	4b1e      	ldr	r3, [pc, #120]	; (80010f0 <MX_ADC3_Init+0xa8>)
 8001076:	2200      	movs	r2, #0
 8001078:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <MX_ADC3_Init+0xa8>)
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001082:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <MX_ADC3_Init+0xa8>)
 8001084:	2200      	movs	r2, #0
 8001086:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 2;
 8001088:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <MX_ADC3_Init+0xa8>)
 800108a:	2202      	movs	r2, #2
 800108c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800108e:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <MX_ADC3_Init+0xa8>)
 8001090:	2200      	movs	r2, #0
 8001092:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001096:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <MX_ADC3_Init+0xa8>)
 8001098:	2201      	movs	r2, #1
 800109a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800109c:	4814      	ldr	r0, [pc, #80]	; (80010f0 <MX_ADC3_Init+0xa8>)
 800109e:	f001 ffe5 	bl	800306c <HAL_ADC_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_ADC3_Init+0x64>
  {
    Error_Handler();
 80010a8:	f000 fbc8 	bl	800183c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80010ac:	230c      	movs	r3, #12
 80010ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010b0:	2301      	movs	r3, #1
 80010b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010b8:	463b      	mov	r3, r7
 80010ba:	4619      	mov	r1, r3
 80010bc:	480c      	ldr	r0, [pc, #48]	; (80010f0 <MX_ADC3_Init+0xa8>)
 80010be:	f002 f837 	bl	8003130 <HAL_ADC_ConfigChannel>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 80010c8:	f000 fbb8 	bl	800183c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010cc:	230a      	movs	r3, #10
 80010ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80010d0:	2302      	movs	r3, #2
 80010d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010d4:	463b      	mov	r3, r7
 80010d6:	4619      	mov	r1, r3
 80010d8:	4805      	ldr	r0, [pc, #20]	; (80010f0 <MX_ADC3_Init+0xa8>)
 80010da:	f002 f829 	bl	8003130 <HAL_ADC_ConfigChannel>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_ADC3_Init+0xa0>
  {
    Error_Handler();
 80010e4:	f000 fbaa 	bl	800183c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000140 	.word	0x20000140
 80010f4:	40012200 	.word	0x40012200

080010f8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80010fe:	463b      	mov	r3, r7
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001106:	4b14      	ldr	r3, [pc, #80]	; (8001158 <MX_DAC_Init+0x60>)
 8001108:	4a14      	ldr	r2, [pc, #80]	; (800115c <MX_DAC_Init+0x64>)
 800110a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800110c:	4812      	ldr	r0, [pc, #72]	; (8001158 <MX_DAC_Init+0x60>)
 800110e:	f002 fcfa 	bl	8003b06 <HAL_DAC_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001118:	f000 fb90 	bl	800183c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800111c:	2300      	movs	r3, #0
 800111e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001120:	2300      	movs	r3, #0
 8001122:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001124:	463b      	mov	r3, r7
 8001126:	2200      	movs	r2, #0
 8001128:	4619      	mov	r1, r3
 800112a:	480b      	ldr	r0, [pc, #44]	; (8001158 <MX_DAC_Init+0x60>)
 800112c:	f002 fd84 	bl	8003c38 <HAL_DAC_ConfigChannel>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001136:	f000 fb81 	bl	800183c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800113a:	463b      	mov	r3, r7
 800113c:	2210      	movs	r2, #16
 800113e:	4619      	mov	r1, r3
 8001140:	4805      	ldr	r0, [pc, #20]	; (8001158 <MX_DAC_Init+0x60>)
 8001142:	f002 fd79 	bl	8003c38 <HAL_DAC_ConfigChannel>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 800114c:	f000 fb76 	bl	800183c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200001f4 	.word	0x200001f4
 800115c:	40007400 	.word	0x40007400

08001160 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001164:	4b15      	ldr	r3, [pc, #84]	; (80011bc <MX_SPI2_Init+0x5c>)
 8001166:	4a16      	ldr	r2, [pc, #88]	; (80011c0 <MX_SPI2_Init+0x60>)
 8001168:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <MX_SPI2_Init+0x5c>)
 800116c:	2200      	movs	r2, #0
 800116e:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <MX_SPI2_Init+0x5c>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001176:	4b11      	ldr	r3, [pc, #68]	; (80011bc <MX_SPI2_Init+0x5c>)
 8001178:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800117c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <MX_SPI2_Init+0x5c>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001184:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <MX_SPI2_Init+0x5c>)
 8001186:	2200      	movs	r2, #0
 8001188:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <MX_SPI2_Init+0x5c>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001190:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <MX_SPI2_Init+0x5c>)
 8001192:	2200      	movs	r2, #0
 8001194:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <MX_SPI2_Init+0x5c>)
 8001198:	2200      	movs	r2, #0
 800119a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <MX_SPI2_Init+0x5c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <MX_SPI2_Init+0x5c>)
 80011a4:	220a      	movs	r2, #10
 80011a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011a8:	4804      	ldr	r0, [pc, #16]	; (80011bc <MX_SPI2_Init+0x5c>)
 80011aa:	f003 fda3 	bl	8004cf4 <HAL_SPI_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_SPI2_Init+0x58>
  {
    Error_Handler();
 80011b4:	f000 fb42 	bl	800183c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000208 	.word	0x20000208
 80011c0:	40003800 	.word	0x40003800

080011c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b096      	sub	sp, #88	; 0x58
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]
 80011f2:	615a      	str	r2, [r3, #20]
 80011f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2220      	movs	r2, #32
 80011fa:	2100      	movs	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f005 fc43 	bl	8006a88 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001202:	4b4b      	ldr	r3, [pc, #300]	; (8001330 <MX_TIM1_Init+0x16c>)
 8001204:	4a4b      	ldr	r2, [pc, #300]	; (8001334 <MX_TIM1_Init+0x170>)
 8001206:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8001208:	4b49      	ldr	r3, [pc, #292]	; (8001330 <MX_TIM1_Init+0x16c>)
 800120a:	2201      	movs	r2, #1
 800120c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800120e:	4b48      	ldr	r3, [pc, #288]	; (8001330 <MX_TIM1_Init+0x16c>)
 8001210:	2220      	movs	r2, #32
 8001212:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8400;
 8001214:	4b46      	ldr	r3, [pc, #280]	; (8001330 <MX_TIM1_Init+0x16c>)
 8001216:	f242 02d0 	movw	r2, #8400	; 0x20d0
 800121a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121c:	4b44      	ldr	r3, [pc, #272]	; (8001330 <MX_TIM1_Init+0x16c>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001222:	4b43      	ldr	r3, [pc, #268]	; (8001330 <MX_TIM1_Init+0x16c>)
 8001224:	2200      	movs	r2, #0
 8001226:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001228:	4b41      	ldr	r3, [pc, #260]	; (8001330 <MX_TIM1_Init+0x16c>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800122e:	4840      	ldr	r0, [pc, #256]	; (8001330 <MX_TIM1_Init+0x16c>)
 8001230:	f004 f9ee 	bl	8005610 <HAL_TIM_Base_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800123a:	f000 faff 	bl	800183c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800123e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001242:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001244:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001248:	4619      	mov	r1, r3
 800124a:	4839      	ldr	r0, [pc, #228]	; (8001330 <MX_TIM1_Init+0x16c>)
 800124c:	f004 fe3a 	bl	8005ec4 <HAL_TIM_ConfigClockSource>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001256:	f000 faf1 	bl	800183c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800125a:	4835      	ldr	r0, [pc, #212]	; (8001330 <MX_TIM1_Init+0x16c>)
 800125c:	f004 fbba 	bl	80059d4 <HAL_TIM_PWM_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001266:	f000 fae9 	bl	800183c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800126a:	2310      	movs	r3, #16
 800126c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126e:	2300      	movs	r3, #0
 8001270:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001272:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001276:	4619      	mov	r1, r3
 8001278:	482d      	ldr	r0, [pc, #180]	; (8001330 <MX_TIM1_Init+0x16c>)
 800127a:	f005 faf9 	bl	8006870 <HAL_TIMEx_MasterConfigSynchronization>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001284:	f000 fada 	bl	800183c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001288:	2360      	movs	r3, #96	; 0x60
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 4200;
 800128c:	f241 0368 	movw	r3, #4200	; 0x1068
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001292:	2300      	movs	r3, #0
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001296:	2300      	movs	r3, #0
 8001298:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800129e:	2300      	movs	r3, #0
 80012a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012a2:	2300      	movs	r3, #0
 80012a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012aa:	2200      	movs	r2, #0
 80012ac:	4619      	mov	r1, r3
 80012ae:	4820      	ldr	r0, [pc, #128]	; (8001330 <MX_TIM1_Init+0x16c>)
 80012b0:	f004 fd4a 	bl	8005d48 <HAL_TIM_PWM_ConfigChannel>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80012ba:	f000 fabf 	bl	800183c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c2:	2204      	movs	r2, #4
 80012c4:	4619      	mov	r1, r3
 80012c6:	481a      	ldr	r0, [pc, #104]	; (8001330 <MX_TIM1_Init+0x16c>)
 80012c8:	f004 fd3e 	bl	8005d48 <HAL_TIM_PWM_ConfigChannel>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80012d2:	f000 fab3 	bl	800183c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012da:	2208      	movs	r2, #8
 80012dc:	4619      	mov	r1, r3
 80012de:	4814      	ldr	r0, [pc, #80]	; (8001330 <MX_TIM1_Init+0x16c>)
 80012e0:	f004 fd32 	bl	8005d48 <HAL_TIM_PWM_ConfigChannel>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80012ea:	f000 faa7 	bl	800183c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 250;
 80012fa:	23fa      	movs	r3, #250	; 0xfa
 80012fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001302:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001306:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001308:	2300      	movs	r3, #0
 800130a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	4619      	mov	r1, r3
 8001310:	4807      	ldr	r0, [pc, #28]	; (8001330 <MX_TIM1_Init+0x16c>)
 8001312:	f005 fb29 	bl	8006968 <HAL_TIMEx_ConfigBreakDeadTime>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 800131c:	f000 fa8e 	bl	800183c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001320:	4803      	ldr	r0, [pc, #12]	; (8001330 <MX_TIM1_Init+0x16c>)
 8001322:	f000 fcc9 	bl	8001cb8 <HAL_TIM_MspPostInit>

}
 8001326:	bf00      	nop
 8001328:	3758      	adds	r7, #88	; 0x58
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000308 	.word	0x20000308
 8001334:	40010000 	.word	0x40010000

08001338 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b092      	sub	sp, #72	; 0x48
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800134c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001366:	463b      	mov	r3, r7
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
 8001374:	615a      	str	r2, [r3, #20]
 8001376:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001378:	4b32      	ldr	r3, [pc, #200]	; (8001444 <MX_TIM3_Init+0x10c>)
 800137a:	4a33      	ldr	r2, [pc, #204]	; (8001448 <MX_TIM3_Init+0x110>)
 800137c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800137e:	4b31      	ldr	r3, [pc, #196]	; (8001444 <MX_TIM3_Init+0x10c>)
 8001380:	2200      	movs	r2, #0
 8001382:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001384:	4b2f      	ldr	r3, [pc, #188]	; (8001444 <MX_TIM3_Init+0x10c>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4200;
 800138a:	4b2e      	ldr	r3, [pc, #184]	; (8001444 <MX_TIM3_Init+0x10c>)
 800138c:	f241 0268 	movw	r2, #4200	; 0x1068
 8001390:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001392:	4b2c      	ldr	r3, [pc, #176]	; (8001444 <MX_TIM3_Init+0x10c>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001398:	4b2a      	ldr	r3, [pc, #168]	; (8001444 <MX_TIM3_Init+0x10c>)
 800139a:	2200      	movs	r2, #0
 800139c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800139e:	4829      	ldr	r0, [pc, #164]	; (8001444 <MX_TIM3_Init+0x10c>)
 80013a0:	f004 f936 	bl	8005610 <HAL_TIM_Base_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80013aa:	f000 fa47 	bl	800183c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013b8:	4619      	mov	r1, r3
 80013ba:	4822      	ldr	r0, [pc, #136]	; (8001444 <MX_TIM3_Init+0x10c>)
 80013bc:	f004 fd82 	bl	8005ec4 <HAL_TIM_ConfigClockSource>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80013c6:	f000 fa39 	bl	800183c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80013ca:	481e      	ldr	r0, [pc, #120]	; (8001444 <MX_TIM3_Init+0x10c>)
 80013cc:	f004 f9e0 	bl	8005790 <HAL_TIM_OC_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 80013d6:	f000 fa31 	bl	800183c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80013da:	2305      	movs	r3, #5
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80013de:	2300      	movs	r3, #0
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80013e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e6:	4619      	mov	r1, r3
 80013e8:	4816      	ldr	r0, [pc, #88]	; (8001444 <MX_TIM3_Init+0x10c>)
 80013ea:	f004 fe2f 	bl	800604c <HAL_TIM_SlaveConfigSynchro>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 80013f4:	f000 fa22 	bl	800183c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80013fc:	2380      	movs	r3, #128	; 0x80
 80013fe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001400:	f107 031c 	add.w	r3, r7, #28
 8001404:	4619      	mov	r1, r3
 8001406:	480f      	ldr	r0, [pc, #60]	; (8001444 <MX_TIM3_Init+0x10c>)
 8001408:	f005 fa32 	bl	8006870 <HAL_TIMEx_MasterConfigSynchronization>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001412:	f000 fa13 	bl	800183c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001416:	2330      	movs	r3, #48	; 0x30
 8001418:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001426:	463b      	mov	r3, r7
 8001428:	2200      	movs	r2, #0
 800142a:	4619      	mov	r1, r3
 800142c:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_TIM3_Init+0x10c>)
 800142e:	f004 fc33 	bl	8005c98 <HAL_TIM_OC_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001438:	f000 fa00 	bl	800183c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	3748      	adds	r7, #72	; 0x48
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200002c0 	.word	0x200002c0
 8001448:	40000400 	.word	0x40000400

0800144c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <MX_DMA_Init+0x4c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a0f      	ldr	r2, [pc, #60]	; (8001498 <MX_DMA_Init+0x4c>)
 800145c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <MX_DMA_Init+0x4c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	603b      	str	r3, [r7, #0]
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_DMA_Init+0x4c>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a08      	ldr	r2, [pc, #32]	; (8001498 <MX_DMA_Init+0x4c>)
 8001478:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_DMA_Init+0x4c>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	683b      	ldr	r3, [r7, #0]

}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800

0800149c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08c      	sub	sp, #48	; 0x30
 80014a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a2:	f107 031c 	add.w	r3, r7, #28
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	61bb      	str	r3, [r7, #24]
 80014b6:	4b7e      	ldr	r3, [pc, #504]	; (80016b0 <MX_GPIO_Init+0x214>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a7d      	ldr	r2, [pc, #500]	; (80016b0 <MX_GPIO_Init+0x214>)
 80014bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b7b      	ldr	r3, [pc, #492]	; (80016b0 <MX_GPIO_Init+0x214>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ca:	61bb      	str	r3, [r7, #24]
 80014cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	4b77      	ldr	r3, [pc, #476]	; (80016b0 <MX_GPIO_Init+0x214>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a76      	ldr	r2, [pc, #472]	; (80016b0 <MX_GPIO_Init+0x214>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b74      	ldr	r3, [pc, #464]	; (80016b0 <MX_GPIO_Init+0x214>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	4b70      	ldr	r3, [pc, #448]	; (80016b0 <MX_GPIO_Init+0x214>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a6f      	ldr	r2, [pc, #444]	; (80016b0 <MX_GPIO_Init+0x214>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b6d      	ldr	r3, [pc, #436]	; (80016b0 <MX_GPIO_Init+0x214>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4b69      	ldr	r3, [pc, #420]	; (80016b0 <MX_GPIO_Init+0x214>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a68      	ldr	r2, [pc, #416]	; (80016b0 <MX_GPIO_Init+0x214>)
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b66      	ldr	r3, [pc, #408]	; (80016b0 <MX_GPIO_Init+0x214>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	4b62      	ldr	r3, [pc, #392]	; (80016b0 <MX_GPIO_Init+0x214>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a61      	ldr	r2, [pc, #388]	; (80016b0 <MX_GPIO_Init+0x214>)
 800152c:	f043 0310 	orr.w	r3, r3, #16
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b5f      	ldr	r3, [pc, #380]	; (80016b0 <MX_GPIO_Init+0x214>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0310 	and.w	r3, r3, #16
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	4b5b      	ldr	r3, [pc, #364]	; (80016b0 <MX_GPIO_Init+0x214>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a5a      	ldr	r2, [pc, #360]	; (80016b0 <MX_GPIO_Init+0x214>)
 8001548:	f043 0308 	orr.w	r3, r3, #8
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b58      	ldr	r3, [pc, #352]	; (80016b0 <MX_GPIO_Init+0x214>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RESET_3_Pin|LED_4_Pin|LED_3_Pin|LED_1_Pin, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	f44f 7158 	mov.w	r1, #864	; 0x360
 8001560:	4854      	ldr	r0, [pc, #336]	; (80016b4 <MX_GPIO_Init+0x218>)
 8001562:	f002 ff53 	bl	800440c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_2_GPIO_Port, RESET_2_Pin, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800156c:	4852      	ldr	r0, [pc, #328]	; (80016b8 <MX_GPIO_Init+0x21c>)
 800156e:	f002 ff4d 	bl	800440c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_1_GPIO_Port, RESET_1_Pin, GPIO_PIN_RESET);
 8001572:	2200      	movs	r2, #0
 8001574:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001578:	4850      	ldr	r0, [pc, #320]	; (80016bc <MX_GPIO_Init+0x220>)
 800157a:	f002 ff47 	bl	800440c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, O_D_Led1_Pin|O_D_Led2_Pin|O_D_Led3_Pin|O_D_Led4_Pin, GPIO_PIN_RESET);
 800157e:	2200      	movs	r2, #0
 8001580:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001584:	484e      	ldr	r0, [pc, #312]	; (80016c0 <MX_GPIO_Init+0x224>)
 8001586:	f002 ff41 	bl	800440c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800158a:	2200      	movs	r2, #0
 800158c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001590:	484c      	ldr	r0, [pc, #304]	; (80016c4 <MX_GPIO_Init+0x228>)
 8001592:	f002 ff3b 	bl	800440c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FAULT_3_Pin */
  GPIO_InitStruct.Pin = FAULT_3_Pin;
 8001596:	2340      	movs	r3, #64	; 0x40
 8001598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159a:	2300      	movs	r3, #0
 800159c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(FAULT_3_GPIO_Port, &GPIO_InitStruct);
 80015a2:	f107 031c 	add.w	r3, r7, #28
 80015a6:	4619      	mov	r1, r3
 80015a8:	4846      	ldr	r0, [pc, #280]	; (80016c4 <MX_GPIO_Init+0x228>)
 80015aa:	f002 fd7b 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_3_Pin LED_4_Pin LED_3_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = RESET_3_Pin|LED_4_Pin|LED_3_Pin|LED_1_Pin;
 80015ae:	f44f 7358 	mov.w	r3, #864	; 0x360
 80015b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b4:	2301      	movs	r3, #1
 80015b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c0:	f107 031c 	add.w	r3, r7, #28
 80015c4:	4619      	mov	r1, r3
 80015c6:	483b      	ldr	r0, [pc, #236]	; (80016b4 <MX_GPIO_Init+0x218>)
 80015c8:	f002 fd6c 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FAULT_2_Pin */
  GPIO_InitStruct.Pin = FAULT_2_Pin;
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d0:	2300      	movs	r3, #0
 80015d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(FAULT_2_GPIO_Port, &GPIO_InitStruct);
 80015d8:	f107 031c 	add.w	r3, r7, #28
 80015dc:	4619      	mov	r1, r3
 80015de:	4836      	ldr	r0, [pc, #216]	; (80016b8 <MX_GPIO_Init+0x21c>)
 80015e0:	f002 fd60 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_2_Pin */
  GPIO_InitStruct.Pin = RESET_2_Pin;
 80015e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RESET_2_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	4619      	mov	r1, r3
 80015fc:	482e      	ldr	r0, [pc, #184]	; (80016b8 <MX_GPIO_Init+0x21c>)
 80015fe:	f002 fd51 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FAULT_1_Pin */
  GPIO_InitStruct.Pin = FAULT_1_Pin;
 8001602:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001608:	2300      	movs	r3, #0
 800160a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(FAULT_1_GPIO_Port, &GPIO_InitStruct);
 8001610:	f107 031c 	add.w	r3, r7, #28
 8001614:	4619      	mov	r1, r3
 8001616:	4829      	ldr	r0, [pc, #164]	; (80016bc <MX_GPIO_Init+0x220>)
 8001618:	f002 fd44 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_1_Pin */
  GPIO_InitStruct.Pin = RESET_1_Pin;
 800161c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001622:	2301      	movs	r3, #1
 8001624:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RESET_1_GPIO_Port, &GPIO_InitStruct);
 800162e:	f107 031c 	add.w	r3, r7, #28
 8001632:	4619      	mov	r1, r3
 8001634:	4821      	ldr	r0, [pc, #132]	; (80016bc <MX_GPIO_Init+0x220>)
 8001636:	f002 fd35 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : O_D_Led1_Pin O_D_Led2_Pin O_D_Led3_Pin O_D_Led4_Pin */
  GPIO_InitStruct.Pin = O_D_Led1_Pin|O_D_Led2_Pin|O_D_Led3_Pin|O_D_Led4_Pin;
 800163a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800163e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001640:	2301      	movs	r3, #1
 8001642:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	4619      	mov	r1, r3
 8001652:	481b      	ldr	r0, [pc, #108]	; (80016c0 <MX_GPIO_Init+0x224>)
 8001654:	f002 fd26 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_2_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin;
 8001658:	f44f 7380 	mov.w	r3, #256	; 0x100
 800165c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165e:	2301      	movs	r3, #1
 8001660:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	2300      	movs	r3, #0
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_2_GPIO_Port, &GPIO_InitStruct);
 800166a:	f107 031c 	add.w	r3, r7, #28
 800166e:	4619      	mov	r1, r3
 8001670:	4814      	ldr	r0, [pc, #80]	; (80016c4 <MX_GPIO_Init+0x228>)
 8001672:	f002 fd17 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : KM_Pin QF_Pin */
  GPIO_InitStruct.Pin = KM_Pin|QF_Pin;
 8001676:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800167a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800167c:	2300      	movs	r3, #0
 800167e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	4619      	mov	r1, r3
 800168a:	480a      	ldr	r0, [pc, #40]	; (80016b4 <MX_GPIO_Init+0x218>)
 800168c:	f002 fd0a 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SB_1_Pin SB_2_Pin */
  GPIO_InitStruct.Pin = SB_1_Pin|SB_2_Pin;
 8001690:	2305      	movs	r3, #5
 8001692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800169c:	f107 031c 	add.w	r3, r7, #28
 80016a0:	4619      	mov	r1, r3
 80016a2:	4807      	ldr	r0, [pc, #28]	; (80016c0 <MX_GPIO_Init+0x224>)
 80016a4:	f002 fcfe 	bl	80040a4 <HAL_GPIO_Init>

}
 80016a8:	bf00      	nop
 80016aa:	3730      	adds	r7, #48	; 0x30
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40020800 	.word	0x40020800
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40020400 	.word	0x40020400
 80016c0:	40020c00 	.word	0x40020c00
 80016c4:	40020000 	.word	0x40020000

080016c8 <Device_MainTimerStart>:

/* USER CODE BEGIN 4 */
void Device_MainTimerStart(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
HAL_TIM_Base_Start_IT(&htim1); 
 80016cc:	4802      	ldr	r0, [pc, #8]	; (80016d8 <Device_MainTimerStart+0x10>)
 80016ce:	f003 ffef 	bl	80056b0 <HAL_TIM_Base_Start_IT>
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000308 	.word	0x20000308

080016dc <Device_DAC_ON>:
{
HAL_TIM_Base_Stop_IT(&htim1); 
}

void Device_DAC_ON(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 80016e0:	2100      	movs	r1, #0
 80016e2:	4804      	ldr	r0, [pc, #16]	; (80016f4 <Device_DAC_ON+0x18>)
 80016e4:	f002 fa31 	bl	8003b4a <HAL_DAC_Start>
  HAL_DAC_Start(&hdac,DAC_CHANNEL_2);
 80016e8:	2110      	movs	r1, #16
 80016ea:	4802      	ldr	r0, [pc, #8]	; (80016f4 <Device_DAC_ON+0x18>)
 80016ec:	f002 fa2d 	bl	8003b4a <HAL_DAC_Start>
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200001f4 	.word	0x200001f4

080016f8 <Device_ADC_Start>:
void Device_ADC_Start(unsigned short *Device_ADC_Buf,unsigned short Lenght)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	807b      	strh	r3, [r7, #2]
  /*  x        1        2        x
ADC1  x,       iU,      id,       x.
ADC2  x,       iV,      R2,       x.
ADC3  x,       iW,      R1,       x.
*/
        __HAL_ADC_ENABLE(&hadc2);
 8001704:	4b22      	ldr	r3, [pc, #136]	; (8001790 <Device_ADC_Start+0x98>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	4b21      	ldr	r3, [pc, #132]	; (8001790 <Device_ADC_Start+0x98>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 0201 	orr.w	r2, r2, #1
 8001712:	609a      	str	r2, [r3, #8]
	__HAL_ADC_ENABLE(&hadc3);
 8001714:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <Device_ADC_Start+0x9c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	4b1e      	ldr	r3, [pc, #120]	; (8001794 <Device_ADC_Start+0x9c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 0201 	orr.w	r2, r2, #1
 8001722:	609a      	str	r2, [r3, #8]
HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*)Device_ADC_Buf, Lenght);
 8001724:	887b      	ldrh	r3, [r7, #2]
 8001726:	461a      	mov	r2, r3
 8001728:	6879      	ldr	r1, [r7, #4]
 800172a:	481b      	ldr	r0, [pc, #108]	; (8001798 <Device_ADC_Start+0xa0>)
 800172c:	f001 ff1e 	bl	800356c <HAL_ADCEx_MultiModeStart_DMA>
__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_TC);
 8001730:	4b1a      	ldr	r3, [pc, #104]	; (800179c <Device_ADC_Start+0xa4>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	4b19      	ldr	r3, [pc, #100]	; (800179c <Device_ADC_Start+0xa4>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0210 	bic.w	r2, r2, #16
 800173e:	601a      	str	r2, [r3, #0]
__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_HT);
 8001740:	4b16      	ldr	r3, [pc, #88]	; (800179c <Device_ADC_Start+0xa4>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <Device_ADC_Start+0xa4>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0208 	bic.w	r2, r2, #8
 800174e:	601a      	str	r2, [r3, #0]
__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_TE);
 8001750:	4b12      	ldr	r3, [pc, #72]	; (800179c <Device_ADC_Start+0xa4>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <Device_ADC_Start+0xa4>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 0204 	bic.w	r2, r2, #4
 800175e:	601a      	str	r2, [r3, #0]
__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_FE);
 8001760:	4b0e      	ldr	r3, [pc, #56]	; (800179c <Device_ADC_Start+0xa4>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	695a      	ldr	r2, [r3, #20]
 8001766:	4b0d      	ldr	r3, [pc, #52]	; (800179c <Device_ADC_Start+0xa4>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800176e:	615a      	str	r2, [r3, #20]
__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_DME);
 8001770:	4b0a      	ldr	r3, [pc, #40]	; (800179c <Device_ADC_Start+0xa4>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <Device_ADC_Start+0xa4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0202 	bic.w	r2, r2, #2
 800177e:	601a      	str	r2, [r3, #0]
HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);  
 8001780:	2100      	movs	r1, #0
 8001782:	4807      	ldr	r0, [pc, #28]	; (80017a0 <Device_ADC_Start+0xa8>)
 8001784:	f004 f85e 	bl	8005844 <HAL_TIM_OC_Start>
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	200000b0 	.word	0x200000b0
 8001794:	20000140 	.word	0x20000140
 8001798:	200000f8 	.word	0x200000f8
 800179c:	20000194 	.word	0x20000194
 80017a0:	200002c0 	.word	0x200002c0

080017a4 <Device_PWM_Channels_ON>:

void Device_PWM_Channels_ON(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
TIM_CCxChannelCmd(TIM1, TIM_CHANNEL_1, TIM_CCx_ENABLE | TIM_CCxN_ENABLE);
 80017a8:	2205      	movs	r2, #5
 80017aa:	2100      	movs	r1, #0
 80017ac:	480b      	ldr	r0, [pc, #44]	; (80017dc <Device_PWM_Channels_ON+0x38>)
 80017ae:	f005 f839 	bl	8006824 <TIM_CCxChannelCmd>
TIM_CCxChannelCmd(TIM1, TIM_CHANNEL_2, TIM_CCx_ENABLE | TIM_CCxN_ENABLE);
 80017b2:	2205      	movs	r2, #5
 80017b4:	2104      	movs	r1, #4
 80017b6:	4809      	ldr	r0, [pc, #36]	; (80017dc <Device_PWM_Channels_ON+0x38>)
 80017b8:	f005 f834 	bl	8006824 <TIM_CCxChannelCmd>
TIM_CCxChannelCmd(TIM1, TIM_CHANNEL_3, TIM_CCx_ENABLE | TIM_CCxN_ENABLE);
 80017bc:	2205      	movs	r2, #5
 80017be:	2108      	movs	r1, #8
 80017c0:	4806      	ldr	r0, [pc, #24]	; (80017dc <Device_PWM_Channels_ON+0x38>)
 80017c2:	f005 f82f 	bl	8006824 <TIM_CCxChannelCmd>
__HAL_TIM_MOE_ENABLE(&htim1);
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <Device_PWM_Channels_ON+0x3c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017cc:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <Device_PWM_Channels_ON+0x3c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017d4:	645a      	str	r2, [r3, #68]	; 0x44
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40010000 	.word	0x40010000
 80017e0:	20000308 	.word	0x20000308

080017e4 <Device_Toggle_Led>:
}



void Device_Toggle_Led(GPIO_TypeDef *LED_GPIO_Port, uint16_t LED_Pin)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	807b      	strh	r3, [r7, #2]
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80017f0:	887b      	ldrh	r3, [r7, #2]
 80017f2:	4619      	mov	r1, r3
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f002 fe22 	bl	800443e <HAL_GPIO_TogglePin>
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <Device_DAC_Out_PA4_CH1>:
{
  LED_GPIO_Port->BSRR = LED_Pin<<16;
}

void Device_DAC_Out_PA4_CH1(float PA4_ch1)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	ed87 0a01 	vstr	s0, [r7, #4]
    HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,(int)(PA4_ch1*4096.0f));
 800180e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001812:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001834 <Device_DAC_Out_PA4_CH1+0x30>
 8001816:	ee67 7a87 	vmul.f32	s15, s15, s14
 800181a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800181e:	ee17 3a90 	vmov	r3, s15
 8001822:	2200      	movs	r2, #0
 8001824:	2100      	movs	r1, #0
 8001826:	4804      	ldr	r0, [pc, #16]	; (8001838 <Device_DAC_Out_PA4_CH1+0x34>)
 8001828:	f002 f9e1 	bl	8003bee <HAL_DAC_SetValue>
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	45800000 	.word	0x45800000
 8001838:	200001f4 	.word	0x200001f4

0800183c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <HAL_MspInit+0x4c>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	4a0f      	ldr	r2, [pc, #60]	; (8001898 <HAL_MspInit+0x4c>)
 800185c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001860:	6453      	str	r3, [r2, #68]	; 0x44
 8001862:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <HAL_MspInit+0x4c>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	603b      	str	r3, [r7, #0]
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <HAL_MspInit+0x4c>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	4a08      	ldr	r2, [pc, #32]	; (8001898 <HAL_MspInit+0x4c>)
 8001878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800187c:	6413      	str	r3, [r2, #64]	; 0x40
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_MspInit+0x4c>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800

0800189c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08e      	sub	sp, #56	; 0x38
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a5d      	ldr	r2, [pc, #372]	; (8001a30 <HAL_ADC_MspInit+0x194>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d158      	bne.n	8001970 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	623b      	str	r3, [r7, #32]
 80018c2:	4b5c      	ldr	r3, [pc, #368]	; (8001a34 <HAL_ADC_MspInit+0x198>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	4a5b      	ldr	r2, [pc, #364]	; (8001a34 <HAL_ADC_MspInit+0x198>)
 80018c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018cc:	6453      	str	r3, [r2, #68]	; 0x44
 80018ce:	4b59      	ldr	r3, [pc, #356]	; (8001a34 <HAL_ADC_MspInit+0x198>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d6:	623b      	str	r3, [r7, #32]
 80018d8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
 80018de:	4b55      	ldr	r3, [pc, #340]	; (8001a34 <HAL_ADC_MspInit+0x198>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4a54      	ldr	r2, [pc, #336]	; (8001a34 <HAL_ADC_MspInit+0x198>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	4b52      	ldr	r3, [pc, #328]	; (8001a34 <HAL_ADC_MspInit+0x198>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	61fb      	str	r3, [r7, #28]
 80018f4:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = IU_Pin|Id_Pin;
 80018f6:	230a      	movs	r3, #10
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018fa:	2303      	movs	r3, #3
 80018fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001906:	4619      	mov	r1, r3
 8001908:	484b      	ldr	r0, [pc, #300]	; (8001a38 <HAL_ADC_MspInit+0x19c>)
 800190a:	f002 fbcb 	bl	80040a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800190e:	4b4b      	ldr	r3, [pc, #300]	; (8001a3c <HAL_ADC_MspInit+0x1a0>)
 8001910:	4a4b      	ldr	r2, [pc, #300]	; (8001a40 <HAL_ADC_MspInit+0x1a4>)
 8001912:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001914:	4b49      	ldr	r3, [pc, #292]	; (8001a3c <HAL_ADC_MspInit+0x1a0>)
 8001916:	2200      	movs	r2, #0
 8001918:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800191a:	4b48      	ldr	r3, [pc, #288]	; (8001a3c <HAL_ADC_MspInit+0x1a0>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001920:	4b46      	ldr	r3, [pc, #280]	; (8001a3c <HAL_ADC_MspInit+0x1a0>)
 8001922:	2200      	movs	r2, #0
 8001924:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001926:	4b45      	ldr	r3, [pc, #276]	; (8001a3c <HAL_ADC_MspInit+0x1a0>)
 8001928:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800192c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800192e:	4b43      	ldr	r3, [pc, #268]	; (8001a3c <HAL_ADC_MspInit+0x1a0>)
 8001930:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001934:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001936:	4b41      	ldr	r3, [pc, #260]	; (8001a3c <HAL_ADC_MspInit+0x1a0>)
 8001938:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800193c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800193e:	4b3f      	ldr	r3, [pc, #252]	; (8001a3c <HAL_ADC_MspInit+0x1a0>)
 8001940:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001944:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001946:	4b3d      	ldr	r3, [pc, #244]	; (8001a3c <HAL_ADC_MspInit+0x1a0>)
 8001948:	2200      	movs	r2, #0
 800194a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800194c:	4b3b      	ldr	r3, [pc, #236]	; (8001a3c <HAL_ADC_MspInit+0x1a0>)
 800194e:	2200      	movs	r2, #0
 8001950:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001952:	483a      	ldr	r0, [pc, #232]	; (8001a3c <HAL_ADC_MspInit+0x1a0>)
 8001954:	f002 f9c0 	bl	8003cd8 <HAL_DMA_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800195e:	f7ff ff6d 	bl	800183c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a35      	ldr	r2, [pc, #212]	; (8001a3c <HAL_ADC_MspInit+0x1a0>)
 8001966:	639a      	str	r2, [r3, #56]	; 0x38
 8001968:	4a34      	ldr	r2, [pc, #208]	; (8001a3c <HAL_ADC_MspInit+0x1a0>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800196e:	e05a      	b.n	8001a26 <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC2)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a33      	ldr	r2, [pc, #204]	; (8001a44 <HAL_ADC_MspInit+0x1a8>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d128      	bne.n	80019cc <HAL_ADC_MspInit+0x130>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	61bb      	str	r3, [r7, #24]
 800197e:	4b2d      	ldr	r3, [pc, #180]	; (8001a34 <HAL_ADC_MspInit+0x198>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	4a2c      	ldr	r2, [pc, #176]	; (8001a34 <HAL_ADC_MspInit+0x198>)
 8001984:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001988:	6453      	str	r3, [r2, #68]	; 0x44
 800198a:	4b2a      	ldr	r3, [pc, #168]	; (8001a34 <HAL_ADC_MspInit+0x198>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001992:	61bb      	str	r3, [r7, #24]
 8001994:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	4b26      	ldr	r3, [pc, #152]	; (8001a34 <HAL_ADC_MspInit+0x198>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a25      	ldr	r2, [pc, #148]	; (8001a34 <HAL_ADC_MspInit+0x198>)
 80019a0:	f043 0304 	orr.w	r3, r3, #4
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b23      	ldr	r3, [pc, #140]	; (8001a34 <HAL_ADC_MspInit+0x198>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = IV_Pin|R2_UP_Pin;
 80019b2:	230a      	movs	r3, #10
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019b6:	2303      	movs	r3, #3
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c2:	4619      	mov	r1, r3
 80019c4:	4820      	ldr	r0, [pc, #128]	; (8001a48 <HAL_ADC_MspInit+0x1ac>)
 80019c6:	f002 fb6d 	bl	80040a4 <HAL_GPIO_Init>
}
 80019ca:	e02c      	b.n	8001a26 <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a1e      	ldr	r2, [pc, #120]	; (8001a4c <HAL_ADC_MspInit+0x1b0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d127      	bne.n	8001a26 <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <HAL_ADC_MspInit+0x198>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	4a15      	ldr	r2, [pc, #84]	; (8001a34 <HAL_ADC_MspInit+0x198>)
 80019e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019e4:	6453      	str	r3, [r2, #68]	; 0x44
 80019e6:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <HAL_ADC_MspInit+0x198>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <HAL_ADC_MspInit+0x198>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a0e      	ldr	r2, [pc, #56]	; (8001a34 <HAL_ADC_MspInit+0x198>)
 80019fc:	f043 0304 	orr.w	r3, r3, #4
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <HAL_ADC_MspInit+0x198>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = R1_DOWN_Pin|IW_Pin;
 8001a0e:	2305      	movs	r3, #5
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a12:	2303      	movs	r3, #3
 8001a14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4809      	ldr	r0, [pc, #36]	; (8001a48 <HAL_ADC_MspInit+0x1ac>)
 8001a22:	f002 fb3f 	bl	80040a4 <HAL_GPIO_Init>
}
 8001a26:	bf00      	nop
 8001a28:	3738      	adds	r7, #56	; 0x38
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40012000 	.word	0x40012000
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40020000 	.word	0x40020000
 8001a3c:	20000194 	.word	0x20000194
 8001a40:	40026410 	.word	0x40026410
 8001a44:	40012100 	.word	0x40012100
 8001a48:	40020800 	.word	0x40020800
 8001a4c:	40012200 	.word	0x40012200

08001a50 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a17      	ldr	r2, [pc, #92]	; (8001acc <HAL_DAC_MspInit+0x7c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d127      	bne.n	8001ac2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <HAL_DAC_MspInit+0x80>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	4a15      	ldr	r2, [pc, #84]	; (8001ad0 <HAL_DAC_MspInit+0x80>)
 8001a7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a80:	6413      	str	r3, [r2, #64]	; 0x40
 8001a82:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <HAL_DAC_MspInit+0x80>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <HAL_DAC_MspInit+0x80>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a0e      	ldr	r2, [pc, #56]	; (8001ad0 <HAL_DAC_MspInit+0x80>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <HAL_DAC_MspInit+0x80>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001aaa:	2330      	movs	r3, #48	; 0x30
 8001aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	4619      	mov	r1, r3
 8001abc:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <HAL_DAC_MspInit+0x84>)
 8001abe:	f002 faf1 	bl	80040a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001ac2:	bf00      	nop
 8001ac4:	3728      	adds	r7, #40	; 0x28
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40007400 	.word	0x40007400
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40020000 	.word	0x40020000

08001ad8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	; 0x28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a4a      	ldr	r2, [pc, #296]	; (8001c20 <HAL_SPI_MspInit+0x148>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	f040 808d 	bne.w	8001c16 <HAL_SPI_MspInit+0x13e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001afc:	2300      	movs	r3, #0
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	4b48      	ldr	r3, [pc, #288]	; (8001c24 <HAL_SPI_MspInit+0x14c>)
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	4a47      	ldr	r2, [pc, #284]	; (8001c24 <HAL_SPI_MspInit+0x14c>)
 8001b06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0c:	4b45      	ldr	r3, [pc, #276]	; (8001c24 <HAL_SPI_MspInit+0x14c>)
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	4b41      	ldr	r3, [pc, #260]	; (8001c24 <HAL_SPI_MspInit+0x14c>)
 8001b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b20:	4a40      	ldr	r2, [pc, #256]	; (8001c24 <HAL_SPI_MspInit+0x14c>)
 8001b22:	f043 0302 	orr.w	r3, r3, #2
 8001b26:	6313      	str	r3, [r2, #48]	; 0x30
 8001b28:	4b3e      	ldr	r3, [pc, #248]	; (8001c24 <HAL_SPI_MspInit+0x14c>)
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	68fb      	ldr	r3, [r7, #12]
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8001b34:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 8001b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b42:	2303      	movs	r3, #3
 8001b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b46:	2305      	movs	r3, #5
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4a:	f107 0314 	add.w	r3, r7, #20
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4835      	ldr	r0, [pc, #212]	; (8001c28 <HAL_SPI_MspInit+0x150>)
 8001b52:	f002 faa7 	bl	80040a4 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001b56:	4b35      	ldr	r3, [pc, #212]	; (8001c2c <HAL_SPI_MspInit+0x154>)
 8001b58:	4a35      	ldr	r2, [pc, #212]	; (8001c30 <HAL_SPI_MspInit+0x158>)
 8001b5a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001b5c:	4b33      	ldr	r3, [pc, #204]	; (8001c2c <HAL_SPI_MspInit+0x154>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b62:	4b32      	ldr	r3, [pc, #200]	; (8001c2c <HAL_SPI_MspInit+0x154>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b68:	4b30      	ldr	r3, [pc, #192]	; (8001c2c <HAL_SPI_MspInit+0x154>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b6e:	4b2f      	ldr	r3, [pc, #188]	; (8001c2c <HAL_SPI_MspInit+0x154>)
 8001b70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b74:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b76:	4b2d      	ldr	r3, [pc, #180]	; (8001c2c <HAL_SPI_MspInit+0x154>)
 8001b78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b7c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b7e:	4b2b      	ldr	r3, [pc, #172]	; (8001c2c <HAL_SPI_MspInit+0x154>)
 8001b80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b84:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001b86:	4b29      	ldr	r3, [pc, #164]	; (8001c2c <HAL_SPI_MspInit+0x154>)
 8001b88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b8c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b8e:	4b27      	ldr	r3, [pc, #156]	; (8001c2c <HAL_SPI_MspInit+0x154>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b94:	4b25      	ldr	r3, [pc, #148]	; (8001c2c <HAL_SPI_MspInit+0x154>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001b9a:	4824      	ldr	r0, [pc, #144]	; (8001c2c <HAL_SPI_MspInit+0x154>)
 8001b9c:	f002 f89c 	bl	8003cd8 <HAL_DMA_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_SPI_MspInit+0xd2>
    {
      Error_Handler();
 8001ba6:	f7ff fe49 	bl	800183c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a1f      	ldr	r2, [pc, #124]	; (8001c2c <HAL_SPI_MspInit+0x154>)
 8001bae:	64da      	str	r2, [r3, #76]	; 0x4c
 8001bb0:	4a1e      	ldr	r2, [pc, #120]	; (8001c2c <HAL_SPI_MspInit+0x154>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001bb6:	4b1f      	ldr	r3, [pc, #124]	; (8001c34 <HAL_SPI_MspInit+0x15c>)
 8001bb8:	4a1f      	ldr	r2, [pc, #124]	; (8001c38 <HAL_SPI_MspInit+0x160>)
 8001bba:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001bbc:	4b1d      	ldr	r3, [pc, #116]	; (8001c34 <HAL_SPI_MspInit+0x15c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bc2:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <HAL_SPI_MspInit+0x15c>)
 8001bc4:	2240      	movs	r2, #64	; 0x40
 8001bc6:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc8:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <HAL_SPI_MspInit+0x15c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bce:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <HAL_SPI_MspInit+0x15c>)
 8001bd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bd4:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bd6:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <HAL_SPI_MspInit+0x15c>)
 8001bd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bdc:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <HAL_SPI_MspInit+0x15c>)
 8001be0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001be4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001be6:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <HAL_SPI_MspInit+0x15c>)
 8001be8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bec:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bee:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <HAL_SPI_MspInit+0x15c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <HAL_SPI_MspInit+0x15c>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001bfa:	480e      	ldr	r0, [pc, #56]	; (8001c34 <HAL_SPI_MspInit+0x15c>)
 8001bfc:	f002 f86c 	bl	8003cd8 <HAL_DMA_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_SPI_MspInit+0x132>
    {
      Error_Handler();
 8001c06:	f7ff fe19 	bl	800183c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a09      	ldr	r2, [pc, #36]	; (8001c34 <HAL_SPI_MspInit+0x15c>)
 8001c0e:	649a      	str	r2, [r3, #72]	; 0x48
 8001c10:	4a08      	ldr	r2, [pc, #32]	; (8001c34 <HAL_SPI_MspInit+0x15c>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c16:	bf00      	nop
 8001c18:	3728      	adds	r7, #40	; 0x28
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40003800 	.word	0x40003800
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40020400 	.word	0x40020400
 8001c2c:	20000260 	.word	0x20000260
 8001c30:	40026058 	.word	0x40026058
 8001c34:	20000350 	.word	0x20000350
 8001c38:	40026070 	.word	0x40026070

08001c3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a18      	ldr	r2, [pc, #96]	; (8001cac <HAL_TIM_Base_MspInit+0x70>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d116      	bne.n	8001c7c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <HAL_TIM_Base_MspInit+0x74>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	4a16      	ldr	r2, [pc, #88]	; (8001cb0 <HAL_TIM_Base_MspInit+0x74>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5e:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <HAL_TIM_Base_MspInit+0x74>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	2019      	movs	r0, #25
 8001c70:	f001 ff05 	bl	8003a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c74:	2019      	movs	r0, #25
 8001c76:	f001 ff1e 	bl	8003ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c7a:	e012      	b.n	8001ca2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0c      	ldr	r2, [pc, #48]	; (8001cb4 <HAL_TIM_Base_MspInit+0x78>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d10d      	bne.n	8001ca2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_TIM_Base_MspInit+0x74>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	4a08      	ldr	r2, [pc, #32]	; (8001cb0 <HAL_TIM_Base_MspInit+0x74>)
 8001c90:	f043 0302 	orr.w	r3, r3, #2
 8001c94:	6413      	str	r3, [r2, #64]	; 0x40
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_TIM_Base_MspInit+0x74>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
}
 8001ca2:	bf00      	nop
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40010000 	.word	0x40010000
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40000400 	.word	0x40000400

08001cb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a21      	ldr	r2, [pc, #132]	; (8001d5c <HAL_TIM_MspPostInit+0xa4>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d13c      	bne.n	8001d54 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	4b20      	ldr	r3, [pc, #128]	; (8001d60 <HAL_TIM_MspPostInit+0xa8>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a1f      	ldr	r2, [pc, #124]	; (8001d60 <HAL_TIM_MspPostInit+0xa8>)
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <HAL_TIM_MspPostInit+0xa8>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <HAL_TIM_MspPostInit+0xa8>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	4a18      	ldr	r2, [pc, #96]	; (8001d60 <HAL_TIM_MspPostInit+0xa8>)
 8001d00:	f043 0310 	orr.w	r3, r3, #16
 8001d04:	6313      	str	r3, [r2, #48]	; 0x30
 8001d06:	4b16      	ldr	r3, [pc, #88]	; (8001d60 <HAL_TIM_MspPostInit+0xa8>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f003 0310 	and.w	r3, r3, #16
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = VL_Pin|WL_Pin;
 8001d12:	2303      	movs	r3, #3
 8001d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d16:	2302      	movs	r3, #2
 8001d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d22:	2301      	movs	r3, #1
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d26:	f107 0314 	add.w	r3, r7, #20
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	480d      	ldr	r0, [pc, #52]	; (8001d64 <HAL_TIM_MspPostInit+0xac>)
 8001d2e:	f002 f9b9 	bl	80040a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UL_Pin|UH_Pin|VH_Pin|WH_Pin;
 8001d32:	f44f 532c 	mov.w	r3, #11008	; 0x2b00
 8001d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	2300      	movs	r3, #0
 8001d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d44:	2301      	movs	r3, #1
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4806      	ldr	r0, [pc, #24]	; (8001d68 <HAL_TIM_MspPostInit+0xb0>)
 8001d50:	f002 f9a8 	bl	80040a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d54:	bf00      	nop
 8001d56:	3728      	adds	r7, #40	; 0x28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40010000 	.word	0x40010000
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40020400 	.word	0x40020400
 8001d68:	40021000 	.word	0x40021000

08001d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d7e:	e7fe      	b.n	8001d7e <HardFault_Handler+0x4>

08001d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <MemManage_Handler+0x4>

08001d86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d8a:	e7fe      	b.n	8001d8a <BusFault_Handler+0x4>

08001d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <UsageFault_Handler+0x4>

08001d92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dc0:	f001 f910 	bl	8002fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

static float Bufer_A_B[2];
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dcc:	48ad      	ldr	r0, [pc, #692]	; (8002084 <TIM1_UP_TIM10_IRQHandler+0x2bc>)
 8001dce:	f003 fe5a 	bl	8005a86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  /*########################################################################*/
  
  Speed_measure(&speed);
 8001dd2:	48ad      	ldr	r0, [pc, #692]	; (8002088 <TIM1_UP_TIM10_IRQHandler+0x2c0>)
 8001dd4:	f000 faaa 	bl	800232c <Speed_measure>
    Current_measure(i_ABC,Device_ADC_Buf);
 8001dd8:	49ac      	ldr	r1, [pc, #688]	; (800208c <TIM1_UP_TIM10_IRQHandler+0x2c4>)
 8001dda:	48ad      	ldr	r0, [pc, #692]	; (8002090 <TIM1_UP_TIM10_IRQHandler+0x2c8>)
 8001ddc:	f000 fb4c 	bl	8002478 <Current_measure>
   
    DSP_K_Conv_ABC_to_ab(i_ABC,i_ab);
 8001de0:	49ac      	ldr	r1, [pc, #688]	; (8002094 <TIM1_UP_TIM10_IRQHandler+0x2cc>)
 8001de2:	48ab      	ldr	r0, [pc, #684]	; (8002090 <TIM1_UP_TIM10_IRQHandler+0x2c8>)
 8001de4:	f000 fa7e 	bl	80022e4 <DSP_K_Conv_ABC_to_ab>
    
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0) == 1){
 8001de8:	2101      	movs	r1, #1
 8001dea:	48ab      	ldr	r0, [pc, #684]	; (8002098 <TIM1_UP_TIM10_IRQHandler+0x2d0>)
 8001dec:	f002 faf6 	bl	80043dc <HAL_GPIO_ReadPin>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d102      	bne.n	8001dfc <TIM1_UP_TIM10_IRQHandler+0x34>
    	flag_start = 1;
 8001df6:	4ba9      	ldr	r3, [pc, #676]	; (800209c <TIM1_UP_TIM10_IRQHandler+0x2d4>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 1){
 8001dfc:	2104      	movs	r1, #4
 8001dfe:	48a6      	ldr	r0, [pc, #664]	; (8002098 <TIM1_UP_TIM10_IRQHandler+0x2d0>)
 8001e00:	f002 faec 	bl	80043dc <HAL_GPIO_ReadPin>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d106      	bne.n	8001e18 <TIM1_UP_TIM10_IRQHandler+0x50>
    	neww = 0.0f;
 8001e0a:	4ba5      	ldr	r3, [pc, #660]	; (80020a0 <TIM1_UP_TIM10_IRQHandler+0x2d8>)
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
    	flag_start = 0;
 8001e12:	4ba2      	ldr	r3, [pc, #648]	; (800209c <TIM1_UP_TIM10_IRQHandler+0x2d4>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
    }

    if (flag_start){
 8001e18:	4ba0      	ldr	r3, [pc, #640]	; (800209c <TIM1_UP_TIM10_IRQHandler+0x2d4>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d02d      	beq.n	8001e7c <TIM1_UP_TIM10_IRQHandler+0xb4>
    	neww = (round)(((float)Device_ADC_Buf[4] + 1.0f) / 82.0f);
 8001e20:	4b9a      	ldr	r3, [pc, #616]	; (800208c <TIM1_UP_TIM10_IRQHandler+0x2c4>)
 8001e22:	891b      	ldrh	r3, [r3, #8]
 8001e24:	ee07 3a90 	vmov	s15, r3
 8001e28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e34:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 80020a4 <TIM1_UP_TIM10_IRQHandler+0x2dc>
 8001e38:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e3c:	ee16 0a90 	vmov	r0, s13
 8001e40:	f7fe fb26 	bl	8000490 <__aeabi_f2d>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	ec43 2b10 	vmov	d0, r2, r3
 8001e4c:	f004 fe24 	bl	8006a98 <round>
 8001e50:	ec53 2b10 	vmov	r2, r3, d0
 8001e54:	4610      	mov	r0, r2
 8001e56:	4619      	mov	r1, r3
 8001e58:	f7fe fb72 	bl	8000540 <__aeabi_d2f>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	4a90      	ldr	r2, [pc, #576]	; (80020a0 <TIM1_UP_TIM10_IRQHandler+0x2d8>)
 8001e60:	6013      	str	r3, [r2, #0]
    	if (neww > 50.0f){
 8001e62:	4b8f      	ldr	r3, [pc, #572]	; (80020a0 <TIM1_UP_TIM10_IRQHandler+0x2d8>)
 8001e64:	edd3 7a00 	vldr	s15, [r3]
 8001e68:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 80020a8 <TIM1_UP_TIM10_IRQHandler+0x2e0>
 8001e6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e74:	dd02      	ble.n	8001e7c <TIM1_UP_TIM10_IRQHandler+0xb4>
    		neww = 50.0f;
 8001e76:	4b8a      	ldr	r3, [pc, #552]	; (80020a0 <TIM1_UP_TIM10_IRQHandler+0x2d8>)
 8001e78:	4a8c      	ldr	r2, [pc, #560]	; (80020ac <TIM1_UP_TIM10_IRQHandler+0x2e4>)
 8001e7a:	601a      	str	r2, [r3, #0]
    	}
    }

    if (flag_start){
 8001e7c:	4b87      	ldr	r3, [pc, #540]	; (800209c <TIM1_UP_TIM10_IRQHandler+0x2d4>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d05e      	beq.n	8001f42 <TIM1_UP_TIM10_IRQHandler+0x17a>
        if (speed.speed_el <= 10){
 8001e84:	4b80      	ldr	r3, [pc, #512]	; (8002088 <TIM1_UP_TIM10_IRQHandler+0x2c0>)
 8001e86:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e8a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e96:	d810      	bhi.n	8001eba <TIM1_UP_TIM10_IRQHandler+0xf2>
        	LED_1_GPIO_Port->BSRR = LED_1_Pin;
 8001e98:	4b85      	ldr	r3, [pc, #532]	; (80020b0 <TIM1_UP_TIM10_IRQHandler+0x2e8>)
 8001e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e9e:	619a      	str	r2, [r3, #24]
        	LED_4_GPIO_Port->BSRR = LED_4_Pin<<16;
 8001ea0:	4b83      	ldr	r3, [pc, #524]	; (80020b0 <TIM1_UP_TIM10_IRQHandler+0x2e8>)
 8001ea2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ea6:	619a      	str	r2, [r3, #24]
        	LED_3_GPIO_Port->BSRR = LED_3_Pin<<16;
 8001ea8:	4b81      	ldr	r3, [pc, #516]	; (80020b0 <TIM1_UP_TIM10_IRQHandler+0x2e8>)
 8001eaa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001eae:	619a      	str	r2, [r3, #24]
        	LED_2_GPIO_Port->BSRR = LED_2_Pin<<16;
 8001eb0:	4b80      	ldr	r3, [pc, #512]	; (80020b4 <TIM1_UP_TIM10_IRQHandler+0x2ec>)
 8001eb2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001eb6:	619a      	str	r2, [r3, #24]
 8001eb8:	e053      	b.n	8001f62 <TIM1_UP_TIM10_IRQHandler+0x19a>
        } else if (speed.speed_el <= 25){
 8001eba:	4b73      	ldr	r3, [pc, #460]	; (8002088 <TIM1_UP_TIM10_IRQHandler+0x2c0>)
 8001ebc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001ec0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001ec4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ecc:	d80f      	bhi.n	8001eee <TIM1_UP_TIM10_IRQHandler+0x126>
        	LED_1_GPIO_Port->BSRR = LED_1_Pin;
 8001ece:	4b78      	ldr	r3, [pc, #480]	; (80020b0 <TIM1_UP_TIM10_IRQHandler+0x2e8>)
 8001ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ed4:	619a      	str	r2, [r3, #24]
        	LED_4_GPIO_Port->BSRR = LED_4_Pin;
 8001ed6:	4b76      	ldr	r3, [pc, #472]	; (80020b0 <TIM1_UP_TIM10_IRQHandler+0x2e8>)
 8001ed8:	2240      	movs	r2, #64	; 0x40
 8001eda:	619a      	str	r2, [r3, #24]
        	LED_3_GPIO_Port->BSRR = LED_3_Pin<<16;
 8001edc:	4b74      	ldr	r3, [pc, #464]	; (80020b0 <TIM1_UP_TIM10_IRQHandler+0x2e8>)
 8001ede:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ee2:	619a      	str	r2, [r3, #24]
        	LED_2_GPIO_Port->BSRR = LED_2_Pin<<16;
 8001ee4:	4b73      	ldr	r3, [pc, #460]	; (80020b4 <TIM1_UP_TIM10_IRQHandler+0x2ec>)
 8001ee6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001eea:	619a      	str	r2, [r3, #24]
 8001eec:	e039      	b.n	8001f62 <TIM1_UP_TIM10_IRQHandler+0x19a>
        } else if (speed.speed_el <= 40){
 8001eee:	4b66      	ldr	r3, [pc, #408]	; (8002088 <TIM1_UP_TIM10_IRQHandler+0x2c0>)
 8001ef0:	edd3 7a06 	vldr	s15, [r3, #24]
 8001ef4:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80020b8 <TIM1_UP_TIM10_IRQHandler+0x2f0>
 8001ef8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f00:	d80f      	bhi.n	8001f22 <TIM1_UP_TIM10_IRQHandler+0x15a>
        	LED_1_GPIO_Port->BSRR = LED_1_Pin;
 8001f02:	4b6b      	ldr	r3, [pc, #428]	; (80020b0 <TIM1_UP_TIM10_IRQHandler+0x2e8>)
 8001f04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f08:	619a      	str	r2, [r3, #24]
        	LED_4_GPIO_Port->BSRR = LED_4_Pin;
 8001f0a:	4b69      	ldr	r3, [pc, #420]	; (80020b0 <TIM1_UP_TIM10_IRQHandler+0x2e8>)
 8001f0c:	2240      	movs	r2, #64	; 0x40
 8001f0e:	619a      	str	r2, [r3, #24]
        	LED_3_GPIO_Port->BSRR = LED_3_Pin;
 8001f10:	4b67      	ldr	r3, [pc, #412]	; (80020b0 <TIM1_UP_TIM10_IRQHandler+0x2e8>)
 8001f12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f16:	619a      	str	r2, [r3, #24]
        	LED_2_GPIO_Port->BSRR = LED_2_Pin<<16;
 8001f18:	4b66      	ldr	r3, [pc, #408]	; (80020b4 <TIM1_UP_TIM10_IRQHandler+0x2ec>)
 8001f1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f1e:	619a      	str	r2, [r3, #24]
 8001f20:	e01f      	b.n	8001f62 <TIM1_UP_TIM10_IRQHandler+0x19a>
        } else {
        	LED_1_GPIO_Port->BSRR = LED_1_Pin;
 8001f22:	4b63      	ldr	r3, [pc, #396]	; (80020b0 <TIM1_UP_TIM10_IRQHandler+0x2e8>)
 8001f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f28:	619a      	str	r2, [r3, #24]
        	LED_4_GPIO_Port->BSRR = LED_4_Pin;
 8001f2a:	4b61      	ldr	r3, [pc, #388]	; (80020b0 <TIM1_UP_TIM10_IRQHandler+0x2e8>)
 8001f2c:	2240      	movs	r2, #64	; 0x40
 8001f2e:	619a      	str	r2, [r3, #24]
        	LED_3_GPIO_Port->BSRR = LED_3_Pin;
 8001f30:	4b5f      	ldr	r3, [pc, #380]	; (80020b0 <TIM1_UP_TIM10_IRQHandler+0x2e8>)
 8001f32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f36:	619a      	str	r2, [r3, #24]
        	LED_2_GPIO_Port->BSRR = LED_2_Pin;
 8001f38:	4b5e      	ldr	r3, [pc, #376]	; (80020b4 <TIM1_UP_TIM10_IRQHandler+0x2ec>)
 8001f3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f3e:	619a      	str	r2, [r3, #24]
 8001f40:	e00f      	b.n	8001f62 <TIM1_UP_TIM10_IRQHandler+0x19a>
        }

    }  else {
    	LED_1_GPIO_Port->BSRR = LED_1_Pin<<16;
 8001f42:	4b5b      	ldr	r3, [pc, #364]	; (80020b0 <TIM1_UP_TIM10_IRQHandler+0x2e8>)
 8001f44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f48:	619a      	str	r2, [r3, #24]
    	LED_4_GPIO_Port->BSRR = LED_4_Pin<<16;
 8001f4a:	4b59      	ldr	r3, [pc, #356]	; (80020b0 <TIM1_UP_TIM10_IRQHandler+0x2e8>)
 8001f4c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001f50:	619a      	str	r2, [r3, #24]
    	LED_3_GPIO_Port->BSRR = LED_3_Pin<<16;
 8001f52:	4b57      	ldr	r3, [pc, #348]	; (80020b0 <TIM1_UP_TIM10_IRQHandler+0x2e8>)
 8001f54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f58:	619a      	str	r2, [r3, #24]
    	LED_2_GPIO_Port->BSRR = LED_2_Pin<<16;
 8001f5a:	4b56      	ldr	r3, [pc, #344]	; (80020b4 <TIM1_UP_TIM10_IRQHandler+0x2ec>)
 8001f5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f60:	619a      	str	r2, [r3, #24]




  
  if(cnt <= 98){
 8001f62:	4b56      	ldr	r3, [pc, #344]	; (80020bc <TIM1_UP_TIM10_IRQHandler+0x2f4>)
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	2b62      	cmp	r3, #98	; 0x62
 8001f68:	d806      	bhi.n	8001f78 <TIM1_UP_TIM10_IRQHandler+0x1b0>
    cnt++;
 8001f6a:	4b54      	ldr	r3, [pc, #336]	; (80020bc <TIM1_UP_TIM10_IRQHandler+0x2f4>)
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	4b52      	ldr	r3, [pc, #328]	; (80020bc <TIM1_UP_TIM10_IRQHandler+0x2f4>)
 8001f74:	801a      	strh	r2, [r3, #0]
 8001f76:	e057      	b.n	8002028 <TIM1_UP_TIM10_IRQHandler+0x260>
  }
  else {
    if ((flag != 0.1f)){
 8001f78:	4b51      	ldr	r3, [pc, #324]	; (80020c0 <TIM1_UP_TIM10_IRQHandler+0x2f8>)
 8001f7a:	edd3 7a00 	vldr	s15, [r3]
 8001f7e:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80020c4 <TIM1_UP_TIM10_IRQHandler+0x2fc>
 8001f82:	eef4 7a47 	vcmp.f32	s15, s14
 8001f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f8a:	d00d      	beq.n	8001fa8 <TIM1_UP_TIM10_IRQHandler+0x1e0>
      if ((flag != 0.5f)){
 8001f8c:	4b4c      	ldr	r3, [pc, #304]	; (80020c0 <TIM1_UP_TIM10_IRQHandler+0x2f8>)
 8001f8e:	edd3 7a00 	vldr	s15, [r3]
 8001f92:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001f96:	eef4 7a47 	vcmp.f32	s15, s14
 8001f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f9e:	d003      	beq.n	8001fa8 <TIM1_UP_TIM10_IRQHandler+0x1e0>
        
        flag = 0;
 8001fa0:	4b47      	ldr	r3, [pc, #284]	; (80020c0 <TIM1_UP_TIM10_IRQHandler+0x2f8>)
 8001fa2:	f04f 0200 	mov.w	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
        
      }
    }
   
    if((Freq < neww) && (Freq >= 0)){
 8001fa8:	4b47      	ldr	r3, [pc, #284]	; (80020c8 <TIM1_UP_TIM10_IRQHandler+0x300>)
 8001faa:	ed93 7a00 	vldr	s14, [r3]
 8001fae:	4b3c      	ldr	r3, [pc, #240]	; (80020a0 <TIM1_UP_TIM10_IRQHandler+0x2d8>)
 8001fb0:	edd3 7a00 	vldr	s15, [r3]
 8001fb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fbc:	d513      	bpl.n	8001fe6 <TIM1_UP_TIM10_IRQHandler+0x21e>
 8001fbe:	4b42      	ldr	r3, [pc, #264]	; (80020c8 <TIM1_UP_TIM10_IRQHandler+0x300>)
 8001fc0:	edd3 7a00 	vldr	s15, [r3]
 8001fc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fcc:	db0b      	blt.n	8001fe6 <TIM1_UP_TIM10_IRQHandler+0x21e>
      Freq = Freq + flag;
 8001fce:	4b3e      	ldr	r3, [pc, #248]	; (80020c8 <TIM1_UP_TIM10_IRQHandler+0x300>)
 8001fd0:	ed93 7a00 	vldr	s14, [r3]
 8001fd4:	4b3a      	ldr	r3, [pc, #232]	; (80020c0 <TIM1_UP_TIM10_IRQHandler+0x2f8>)
 8001fd6:	edd3 7a00 	vldr	s15, [r3]
 8001fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fde:	4b3a      	ldr	r3, [pc, #232]	; (80020c8 <TIM1_UP_TIM10_IRQHandler+0x300>)
 8001fe0:	edc3 7a00 	vstr	s15, [r3]
 8001fe4:	e01d      	b.n	8002022 <TIM1_UP_TIM10_IRQHandler+0x25a>
    }
    else if((Freq > neww) && (Freq > 0)){
 8001fe6:	4b38      	ldr	r3, [pc, #224]	; (80020c8 <TIM1_UP_TIM10_IRQHandler+0x300>)
 8001fe8:	ed93 7a00 	vldr	s14, [r3]
 8001fec:	4b2c      	ldr	r3, [pc, #176]	; (80020a0 <TIM1_UP_TIM10_IRQHandler+0x2d8>)
 8001fee:	edd3 7a00 	vldr	s15, [r3]
 8001ff2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ffa:	dd12      	ble.n	8002022 <TIM1_UP_TIM10_IRQHandler+0x25a>
 8001ffc:	4b32      	ldr	r3, [pc, #200]	; (80020c8 <TIM1_UP_TIM10_IRQHandler+0x300>)
 8001ffe:	edd3 7a00 	vldr	s15, [r3]
 8002002:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800200a:	dd0a      	ble.n	8002022 <TIM1_UP_TIM10_IRQHandler+0x25a>
        Freq = Freq - flag;
 800200c:	4b2e      	ldr	r3, [pc, #184]	; (80020c8 <TIM1_UP_TIM10_IRQHandler+0x300>)
 800200e:	ed93 7a00 	vldr	s14, [r3]
 8002012:	4b2b      	ldr	r3, [pc, #172]	; (80020c0 <TIM1_UP_TIM10_IRQHandler+0x2f8>)
 8002014:	edd3 7a00 	vldr	s15, [r3]
 8002018:	ee77 7a67 	vsub.f32	s15, s14, s15
 800201c:	4b2a      	ldr	r3, [pc, #168]	; (80020c8 <TIM1_UP_TIM10_IRQHandler+0x300>)
 800201e:	edc3 7a00 	vstr	s15, [r3]
    }
  cnt = 0;
 8002022:	4b26      	ldr	r3, [pc, #152]	; (80020bc <TIM1_UP_TIM10_IRQHandler+0x2f4>)
 8002024:	2200      	movs	r2, #0
 8002026:	801a      	strh	r2, [r3, #0]
  }
  
  if (Freq <= 0.0f){
 8002028:	4b27      	ldr	r3, [pc, #156]	; (80020c8 <TIM1_UP_TIM10_IRQHandler+0x300>)
 800202a:	edd3 7a00 	vldr	s15, [r3]
 800202e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002036:	d803      	bhi.n	8002040 <TIM1_UP_TIM10_IRQHandler+0x278>
      Freq = 0.0f;
 8002038:	4b23      	ldr	r3, [pc, #140]	; (80020c8 <TIM1_UP_TIM10_IRQHandler+0x300>)
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
    }
  
  if (Freq >= 250.0f){
 8002040:	4b21      	ldr	r3, [pc, #132]	; (80020c8 <TIM1_UP_TIM10_IRQHandler+0x300>)
 8002042:	edd3 7a00 	vldr	s15, [r3]
 8002046:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80020cc <TIM1_UP_TIM10_IRQHandler+0x304>
 800204a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800204e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002052:	db02      	blt.n	800205a <TIM1_UP_TIM10_IRQHandler+0x292>
      Freq = 250.0f;
 8002054:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <TIM1_UP_TIM10_IRQHandler+0x300>)
 8002056:	4a1e      	ldr	r2, [pc, #120]	; (80020d0 <TIM1_UP_TIM10_IRQHandler+0x308>)
 8002058:	601a      	str	r2, [r3, #0]
    }
  
  if(Freq <= 50.0f){
 800205a:	4b1b      	ldr	r3, [pc, #108]	; (80020c8 <TIM1_UP_TIM10_IRQHandler+0x300>)
 800205c:	edd3 7a00 	vldr	s15, [r3]
 8002060:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80020a8 <TIM1_UP_TIM10_IRQHandler+0x2e0>
 8002064:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206c:	d834      	bhi.n	80020d8 <TIM1_UP_TIM10_IRQHandler+0x310>
    Amp = Freq/50.0f;
 800206e:	4b16      	ldr	r3, [pc, #88]	; (80020c8 <TIM1_UP_TIM10_IRQHandler+0x300>)
 8002070:	ed93 7a00 	vldr	s14, [r3]
 8002074:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80020a8 <TIM1_UP_TIM10_IRQHandler+0x2e0>
 8002078:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800207c:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <TIM1_UP_TIM10_IRQHandler+0x30c>)
 800207e:	edc3 7a00 	vstr	s15, [r3]
 8002082:	e02d      	b.n	80020e0 <TIM1_UP_TIM10_IRQHandler+0x318>
 8002084:	20000308 	.word	0x20000308
 8002088:	200003e0 	.word	0x200003e0
 800208c:	20000188 	.word	0x20000188
 8002090:	200003c8 	.word	0x200003c8
 8002094:	200003b8 	.word	0x200003b8
 8002098:	40020c00 	.word	0x40020c00
 800209c:	20000098 	.word	0x20000098
 80020a0:	200003fc 	.word	0x200003fc
 80020a4:	42a40000 	.word	0x42a40000
 80020a8:	42480000 	.word	0x42480000
 80020ac:	42480000 	.word	0x42480000
 80020b0:	40020800 	.word	0x40020800
 80020b4:	40020000 	.word	0x40020000
 80020b8:	42200000 	.word	0x42200000
 80020bc:	200003c0 	.word	0x200003c0
 80020c0:	20000004 	.word	0x20000004
 80020c4:	3dcccccd 	.word	0x3dcccccd
 80020c8:	200003d4 	.word	0x200003d4
 80020cc:	437a0000 	.word	0x437a0000
 80020d0:	437a0000 	.word	0x437a0000
 80020d4:	200003c4 	.word	0x200003c4
  }
  else{
    Amp = 50.0f/50.0f;
 80020d8:	4b30      	ldr	r3, [pc, #192]	; (800219c <TIM1_UP_TIM10_IRQHandler+0x3d4>)
 80020da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80020de:	601a      	str	r2, [r3, #0]
  }
  
  /*########################################################################*/
  AngleSpeedMax = 2.0f*PI*50;
 80020e0:	4b2f      	ldr	r3, [pc, #188]	; (80021a0 <TIM1_UP_TIM10_IRQHandler+0x3d8>)
 80020e2:	4a30      	ldr	r2, [pc, #192]	; (80021a4 <TIM1_UP_TIM10_IRQHandler+0x3dc>)
 80020e4:	601a      	str	r2, [r3, #0]
  AngleSpeed = 2.0f*PI*Freq;
 80020e6:	4b30      	ldr	r3, [pc, #192]	; (80021a8 <TIM1_UP_TIM10_IRQHandler+0x3e0>)
 80020e8:	edd3 7a00 	vldr	s15, [r3]
 80020ec:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80021ac <TIM1_UP_TIM10_IRQHandler+0x3e4>
 80020f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020f4:	4b2e      	ldr	r3, [pc, #184]	; (80021b0 <TIM1_UP_TIM10_IRQHandler+0x3e8>)
 80020f6:	edc3 7a00 	vstr	s15, [r3]
  Delta_Angle = AngleSpeed*0.0001f;
 80020fa:	4b2d      	ldr	r3, [pc, #180]	; (80021b0 <TIM1_UP_TIM10_IRQHandler+0x3e8>)
 80020fc:	edd3 7a00 	vldr	s15, [r3]
 8002100:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80021b4 <TIM1_UP_TIM10_IRQHandler+0x3ec>
 8002104:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002108:	4b2b      	ldr	r3, [pc, #172]	; (80021b8 <TIM1_UP_TIM10_IRQHandler+0x3f0>)
 800210a:	edc3 7a00 	vstr	s15, [r3]

  DSP_K_Polar_to_AB(Amp, El_Angle, Bufer_A_B);
 800210e:	4b23      	ldr	r3, [pc, #140]	; (800219c <TIM1_UP_TIM10_IRQHandler+0x3d4>)
 8002110:	edd3 7a00 	vldr	s15, [r3]
 8002114:	4b29      	ldr	r3, [pc, #164]	; (80021bc <TIM1_UP_TIM10_IRQHandler+0x3f4>)
 8002116:	ed93 7a00 	vldr	s14, [r3]
 800211a:	4829      	ldr	r0, [pc, #164]	; (80021c0 <TIM1_UP_TIM10_IRQHandler+0x3f8>)
 800211c:	eef0 0a47 	vmov.f32	s1, s14
 8002120:	eeb0 0a67 	vmov.f32	s0, s15
 8002124:	f000 f8b7 	bl	8002296 <DSP_K_Polar_to_AB>
  El_Angle+=Delta_Angle*Delta_Angle_Gain;
 8002128:	4b23      	ldr	r3, [pc, #140]	; (80021b8 <TIM1_UP_TIM10_IRQHandler+0x3f0>)
 800212a:	ed93 7a00 	vldr	s14, [r3]
 800212e:	4b25      	ldr	r3, [pc, #148]	; (80021c4 <TIM1_UP_TIM10_IRQHandler+0x3fc>)
 8002130:	edd3 7a00 	vldr	s15, [r3]
 8002134:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002138:	4b20      	ldr	r3, [pc, #128]	; (80021bc <TIM1_UP_TIM10_IRQHandler+0x3f4>)
 800213a:	edd3 7a00 	vldr	s15, [r3]
 800213e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002142:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <TIM1_UP_TIM10_IRQHandler+0x3f4>)
 8002144:	edc3 7a00 	vstr	s15, [r3]

  DSP_K_SVPWM(TIM1, Bufer_A_B[0], Bufer_A_B[1]);
 8002148:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <TIM1_UP_TIM10_IRQHandler+0x3f8>)
 800214a:	edd3 7a00 	vldr	s15, [r3]
 800214e:	4b1c      	ldr	r3, [pc, #112]	; (80021c0 <TIM1_UP_TIM10_IRQHandler+0x3f8>)
 8002150:	ed93 7a01 	vldr	s14, [r3, #4]
 8002154:	eef0 0a47 	vmov.f32	s1, s14
 8002158:	eeb0 0a67 	vmov.f32	s0, s15
 800215c:	481a      	ldr	r0, [pc, #104]	; (80021c8 <TIM1_UP_TIM10_IRQHandler+0x400>)
 800215e:	f000 f9cf 	bl	8002500 <DSP_K_SVPWM>
  // Вывод значения угловой скорости




  Device_DAC_Out_PA4_CH1((speed.speed) / (55.0f));
 8002162:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <TIM1_UP_TIM10_IRQHandler+0x404>)
 8002164:	edd3 7a05 	vldr	s15, [r3, #20]
 8002168:	eddf 6a19 	vldr	s13, [pc, #100]	; 80021d0 <TIM1_UP_TIM10_IRQHandler+0x408>
 800216c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002170:	eeb0 0a47 	vmov.f32	s0, s14
 8002174:	f7ff fb46 	bl	8001804 <Device_DAC_Out_PA4_CH1>
   //Device_DAC_Out_PA5_CH2(Delta_Angle);

  // Вывод значения задания скорости
     //Device_DAC_Out_PA5_CH2(neww);

 if(El_Angle>=8*PI) El_Angle = 0.0f;
 8002178:	4b10      	ldr	r3, [pc, #64]	; (80021bc <TIM1_UP_TIM10_IRQHandler+0x3f4>)
 800217a:	edd3 7a00 	vldr	s15, [r3]
 800217e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80021d4 <TIM1_UP_TIM10_IRQHandler+0x40c>
 8002182:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800218a:	da00      	bge.n	800218e <TIM1_UP_TIM10_IRQHandler+0x3c6>
  
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800218c:	e003      	b.n	8002196 <TIM1_UP_TIM10_IRQHandler+0x3ce>
 if(El_Angle>=8*PI) El_Angle = 0.0f;
 800218e:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <TIM1_UP_TIM10_IRQHandler+0x3f4>)
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	200003c4 	.word	0x200003c4
 80021a0:	200003b4 	.word	0x200003b4
 80021a4:	439d1463 	.word	0x439d1463
 80021a8:	200003d4 	.word	0x200003d4
 80021ac:	40c90fdb 	.word	0x40c90fdb
 80021b0:	200003b0 	.word	0x200003b0
 80021b4:	38d1b717 	.word	0x38d1b717
 80021b8:	200003d8 	.word	0x200003d8
 80021bc:	200003dc 	.word	0x200003dc
 80021c0:	2000009c 	.word	0x2000009c
 80021c4:	20000000 	.word	0x20000000
 80021c8:	40010000 	.word	0x40010000
 80021cc:	200003e0 	.word	0x200003e0
 80021d0:	425c0000 	.word	0x425c0000
 80021d4:	41c90fdb 	.word	0x41c90fdb

080021d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021dc:	4b16      	ldr	r3, [pc, #88]	; (8002238 <SystemInit+0x60>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e2:	4a15      	ldr	r2, [pc, #84]	; (8002238 <SystemInit+0x60>)
 80021e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80021ec:	4b13      	ldr	r3, [pc, #76]	; (800223c <SystemInit+0x64>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a12      	ldr	r2, [pc, #72]	; (800223c <SystemInit+0x64>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80021f8:	4b10      	ldr	r3, [pc, #64]	; (800223c <SystemInit+0x64>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80021fe:	4b0f      	ldr	r3, [pc, #60]	; (800223c <SystemInit+0x64>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a0e      	ldr	r2, [pc, #56]	; (800223c <SystemInit+0x64>)
 8002204:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800220e:	4b0b      	ldr	r3, [pc, #44]	; (800223c <SystemInit+0x64>)
 8002210:	4a0b      	ldr	r2, [pc, #44]	; (8002240 <SystemInit+0x68>)
 8002212:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002214:	4b09      	ldr	r3, [pc, #36]	; (800223c <SystemInit+0x64>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a08      	ldr	r2, [pc, #32]	; (800223c <SystemInit+0x64>)
 800221a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800221e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <SystemInit+0x64>)
 8002222:	2200      	movs	r2, #0
 8002224:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002226:	4b04      	ldr	r3, [pc, #16]	; (8002238 <SystemInit+0x60>)
 8002228:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800222c:	609a      	str	r2, [r3, #8]
#endif
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	e000ed00 	.word	0xe000ed00
 800223c:	40023800 	.word	0x40023800
 8002240:	24003010 	.word	0x24003010

08002244 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002244:	f8df d034 	ldr.w	sp, [pc, #52]	; 800227c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002248:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800224a:	e003      	b.n	8002254 <LoopCopyDataInit>

0800224c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800224e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002250:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002252:	3104      	adds	r1, #4

08002254 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002254:	480b      	ldr	r0, [pc, #44]	; (8002284 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002256:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002258:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800225a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800225c:	d3f6      	bcc.n	800224c <CopyDataInit>
  ldr  r2, =_sbss
 800225e:	4a0b      	ldr	r2, [pc, #44]	; (800228c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002260:	e002      	b.n	8002268 <LoopFillZerobss>

08002262 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002262:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002264:	f842 3b04 	str.w	r3, [r2], #4

08002268 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002268:	4b09      	ldr	r3, [pc, #36]	; (8002290 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800226a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800226c:	d3f9      	bcc.n	8002262 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800226e:	f7ff ffb3 	bl	80021d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002272:	f004 fbe5 	bl	8006a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002276:	f7fe fd49 	bl	8000d0c <main>
  bx  lr    
 800227a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800227c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002280:	080073bc 	.word	0x080073bc
  ldr  r0, =_sdata
 8002284:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002288:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 800228c:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8002290:	20000404 	.word	0x20000404

08002294 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002294:	e7fe      	b.n	8002294 <ADC_IRQHandler>

08002296 <DSP_K_Polar_to_AB>:
}
/*
DSP_K_Polar_to_AB
*/
void DSP_K_Polar_to_AB(float Amp, float Rad, float *Bufer_A_B)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b084      	sub	sp, #16
 800229a:	af00      	add	r7, sp, #0
 800229c:	ed87 0a03 	vstr	s0, [r7, #12]
 80022a0:	edc7 0a02 	vstr	s1, [r7, #8]
 80022a4:	6078      	str	r0, [r7, #4]
*Bufer_A_B     = Amp * arm_cos_f32(Rad);
 80022a6:	ed97 0a02 	vldr	s0, [r7, #8]
 80022aa:	f7fe fc27 	bl	8000afc <arm_cos_f32>
 80022ae:	eeb0 7a40 	vmov.f32	s14, s0
 80022b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80022b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	edc3 7a00 	vstr	s15, [r3]
*(Bufer_A_B+1) = Amp * arm_sin_f32(Rad);
 80022c0:	ed97 0a02 	vldr	s0, [r7, #8]
 80022c4:	f7fe fc96 	bl	8000bf4 <arm_sin_f32>
 80022c8:	eeb0 7a40 	vmov.f32	s14, s0
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3304      	adds	r3, #4
 80022d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80022d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022d8:	edc3 7a00 	vstr	s15, [r3]
}
 80022dc:	bf00      	nop
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <DSP_K_Conv_ABC_to_ab>:
/*
DSP_K_Conv_ABC_to_ab

*/
void DSP_K_Conv_ABC_to_ab(float *A_B_C, float *a_b)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]

a_b[0] = A_B_C[0]*1.0f;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	601a      	str	r2, [r3, #0]
a_b[1] = 1.0f/SQRT3*(A_B_C[1]-A_B_C[2])*1.0f;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3304      	adds	r3, #4
 80022fa:	ed93 7a00 	vldr	s14, [r3]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3308      	adds	r3, #8
 8002302:	edd3 7a00 	vldr	s15, [r3]
 8002306:	ee77 7a67 	vsub.f32	s15, s14, s15
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	3304      	adds	r3, #4
 800230e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002328 <DSP_K_Conv_ABC_to_ab+0x44>
 8002312:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002316:	edc3 7a00 	vstr	s15, [r3]

}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	3f13cd3a 	.word	0x3f13cd3a

0800232c <Speed_measure>:

/*
Encoder KUBLER speed measure
*/

void Speed_measure(Speed_structure *Spd){
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
    
  
 if(Spd->cnt_s < 19){
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	2b12      	cmp	r3, #18
 800233a:	d806      	bhi.n	800234a <Speed_measure+0x1e>
    Spd->cnt_s++;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	3301      	adds	r3, #1
 8002342:	b29a      	uxth	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	801a      	strh	r2, [r3, #0]
    Spd->speed_el = 0;
  }
  Spd->cnt_s = 0;
  }

}
 8002348:	e08b      	b.n	8002462 <Speed_measure+0x136>
  Spd->angle_f[4] = Spd->angle_f[3];
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	891a      	ldrh	r2, [r3, #8]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	815a      	strh	r2, [r3, #10]
  Spd->angle_f[3] = Spd->angle_f[2];
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	88da      	ldrh	r2, [r3, #6]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	811a      	strh	r2, [r3, #8]
  Spd->angle_f[2] = Spd->angle_f[1];
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	889a      	ldrh	r2, [r3, #4]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	80da      	strh	r2, [r3, #6]
  Spd->angle_f[1] = Spd->angle_f[0];
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	885a      	ldrh	r2, [r3, #2]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	809a      	strh	r2, [r3, #4]
  if(Spd->angle_f[0] != Spd->angle_f[1]){
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	885a      	ldrh	r2, [r3, #2]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	889b      	ldrh	r3, [r3, #4]
 8002372:	429a      	cmp	r2, r3
 8002374:	d007      	beq.n	8002386 <Speed_measure+0x5a>
    Spd->angle_d[0] = Spd->angle_f[0] - Spd->angle_f[1];
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	885a      	ldrh	r2, [r3, #2]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	889b      	ldrh	r3, [r3, #4]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	b29a      	uxth	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	819a      	strh	r2, [r3, #12]
  if(Spd->angle_f[1] != Spd->angle_f[2]){
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	889a      	ldrh	r2, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	88db      	ldrh	r3, [r3, #6]
 800238e:	429a      	cmp	r2, r3
 8002390:	d007      	beq.n	80023a2 <Speed_measure+0x76>
    Spd->angle_d[1] = Spd->angle_f[1] - Spd->angle_f[2];
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	889a      	ldrh	r2, [r3, #4]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	88db      	ldrh	r3, [r3, #6]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	b29a      	uxth	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	81da      	strh	r2, [r3, #14]
  if(Spd->angle_f[2] != Spd->angle_f[3]){
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	88da      	ldrh	r2, [r3, #6]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	891b      	ldrh	r3, [r3, #8]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d007      	beq.n	80023be <Speed_measure+0x92>
    Spd->angle_d[2] = Spd->angle_f[2] - Spd->angle_f[3];
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	88da      	ldrh	r2, [r3, #6]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	891b      	ldrh	r3, [r3, #8]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	821a      	strh	r2, [r3, #16]
  if(Spd->angle_f[3] != Spd->angle_f[4]){
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	891a      	ldrh	r2, [r3, #8]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	895b      	ldrh	r3, [r3, #10]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d007      	beq.n	80023da <Speed_measure+0xae>
    Spd->angle_d[3] = Spd->angle_f[3] - Spd->angle_f[4];
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	891a      	ldrh	r2, [r3, #8]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	895b      	ldrh	r3, [r3, #10]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	825a      	strh	r2, [r3, #18]
  if((Spd->angle_d[0] - Spd->angle_d[1]) < 2){
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	899b      	ldrh	r3, [r3, #12]
 80023de:	461a      	mov	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	89db      	ldrh	r3, [r3, #14]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	dc1c      	bgt.n	8002424 <Speed_measure+0xf8>
    if((Spd->angle_d[1] - Spd->angle_d[2]) < 2){
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	89db      	ldrh	r3, [r3, #14]
 80023ee:	461a      	mov	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	8a1b      	ldrh	r3, [r3, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	dc14      	bgt.n	8002424 <Speed_measure+0xf8>
      if((Spd->angle_d[2] - Spd->angle_d[3]) < 2){
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	8a1b      	ldrh	r3, [r3, #16]
 80023fe:	461a      	mov	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	8a5b      	ldrh	r3, [r3, #18]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b01      	cmp	r3, #1
 8002408:	dc0c      	bgt.n	8002424 <Speed_measure+0xf8>
        Spd->speed = Spd->angle_d[2]*0.061f;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	8a1b      	ldrh	r3, [r3, #16]
 800240e:	ee07 3a90 	vmov	s15, r3
 8002412:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002416:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002470 <Speed_measure+0x144>
 800241a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	edc3 7a05 	vstr	s15, [r3, #20]
  Spd->speed_el = Spd->speed*3.0f;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	edd3 7a05 	vldr	s15, [r3, #20]
 800242a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800242e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	edc3 7a06 	vstr	s15, [r3, #24]
  if(Spd->speed_el > 200){
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	edd3 7a06 	vldr	s15, [r3, #24]
 800243e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002474 <Speed_measure+0x148>
 8002442:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244a:	dd07      	ble.n	800245c <Speed_measure+0x130>
    Spd->speed = 0;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	615a      	str	r2, [r3, #20]
    Spd->speed_el = 0;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	619a      	str	r2, [r3, #24]
  Spd->cnt_s = 0;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	801a      	strh	r2, [r3, #0]
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	3d79db23 	.word	0x3d79db23
 8002474:	43480000 	.word	0x43480000

08002478 <Current_measure>:

void Current_measure(float *iABC, unsigned short *ADC_Buf){
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
    
  iABC[0] = (float)((ADC_Buf[0]>>2) - 589) / 512;            //i_U
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	089b      	lsrs	r3, r3, #2
 8002488:	b29b      	uxth	r3, r3
 800248a:	f2a3 234d 	subw	r3, r3, #589	; 0x24d
 800248e:	ee07 3a90 	vmov	s15, r3
 8002492:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002496:	eddf 6a19 	vldr	s13, [pc, #100]	; 80024fc <Current_measure+0x84>
 800249a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	edc3 7a00 	vstr	s15, [r3]
  iABC[1] = (float)((ADC_Buf[1]>>2) - 587) / 512;            //i_V
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	3302      	adds	r3, #2
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	089b      	lsrs	r3, r3, #2
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	f2a3 234b 	subw	r3, r3, #587	; 0x24b
 80024b2:	ee07 3a90 	vmov	s15, r3
 80024b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3304      	adds	r3, #4
 80024be:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80024fc <Current_measure+0x84>
 80024c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024c6:	edc3 7a00 	vstr	s15, [r3]
  iABC[2] = (float)((ADC_Buf[2]>>2) - 585) / 512;            //i_W
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	3304      	adds	r3, #4
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	089b      	lsrs	r3, r3, #2
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80024d8:	ee07 3a90 	vmov	s15, r3
 80024dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3308      	adds	r3, #8
 80024e4:	eddf 6a05 	vldr	s13, [pc, #20]	; 80024fc <Current_measure+0x84>
 80024e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024ec:	edc3 7a00 	vstr	s15, [r3]
  
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	44000000 	.word	0x44000000

08002500 <DSP_K_SVPWM>:

/*
DSP_K_PWM_TIM1_Blocked_4VT
*/
void DSP_K_SVPWM(TIM_TypeDef *Tim, float A, float B)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08e      	sub	sp, #56	; 0x38
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	ed87 0a02 	vstr	s0, [r7, #8]
 800250c:	edc7 0a01 	vstr	s1, [r7, #4]
 
static float bufer[2];

float f_sin      = 0.0f;
 8002510:	f04f 0300 	mov.w	r3, #0
 8002514:	637b      	str	r3, [r7, #52]	; 0x34
float f_sin_0_60 = 0.0f;
 8002516:	f04f 0300 	mov.w	r3, #0
 800251a:	633b      	str	r3, [r7, #48]	; 0x30

float f_cos      = 0.0f;
 800251c:	f04f 0300 	mov.w	r3, #0
 8002520:	62fb      	str	r3, [r7, #44]	; 0x2c
float f_cos_0_60 = 0.0f;
 8002522:	f04f 0300 	mov.w	r3, #0
 8002526:	62bb      	str	r3, [r7, #40]	; 0x28
 
static float module     = 0.0f;

float Tb1 = 0.0f;
 8002528:	f04f 0300 	mov.w	r3, #0
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
float Tb2 = 0.0f;
 800252e:	f04f 0300 	mov.w	r3, #0
 8002532:	623b      	str	r3, [r7, #32]
float T0  = 0.0f;
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]

float t1 = 0.0f;
 800253a:	f04f 0300 	mov.w	r3, #0
 800253e:	61bb      	str	r3, [r7, #24]
float t2 = 0.0f;
 8002540:	f04f 0300 	mov.w	r3, #0
 8002544:	617b      	str	r3, [r7, #20]
float t3  = 0.0f;
 8002546:	f04f 0300 	mov.w	r3, #0
 800254a:	613b      	str	r3, [r7, #16]


bufer[0]=A;
 800254c:	4adb      	ldr	r2, [pc, #876]	; (80028bc <DSP_K_SVPWM+0x3bc>)
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	6013      	str	r3, [r2, #0]
bufer[1]=B;
 8002552:	4ada      	ldr	r2, [pc, #872]	; (80028bc <DSP_K_SVPWM+0x3bc>)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6053      	str	r3, [r2, #4]
arm_cmplx_mag_f32(bufer,&module,2);
 8002558:	2202      	movs	r2, #2
 800255a:	49d9      	ldr	r1, [pc, #868]	; (80028c0 <DSP_K_SVPWM+0x3c0>)
 800255c:	48d7      	ldr	r0, [pc, #860]	; (80028bc <DSP_K_SVPWM+0x3bc>)
 800255e:	f7fe f9bb 	bl	80008d8 <arm_cmplx_mag_f32>

f_sin = bufer[1] / module;
 8002562:	4bd6      	ldr	r3, [pc, #856]	; (80028bc <DSP_K_SVPWM+0x3bc>)
 8002564:	edd3 6a01 	vldr	s13, [r3, #4]
 8002568:	4bd5      	ldr	r3, [pc, #852]	; (80028c0 <DSP_K_SVPWM+0x3c0>)
 800256a:	ed93 7a00 	vldr	s14, [r3]
 800256e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002572:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
f_cos = bufer[0] / module;
 8002576:	4bd1      	ldr	r3, [pc, #836]	; (80028bc <DSP_K_SVPWM+0x3bc>)
 8002578:	edd3 6a00 	vldr	s13, [r3]
 800257c:	4bd0      	ldr	r3, [pc, #832]	; (80028c0 <DSP_K_SVPWM+0x3c0>)
 800257e:	ed93 7a00 	vldr	s14, [r3]
 8002582:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002586:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

if(module==0)
 800258a:	4bcd      	ldr	r3, [pc, #820]	; (80028c0 <DSP_K_SVPWM+0x3c0>)
 800258c:	edd3 7a00 	vldr	s15, [r3]
 8002590:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002598:	d119      	bne.n	80025ce <DSP_K_SVPWM+0xce>
{
Tim->CCR1 = (int)Tim->ARR/2;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259e:	0fda      	lsrs	r2, r3, #31
 80025a0:	4413      	add	r3, r2
 80025a2:	105b      	asrs	r3, r3, #1
 80025a4:	461a      	mov	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	635a      	str	r2, [r3, #52]	; 0x34
Tim->CCR2 = (int)Tim->ARR/2;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ae:	0fda      	lsrs	r2, r3, #31
 80025b0:	4413      	add	r3, r2
 80025b2:	105b      	asrs	r3, r3, #1
 80025b4:	461a      	mov	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	639a      	str	r2, [r3, #56]	; 0x38
Tim->CCR3 = (int)Tim->ARR/2;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025be:	0fda      	lsrs	r2, r3, #31
 80025c0:	4413      	add	r3, r2
 80025c2:	105b      	asrs	r3, r3, #1
 80025c4:	461a      	mov	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	63da      	str	r2, [r3, #60]	; 0x3c
//sin_data = arm_sin_f32(0.01f);
//Tick=DWT_CYCCNT;



}
 80025ca:	f000 bcad 	b.w	8002f28 <DSP_K_SVPWM+0xa28>
 else if((f_sin >= sin_0) && (f_sin < sin_60)  &&\
 80025ce:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80025d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025da:	f2c0 80a9 	blt.w	8002730 <DSP_K_SVPWM+0x230>
 80025de:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80025e2:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 80028c8 <DSP_K_SVPWM+0x3c8>
 80025e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ee:	f140 809f 	bpl.w	8002730 <DSP_K_SVPWM+0x230>
 80025f2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80025f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80025fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002602:	f340 8095 	ble.w	8002730 <DSP_K_SVPWM+0x230>
    (f_cos > cos_60) && (f_cos <= cos_0) )
 8002606:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800260a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800260e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002616:	f200 808b 	bhi.w	8002730 <DSP_K_SVPWM+0x230>
 f_sin_0_60 = f_sin;
 800261a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800261c:	633b      	str	r3, [r7, #48]	; 0x30
 f_cos_0_60 = f_cos;
 800261e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002620:	62bb      	str	r3, [r7, #40]	; 0x28
 Tb1 = module * (sin_60 * f_cos_0_60 - cos_60 * f_sin_0_60);
 8002622:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002626:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 80028c8 <DSP_K_SVPWM+0x3c8>
 800262a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800262e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002632:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002636:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800263a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800263e:	4ba0      	ldr	r3, [pc, #640]	; (80028c0 <DSP_K_SVPWM+0x3c0>)
 8002640:	edd3 7a00 	vldr	s15, [r3]
 8002644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002648:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 Tb2 = module * f_sin_0_60;
 800264c:	4b9c      	ldr	r3, [pc, #624]	; (80028c0 <DSP_K_SVPWM+0x3c0>)
 800264e:	edd3 7a00 	vldr	s15, [r3]
 8002652:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800265a:	edc7 7a08 	vstr	s15, [r7, #32]
 T0  = 0.5f*(1.0f-Tb1-Tb2);
 800265e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002662:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002666:	ee37 7a67 	vsub.f32	s14, s14, s15
 800266a:	edd7 7a08 	vldr	s15, [r7, #32]
 800266e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002672:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002676:	ee67 7a87 	vmul.f32	s15, s15, s14
 800267a:	edc7 7a07 	vstr	s15, [r7, #28]
 t1 = Tb1+Tb2+T0;
 800267e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002682:	edd7 7a08 	vldr	s15, [r7, #32]
 8002686:	ee77 7a27 	vadd.f32	s15, s14, s15
 800268a:	ed97 7a07 	vldr	s14, [r7, #28]
 800268e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002692:	edc7 7a06 	vstr	s15, [r7, #24]
 t2 = Tb2+T0;
 8002696:	ed97 7a08 	vldr	s14, [r7, #32]
 800269a:	edd7 7a07 	vldr	s15, [r7, #28]
 800269e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026a2:	edc7 7a05 	vstr	s15, [r7, #20]
 t3 = Tb1+T0;
 80026a6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80026aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80026ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026b2:	edc7 7a04 	vstr	s15, [r7, #16]
Tim->CCR1 = (int)(Tim->ARR*t1+0);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ba:	ee07 3a90 	vmov	s15, r3
 80026be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80026c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ca:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80028c4 <DSP_K_SVPWM+0x3c4>
 80026ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026d6:	ee17 2a90 	vmov	r2, s15
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	635a      	str	r2, [r3, #52]	; 0x34
Tim->CCR2 = (int)(Tim->ARR*t2+0);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e2:	ee07 3a90 	vmov	s15, r3
 80026e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80026ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f2:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80028c4 <DSP_K_SVPWM+0x3c4>
 80026f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026fe:	ee17 2a90 	vmov	r2, s15
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	639a      	str	r2, [r3, #56]	; 0x38
Tim->CCR3 = (int)(Tim->ARR*T0+0);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270a:	ee07 3a90 	vmov	s15, r3
 800270e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002712:	edd7 7a07 	vldr	s15, [r7, #28]
 8002716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800271a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80028c4 <DSP_K_SVPWM+0x3c4>
 800271e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002722:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002726:	ee17 2a90 	vmov	r2, s15
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	63da      	str	r2, [r3, #60]	; 0x3c
 800272e:	e3fb      	b.n	8002f28 <DSP_K_SVPWM+0xa28>
  else if((f_sin >= sin_60)   &&\
 8002730:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002734:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80028c8 <DSP_K_SVPWM+0x3c8>
 8002738:	eef4 7ac7 	vcmpe.f32	s15, s14
 800273c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002740:	f2c0 80c4 	blt.w	80028cc <DSP_K_SVPWM+0x3cc>
 8002744:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002748:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800274c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002754:	f340 80ba 	ble.w	80028cc <DSP_K_SVPWM+0x3cc>
    (f_cos > cos_120) && (f_cos <= cos_60) )
 8002758:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800275c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002760:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002768:	f200 80b0 	bhi.w	80028cc <DSP_K_SVPWM+0x3cc>
 f_sin_0_60 = f_sin * cos_60 - sin_60 * f_cos;
 800276c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002770:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002774:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002778:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800277c:	eddf 6a52 	vldr	s13, [pc, #328]	; 80028c8 <DSP_K_SVPWM+0x3c8>
 8002780:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002784:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002788:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 f_cos_0_60 = f_cos * cos_60 + f_sin * sin_60;
 800278c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002790:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002794:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002798:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800279c:	eddf 6a4a 	vldr	s13, [pc, #296]	; 80028c8 <DSP_K_SVPWM+0x3c8>
 80027a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80027a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027a8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 Tb1 = module * (sin_60 * f_cos_0_60 - cos_60 * f_sin_0_60);
 80027ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80027b0:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80028c8 <DSP_K_SVPWM+0x3c8>
 80027b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027b8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80027bc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80027c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80027c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027c8:	4b3d      	ldr	r3, [pc, #244]	; (80028c0 <DSP_K_SVPWM+0x3c0>)
 80027ca:	edd3 7a00 	vldr	s15, [r3]
 80027ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 Tb2 = module * f_sin_0_60;
 80027d6:	4b3a      	ldr	r3, [pc, #232]	; (80028c0 <DSP_K_SVPWM+0x3c0>)
 80027d8:	edd3 7a00 	vldr	s15, [r3]
 80027dc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80027e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027e4:	edc7 7a08 	vstr	s15, [r7, #32]
 T0  = 0.5f*(1.0f-Tb1-Tb2);
 80027e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027ec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80027f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027f4:	edd7 7a08 	vldr	s15, [r7, #32]
 80027f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027fc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002800:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002804:	edc7 7a07 	vstr	s15, [r7, #28]
 t1 = Tb1+Tb2+T0;
 8002808:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800280c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002810:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002814:	ed97 7a07 	vldr	s14, [r7, #28]
 8002818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281c:	edc7 7a06 	vstr	s15, [r7, #24]
 t2 = Tb2+T0;
 8002820:	ed97 7a08 	vldr	s14, [r7, #32]
 8002824:	edd7 7a07 	vldr	s15, [r7, #28]
 8002828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800282c:	edc7 7a05 	vstr	s15, [r7, #20]
 t3 = Tb1+T0;
 8002830:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002834:	edd7 7a07 	vldr	s15, [r7, #28]
 8002838:	ee77 7a27 	vadd.f32	s15, s14, s15
 800283c:	edc7 7a04 	vstr	s15, [r7, #16]
Tim->CCR1 = (int)(Tim->ARR*t3+0);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	ee07 3a90 	vmov	s15, r3
 8002848:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800284c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002850:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002854:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80028c4 <DSP_K_SVPWM+0x3c4>
 8002858:	ee77 7a87 	vadd.f32	s15, s15, s14
 800285c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002860:	ee17 2a90 	vmov	r2, s15
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	635a      	str	r2, [r3, #52]	; 0x34
Tim->CCR2 = (int)(Tim->ARR*t1+0);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286c:	ee07 3a90 	vmov	s15, r3
 8002870:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002874:	edd7 7a06 	vldr	s15, [r7, #24]
 8002878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800287c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80028c4 <DSP_K_SVPWM+0x3c4>
 8002880:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002884:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002888:	ee17 2a90 	vmov	r2, s15
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	639a      	str	r2, [r3, #56]	; 0x38
Tim->CCR3 = (int)(Tim->ARR*T0+0);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002894:	ee07 3a90 	vmov	s15, r3
 8002898:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800289c:	edd7 7a07 	vldr	s15, [r7, #28]
 80028a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028a4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80028c4 <DSP_K_SVPWM+0x3c4>
 80028a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028b0:	ee17 2a90 	vmov	r2, s15
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80028b8:	e336      	b.n	8002f28 <DSP_K_SVPWM+0xa28>
 80028ba:	bf00      	nop
 80028bc:	200000a4 	.word	0x200000a4
 80028c0:	200000ac 	.word	0x200000ac
 80028c4:	00000000 	.word	0x00000000
 80028c8:	3f5db3d7 	.word	0x3f5db3d7
 else if((f_sin > sin_180) && (f_sin <= sin_120)  &&\
 80028cc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80028d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d8:	f340 80c5 	ble.w	8002a66 <DSP_K_SVPWM+0x566>
 80028dc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80028e0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80028c8 <DSP_K_SVPWM+0x3c8>
 80028e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ec:	f200 80bb 	bhi.w	8002a66 <DSP_K_SVPWM+0x566>
 80028f0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80028f4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80028f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002900:	f340 80b1 	ble.w	8002a66 <DSP_K_SVPWM+0x566>
    (f_cos > cos_180) && (f_cos <= cos_120) )
 8002904:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002908:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800290c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002914:	f200 80a7 	bhi.w	8002a66 <DSP_K_SVPWM+0x566>
 f_sin_0_60 = f_sin * cos_120 - sin_120 * f_cos;
 8002918:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800291c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002920:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002924:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002928:	ed5f 6a19 	vldr	s13, [pc, #-100]	; 80028c8 <DSP_K_SVPWM+0x3c8>
 800292c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002930:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002934:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 f_cos_0_60 = f_cos * cos_120 + f_sin * sin_120;
 8002938:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800293c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002940:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002944:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002948:	ed5f 6a21 	vldr	s13, [pc, #-132]	; 80028c8 <DSP_K_SVPWM+0x3c8>
 800294c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002950:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002954:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 Tb1 = module * (sin_60 * f_cos_0_60 - cos_60 * f_sin_0_60);
 8002958:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800295c:	ed1f 7a26 	vldr	s14, [pc, #-152]	; 80028c8 <DSP_K_SVPWM+0x3c8>
 8002960:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002964:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002968:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800296c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002970:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002974:	4b9f      	ldr	r3, [pc, #636]	; (8002bf4 <DSP_K_SVPWM+0x6f4>)
 8002976:	edd3 7a00 	vldr	s15, [r3]
 800297a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800297e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 Tb2 = module * f_sin_0_60;
 8002982:	4b9c      	ldr	r3, [pc, #624]	; (8002bf4 <DSP_K_SVPWM+0x6f4>)
 8002984:	edd3 7a00 	vldr	s15, [r3]
 8002988:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800298c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002990:	edc7 7a08 	vstr	s15, [r7, #32]
 T0  = 0.5f*(1.0f-Tb1-Tb2);
 8002994:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002998:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800299c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029a0:	edd7 7a08 	vldr	s15, [r7, #32]
 80029a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80029ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029b0:	edc7 7a07 	vstr	s15, [r7, #28]
 t1 = Tb1+Tb2+T0;
 80029b4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80029b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80029bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029c0:	ed97 7a07 	vldr	s14, [r7, #28]
 80029c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029c8:	edc7 7a06 	vstr	s15, [r7, #24]
 t2 = Tb2+T0;
 80029cc:	ed97 7a08 	vldr	s14, [r7, #32]
 80029d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80029d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029d8:	edc7 7a05 	vstr	s15, [r7, #20]
 t3 = Tb1+T0;
 80029dc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80029e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80029e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029e8:	edc7 7a04 	vstr	s15, [r7, #16]
Tim->CCR1 = (int)(Tim->ARR*T0+0);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f0:	ee07 3a90 	vmov	s15, r3
 80029f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80029fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a00:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8002bf8 <DSP_K_SVPWM+0x6f8>
 8002a04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a0c:	ee17 2a90 	vmov	r2, s15
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	635a      	str	r2, [r3, #52]	; 0x34
Tim->CCR2 = (int)(Tim->ARR*t1+0);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a18:	ee07 3a90 	vmov	s15, r3
 8002a1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a20:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a28:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002bf8 <DSP_K_SVPWM+0x6f8>
 8002a2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a34:	ee17 2a90 	vmov	r2, s15
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	639a      	str	r2, [r3, #56]	; 0x38
Tim->CCR3 = (int)(Tim->ARR*t2+0);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a40:	ee07 3a90 	vmov	s15, r3
 8002a44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a48:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a50:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002bf8 <DSP_K_SVPWM+0x6f8>
 8002a54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a5c:	ee17 2a90 	vmov	r2, s15
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a64:	e260      	b.n	8002f28 <DSP_K_SVPWM+0xa28>
  else if((f_sin > sin_240) && (f_sin <= sin_180)  &&\
 8002a66:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002a6a:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8002bfc <DSP_K_SVPWM+0x6fc>
 8002a6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a76:	f340 80c5 	ble.w	8002c04 <DSP_K_SVPWM+0x704>
 8002a7a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002a7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a86:	f200 80bd 	bhi.w	8002c04 <DSP_K_SVPWM+0x704>
 8002a8a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002a8e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002a92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a9a:	f2c0 80b3 	blt.w	8002c04 <DSP_K_SVPWM+0x704>
    (f_cos >= cos_180) && (f_cos < cos_240) )
 8002a9e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002aa2:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002aa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aae:	f140 80a9 	bpl.w	8002c04 <DSP_K_SVPWM+0x704>
 f_sin_0_60 = f_sin * cos_180 - sin_180 * f_cos;
 8002ab2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002ab6:	eeb1 7a67 	vneg.f32	s14, s15
 8002aba:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002abe:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8002bf8 <DSP_K_SVPWM+0x6f8>
 8002ac2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aca:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 f_cos_0_60 = f_cos * cos_180 + f_sin * sin_180;
 8002ace:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002ad2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8002bf8 <DSP_K_SVPWM+0x6f8>
 8002ad6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ada:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002ade:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ae2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 Tb1 = module * (sin_60 * f_cos_0_60 - cos_60 * f_sin_0_60);
 8002ae6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002aea:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8002c00 <DSP_K_SVPWM+0x700>
 8002aee:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002af2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002af6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002afa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002afe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b02:	4b3c      	ldr	r3, [pc, #240]	; (8002bf4 <DSP_K_SVPWM+0x6f4>)
 8002b04:	edd3 7a00 	vldr	s15, [r3]
 8002b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b0c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 Tb2 = module * f_sin_0_60;
 8002b10:	4b38      	ldr	r3, [pc, #224]	; (8002bf4 <DSP_K_SVPWM+0x6f4>)
 8002b12:	edd3 7a00 	vldr	s15, [r3]
 8002b16:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b1e:	edc7 7a08 	vstr	s15, [r7, #32]
 T0  = 0.5f*(1.0f-Tb1-Tb2);
 8002b22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b26:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b2e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b36:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b3e:	edc7 7a07 	vstr	s15, [r7, #28]
 t1 = Tb1+Tb2+T0;
 8002b42:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002b46:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b4e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b56:	edc7 7a06 	vstr	s15, [r7, #24]
 t2 = Tb2+T0;
 8002b5a:	ed97 7a08 	vldr	s14, [r7, #32]
 8002b5e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b66:	edc7 7a05 	vstr	s15, [r7, #20]
 t3 = Tb1+T0;
 8002b6a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002b6e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b76:	edc7 7a04 	vstr	s15, [r7, #16]
Tim->CCR1 = (int)(Tim->ARR*T0+0);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7e:	ee07 3a90 	vmov	s15, r3
 8002b82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b86:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b8e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002bf8 <DSP_K_SVPWM+0x6f8>
 8002b92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b9a:	ee17 2a90 	vmov	r2, s15
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	635a      	str	r2, [r3, #52]	; 0x34
Tim->CCR2 = (int)(Tim->ARR*t3+0);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba6:	ee07 3a90 	vmov	s15, r3
 8002baa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bae:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bb6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002bf8 <DSP_K_SVPWM+0x6f8>
 8002bba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bc2:	ee17 2a90 	vmov	r2, s15
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	639a      	str	r2, [r3, #56]	; 0x38
Tim->CCR3 = (int)(Tim->ARR*t1+0);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bce:	ee07 3a90 	vmov	s15, r3
 8002bd2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bd6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bde:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002bf8 <DSP_K_SVPWM+0x6f8>
 8002be2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002be6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bea:	ee17 2a90 	vmov	r2, s15
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	63da      	str	r2, [r3, #60]	; 0x3c
 8002bf2:	e199      	b.n	8002f28 <DSP_K_SVPWM+0xa28>
 8002bf4:	200000ac 	.word	0x200000ac
 8002bf8:	00000000 	.word	0x00000000
 8002bfc:	bf5db3d7 	.word	0xbf5db3d7
 8002c00:	3f5db3d7 	.word	0x3f5db3d7
  else if( (f_sin <=sin_240)  &&\
 8002c04:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002c08:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8002bfc <DSP_K_SVPWM+0x6fc>
 8002c0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c14:	f200 80bb 	bhi.w	8002d8e <DSP_K_SVPWM+0x88e>
 8002c18:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002c1c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002c20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c28:	f2c0 80b1 	blt.w	8002d8e <DSP_K_SVPWM+0x88e>
    (f_cos >= cos_240) && (f_cos < cos_300) )
 8002c2c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002c30:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3c:	f140 80a7 	bpl.w	8002d8e <DSP_K_SVPWM+0x88e>
 f_sin_0_60 = f_sin * cos_240 - sin_240 * f_cos;
 8002c40:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002c44:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002c48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c4c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002c50:	ed5f 6a15 	vldr	s13, [pc, #-84]	; 8002c00 <DSP_K_SVPWM+0x700>
 8002c54:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c5c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 f_cos_0_60 = f_cos * cos_240 + f_sin * sin_240;
 8002c60:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002c64:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002c68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c6c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002c70:	ed5f 6a1e 	vldr	s13, [pc, #-120]	; 8002bfc <DSP_K_SVPWM+0x6fc>
 8002c74:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c7c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 Tb1 = module * (sin_60 * f_cos_0_60 - cos_60 * f_sin_0_60);
 8002c80:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002c84:	ed1f 7a22 	vldr	s14, [pc, #-136]	; 8002c00 <DSP_K_SVPWM+0x700>
 8002c88:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c8c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002c90:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002c94:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c9c:	4ba4      	ldr	r3, [pc, #656]	; (8002f30 <DSP_K_SVPWM+0xa30>)
 8002c9e:	edd3 7a00 	vldr	s15, [r3]
 8002ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ca6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 Tb2 = module * f_sin_0_60;
 8002caa:	4ba1      	ldr	r3, [pc, #644]	; (8002f30 <DSP_K_SVPWM+0xa30>)
 8002cac:	edd3 7a00 	vldr	s15, [r3]
 8002cb0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cb8:	edc7 7a08 	vstr	s15, [r7, #32]
 T0  = 0.5f*(1.0f-Tb1-Tb2);
 8002cbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002cc0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002cc4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cc8:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cd0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002cd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cd8:	edc7 7a07 	vstr	s15, [r7, #28]
 t1 = Tb1+Tb2+T0;
 8002cdc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002ce0:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ce8:	ed97 7a07 	vldr	s14, [r7, #28]
 8002cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf0:	edc7 7a06 	vstr	s15, [r7, #24]
 t2 = Tb2+T0;
 8002cf4:	ed97 7a08 	vldr	s14, [r7, #32]
 8002cf8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002cfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d00:	edc7 7a05 	vstr	s15, [r7, #20]
 t3 = Tb1+T0;
 8002d04:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002d08:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d10:	edc7 7a04 	vstr	s15, [r7, #16]
Tim->CCR1 = (int)(Tim->ARR*t2+0);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d18:	ee07 3a90 	vmov	s15, r3
 8002d1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d20:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d28:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8002f34 <DSP_K_SVPWM+0xa34>
 8002d2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d34:	ee17 2a90 	vmov	r2, s15
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	635a      	str	r2, [r3, #52]	; 0x34
Tim->CCR2 = (int)(Tim->ARR*T0+0);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d40:	ee07 3a90 	vmov	s15, r3
 8002d44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d48:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d50:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8002f34 <DSP_K_SVPWM+0xa34>
 8002d54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d5c:	ee17 2a90 	vmov	r2, s15
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	639a      	str	r2, [r3, #56]	; 0x38
Tim->CCR3 = (int)(Tim->ARR*t1+0);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	ee07 3a90 	vmov	s15, r3
 8002d6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d70:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d78:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8002f34 <DSP_K_SVPWM+0xa34>
 8002d7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d84:	ee17 2a90 	vmov	r2, s15
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d8c:	e0cc      	b.n	8002f28 <DSP_K_SVPWM+0xa28>
 else if((f_sin >= sin_300) && (f_sin < sin_0)  &&\
 8002d8e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002d92:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002f38 <DSP_K_SVPWM+0xa38>
 8002d96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9e:	da00      	bge.n	8002da2 <DSP_K_SVPWM+0x8a2>
}
 8002da0:	e0c2      	b.n	8002f28 <DSP_K_SVPWM+0xa28>
 else if((f_sin >= sin_300) && (f_sin < sin_0)  &&\
 8002da2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002da6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dae:	d400      	bmi.n	8002db2 <DSP_K_SVPWM+0x8b2>
}
 8002db0:	e0ba      	b.n	8002f28 <DSP_K_SVPWM+0xa28>
 else if((f_sin >= sin_300) && (f_sin < sin_0)  &&\
 8002db2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002db6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002dba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc2:	da00      	bge.n	8002dc6 <DSP_K_SVPWM+0x8c6>
}
 8002dc4:	e0b0      	b.n	8002f28 <DSP_K_SVPWM+0xa28>
    (f_cos >= cos_300) && (f_cos < cos_0) )
 8002dc6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002dca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002dce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd6:	d400      	bmi.n	8002dda <DSP_K_SVPWM+0x8da>
}
 8002dd8:	e0a6      	b.n	8002f28 <DSP_K_SVPWM+0xa28>
 f_sin_0_60 = f_sin * cos_300 - sin_300 * f_cos;
 8002dda:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002dde:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002de2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002de6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002dea:	eddf 6a54 	vldr	s13, [pc, #336]	; 8002f3c <DSP_K_SVPWM+0xa3c>
 8002dee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002df2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 f_cos_0_60 = f_cos * cos_300 + f_sin * sin_300;
 8002dfa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002dfe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002e02:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e06:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002e0a:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8002f38 <DSP_K_SVPWM+0xa38>
 8002e0e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e16:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 Tb1 = module * (sin_60 * f_cos_0_60 - cos_60 * f_sin_0_60);
 8002e1a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002e1e:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002f3c <DSP_K_SVPWM+0xa3c>
 8002e22:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e26:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002e2a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002e2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e32:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e36:	4b3e      	ldr	r3, [pc, #248]	; (8002f30 <DSP_K_SVPWM+0xa30>)
 8002e38:	edd3 7a00 	vldr	s15, [r3]
 8002e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e40:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 Tb2 = module * f_sin_0_60;
 8002e44:	4b3a      	ldr	r3, [pc, #232]	; (8002f30 <DSP_K_SVPWM+0xa30>)
 8002e46:	edd3 7a00 	vldr	s15, [r3]
 8002e4a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e52:	edc7 7a08 	vstr	s15, [r7, #32]
 T0  = 0.5f*(1.0f-Tb1-Tb2);
 8002e56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e5a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002e5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e62:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e6a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002e6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e72:	edc7 7a07 	vstr	s15, [r7, #28]
 t1 = Tb1+Tb2+T0;
 8002e76:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002e7a:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e82:	ed97 7a07 	vldr	s14, [r7, #28]
 8002e86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e8a:	edc7 7a06 	vstr	s15, [r7, #24]
 t2 = Tb2+T0;
 8002e8e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002e92:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e9a:	edc7 7a05 	vstr	s15, [r7, #20]
 t3 = Tb1+T0;
 8002e9e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002ea2:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ea6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eaa:	edc7 7a04 	vstr	s15, [r7, #16]
Tim->CCR1 = (int)(Tim->ARR*t1+0);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb2:	ee07 3a90 	vmov	s15, r3
 8002eb6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002eba:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002f34 <DSP_K_SVPWM+0xa34>
 8002ec6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002eca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ece:	ee17 2a90 	vmov	r2, s15
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	635a      	str	r2, [r3, #52]	; 0x34
Tim->CCR2 = (int)(Tim->ARR*T0+0);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eda:	ee07 3a90 	vmov	s15, r3
 8002ede:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ee2:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eea:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002f34 <DSP_K_SVPWM+0xa34>
 8002eee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ef2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ef6:	ee17 2a90 	vmov	r2, s15
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	639a      	str	r2, [r3, #56]	; 0x38
Tim->CCR3 = (int)(Tim->ARR*t3+0);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f02:	ee07 3a90 	vmov	s15, r3
 8002f06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f12:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002f34 <DSP_K_SVPWM+0xa34>
 8002f16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f1e:	ee17 2a90 	vmov	r2, s15
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002f26:	e7ff      	b.n	8002f28 <DSP_K_SVPWM+0xa28>
 8002f28:	bf00      	nop
 8002f2a:	3738      	adds	r7, #56	; 0x38
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	200000ac 	.word	0x200000ac
 8002f34:	00000000 	.word	0x00000000
 8002f38:	bf5db3d7 	.word	0xbf5db3d7
 8002f3c:	3f5db3d7 	.word	0x3f5db3d7

08002f40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f44:	4b0e      	ldr	r3, [pc, #56]	; (8002f80 <HAL_Init+0x40>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a0d      	ldr	r2, [pc, #52]	; (8002f80 <HAL_Init+0x40>)
 8002f4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f50:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <HAL_Init+0x40>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a0a      	ldr	r2, [pc, #40]	; (8002f80 <HAL_Init+0x40>)
 8002f56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f5c:	4b08      	ldr	r3, [pc, #32]	; (8002f80 <HAL_Init+0x40>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a07      	ldr	r2, [pc, #28]	; (8002f80 <HAL_Init+0x40>)
 8002f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f68:	2003      	movs	r0, #3
 8002f6a:	f000 fd7d 	bl	8003a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f6e:	2000      	movs	r0, #0
 8002f70:	f000 f808 	bl	8002f84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f74:	f7fe fc6a 	bl	800184c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40023c00 	.word	0x40023c00

08002f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f8c:	4b12      	ldr	r3, [pc, #72]	; (8002fd8 <HAL_InitTick+0x54>)
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	4b12      	ldr	r3, [pc, #72]	; (8002fdc <HAL_InitTick+0x58>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	4619      	mov	r1, r3
 8002f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 fda3 	bl	8003aee <HAL_SYSTICK_Config>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e00e      	b.n	8002fd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b0f      	cmp	r3, #15
 8002fb6:	d80a      	bhi.n	8002fce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fb8:	2200      	movs	r2, #0
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc0:	f000 fd5d 	bl	8003a7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fc4:	4a06      	ldr	r2, [pc, #24]	; (8002fe0 <HAL_InitTick+0x5c>)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	e000      	b.n	8002fd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	20000008 	.word	0x20000008
 8002fdc:	20000010 	.word	0x20000010
 8002fe0:	2000000c 	.word	0x2000000c

08002fe4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fe8:	4b06      	ldr	r3, [pc, #24]	; (8003004 <HAL_IncTick+0x20>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	461a      	mov	r2, r3
 8002fee:	4b06      	ldr	r3, [pc, #24]	; (8003008 <HAL_IncTick+0x24>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	4a04      	ldr	r2, [pc, #16]	; (8003008 <HAL_IncTick+0x24>)
 8002ff6:	6013      	str	r3, [r2, #0]
}
 8002ff8:	bf00      	nop
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	20000010 	.word	0x20000010
 8003008:	20000400 	.word	0x20000400

0800300c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  return uwTick;
 8003010:	4b03      	ldr	r3, [pc, #12]	; (8003020 <HAL_GetTick+0x14>)
 8003012:	681b      	ldr	r3, [r3, #0]
}
 8003014:	4618      	mov	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	20000400 	.word	0x20000400

08003024 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800302c:	f7ff ffee 	bl	800300c <HAL_GetTick>
 8003030:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303c:	d005      	beq.n	800304a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800303e:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <HAL_Delay+0x44>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4413      	add	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800304a:	bf00      	nop
 800304c:	f7ff ffde 	bl	800300c <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	429a      	cmp	r2, r3
 800305a:	d8f7      	bhi.n	800304c <HAL_Delay+0x28>
  {
  }
}
 800305c:	bf00      	nop
 800305e:	bf00      	nop
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20000010 	.word	0x20000010

0800306c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003074:	2300      	movs	r3, #0
 8003076:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e033      	b.n	80030ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	2b00      	cmp	r3, #0
 8003088:	d109      	bne.n	800309e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7fe fc06 	bl	800189c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f003 0310 	and.w	r3, r3, #16
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d118      	bne.n	80030dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030b2:	f023 0302 	bic.w	r3, r3, #2
 80030b6:	f043 0202 	orr.w	r2, r3, #2
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f958 	bl	8003374 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f023 0303 	bic.w	r3, r3, #3
 80030d2:	f043 0201 	orr.w	r2, r3, #1
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	641a      	str	r2, [r3, #64]	; 0x40
 80030da:	e001      	b.n	80030e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
	...

08003130 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800313a:	2300      	movs	r3, #0
 800313c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_ADC_ConfigChannel+0x1c>
 8003148:	2302      	movs	r3, #2
 800314a:	e105      	b.n	8003358 <HAL_ADC_ConfigChannel+0x228>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b09      	cmp	r3, #9
 800315a:	d925      	bls.n	80031a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68d9      	ldr	r1, [r3, #12]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	b29b      	uxth	r3, r3
 8003168:	461a      	mov	r2, r3
 800316a:	4613      	mov	r3, r2
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	4413      	add	r3, r2
 8003170:	3b1e      	subs	r3, #30
 8003172:	2207      	movs	r2, #7
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	43da      	mvns	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	400a      	ands	r2, r1
 8003180:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68d9      	ldr	r1, [r3, #12]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	b29b      	uxth	r3, r3
 8003192:	4618      	mov	r0, r3
 8003194:	4603      	mov	r3, r0
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	4403      	add	r3, r0
 800319a:	3b1e      	subs	r3, #30
 800319c:	409a      	lsls	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	60da      	str	r2, [r3, #12]
 80031a6:	e022      	b.n	80031ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6919      	ldr	r1, [r3, #16]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	461a      	mov	r2, r3
 80031b6:	4613      	mov	r3, r2
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	4413      	add	r3, r2
 80031bc:	2207      	movs	r2, #7
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43da      	mvns	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	400a      	ands	r2, r1
 80031ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6919      	ldr	r1, [r3, #16]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	b29b      	uxth	r3, r3
 80031dc:	4618      	mov	r0, r3
 80031de:	4603      	mov	r3, r0
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	4403      	add	r3, r0
 80031e4:	409a      	lsls	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b06      	cmp	r3, #6
 80031f4:	d824      	bhi.n	8003240 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	3b05      	subs	r3, #5
 8003208:	221f      	movs	r2, #31
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	43da      	mvns	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	400a      	ands	r2, r1
 8003216:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	b29b      	uxth	r3, r3
 8003224:	4618      	mov	r0, r3
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	3b05      	subs	r3, #5
 8003232:	fa00 f203 	lsl.w	r2, r0, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	635a      	str	r2, [r3, #52]	; 0x34
 800323e:	e04c      	b.n	80032da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b0c      	cmp	r3, #12
 8003246:	d824      	bhi.n	8003292 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	4613      	mov	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	3b23      	subs	r3, #35	; 0x23
 800325a:	221f      	movs	r2, #31
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	43da      	mvns	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	400a      	ands	r2, r1
 8003268:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	b29b      	uxth	r3, r3
 8003276:	4618      	mov	r0, r3
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	3b23      	subs	r3, #35	; 0x23
 8003284:	fa00 f203 	lsl.w	r2, r0, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	631a      	str	r2, [r3, #48]	; 0x30
 8003290:	e023      	b.n	80032da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	3b41      	subs	r3, #65	; 0x41
 80032a4:	221f      	movs	r2, #31
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	43da      	mvns	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	400a      	ands	r2, r1
 80032b2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	b29b      	uxth	r3, r3
 80032c0:	4618      	mov	r0, r3
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	3b41      	subs	r3, #65	; 0x41
 80032ce:	fa00 f203 	lsl.w	r2, r0, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032da:	4b22      	ldr	r3, [pc, #136]	; (8003364 <HAL_ADC_ConfigChannel+0x234>)
 80032dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a21      	ldr	r2, [pc, #132]	; (8003368 <HAL_ADC_ConfigChannel+0x238>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d109      	bne.n	80032fc <HAL_ADC_ConfigChannel+0x1cc>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b12      	cmp	r3, #18
 80032ee:	d105      	bne.n	80032fc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a19      	ldr	r2, [pc, #100]	; (8003368 <HAL_ADC_ConfigChannel+0x238>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d123      	bne.n	800334e <HAL_ADC_ConfigChannel+0x21e>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2b10      	cmp	r3, #16
 800330c:	d003      	beq.n	8003316 <HAL_ADC_ConfigChannel+0x1e6>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b11      	cmp	r3, #17
 8003314:	d11b      	bne.n	800334e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b10      	cmp	r3, #16
 8003328:	d111      	bne.n	800334e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800332a:	4b10      	ldr	r3, [pc, #64]	; (800336c <HAL_ADC_ConfigChannel+0x23c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a10      	ldr	r2, [pc, #64]	; (8003370 <HAL_ADC_ConfigChannel+0x240>)
 8003330:	fba2 2303 	umull	r2, r3, r2, r3
 8003334:	0c9a      	lsrs	r2, r3, #18
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003340:	e002      	b.n	8003348 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	3b01      	subs	r3, #1
 8003346:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f9      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	40012300 	.word	0x40012300
 8003368:	40012000 	.word	0x40012000
 800336c:	20000008 	.word	0x20000008
 8003370:	431bde83 	.word	0x431bde83

08003374 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800337c:	4b79      	ldr	r3, [pc, #484]	; (8003564 <ADC_Init+0x1f0>)
 800337e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	431a      	orrs	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6859      	ldr	r1, [r3, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	021a      	lsls	r2, r3, #8
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80033cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6859      	ldr	r1, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6899      	ldr	r1, [r3, #8]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003406:	4a58      	ldr	r2, [pc, #352]	; (8003568 <ADC_Init+0x1f4>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d022      	beq.n	8003452 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800341a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6899      	ldr	r1, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800343c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6899      	ldr	r1, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	609a      	str	r2, [r3, #8]
 8003450:	e00f      	b.n	8003472 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003460:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003470:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0202 	bic.w	r2, r2, #2
 8003480:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6899      	ldr	r1, [r3, #8]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	7e1b      	ldrb	r3, [r3, #24]
 800348c:	005a      	lsls	r2, r3, #1
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3020 	ldrb.w	r3, [r3, #32]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d01b      	beq.n	80034d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80034be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6859      	ldr	r1, [r3, #4]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	3b01      	subs	r3, #1
 80034cc:	035a      	lsls	r2, r3, #13
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	605a      	str	r2, [r3, #4]
 80034d6:	e007      	b.n	80034e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80034f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	3b01      	subs	r3, #1
 8003504:	051a      	lsls	r2, r3, #20
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800351c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6899      	ldr	r1, [r3, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800352a:	025a      	lsls	r2, r3, #9
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003542:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6899      	ldr	r1, [r3, #8]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	029a      	lsls	r2, r3, #10
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	609a      	str	r2, [r3, #8]
}
 8003558:	bf00      	nop
 800355a:	3714      	adds	r7, #20
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	40012300 	.word	0x40012300
 8003568:	0f000001 	.word	0x0f000001

0800356c <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData   Pointer to buffer in which transferred from ADC peripheral to memory will be stored. 
  * @param  Length  The length of data to be transferred from ADC peripheral to memory.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_ADCEx_MultiModeStart_DMA+0x1e>
 8003586:	2302      	movs	r3, #2
 8003588:	e0ab      	b.n	80036e2 <HAL_ADCEx_MultiModeStart_DMA+0x176>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b01      	cmp	r3, #1
 800359e:	d018      	beq.n	80035d2 <HAL_ADCEx_MultiModeStart_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689a      	ldr	r2, [r3, #8]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0201 	orr.w	r2, r2, #1
 80035ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for temperature sensor stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80035b0:	4b4e      	ldr	r3, [pc, #312]	; (80036ec <HAL_ADCEx_MultiModeStart_DMA+0x180>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a4e      	ldr	r2, [pc, #312]	; (80036f0 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 80035b6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ba:	0c9a      	lsrs	r2, r3, #18
 80035bc:	4613      	mov	r3, r2
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	4413      	add	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80035c4:	e002      	b.n	80035cc <HAL_ADCEx_MultiModeStart_DMA+0x60>
    {
      counter--;
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	3b01      	subs	r3, #1
 80035ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f9      	bne.n	80035c6 <HAL_ADCEx_MultiModeStart_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d173      	bne.n	80036c8 <HAL_ADCEx_MultiModeStart_DMA+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80035e8:	f023 0301 	bic.w	r3, r3, #1
 80035ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d007      	beq.n	8003612 <HAL_ADCEx_MultiModeStart_DMA+0xa6>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800360a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800361a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800361e:	d106      	bne.n	800362e <HAL_ADCEx_MultiModeStart_DMA+0xc2>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003624:	f023 0206 	bic.w	r2, r3, #6
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	645a      	str	r2, [r3, #68]	; 0x44
 800362c:	e002      	b.n	8003634 <HAL_ADCEx_MultiModeStart_DMA+0xc8>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvCplt;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	4a2c      	ldr	r2, [pc, #176]	; (80036f4 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 8003642:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_MultiModeDMAHalfConvCplt;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003648:	4a2b      	ldr	r2, [pc, #172]	; (80036f8 <HAL_ADCEx_MultiModeStart_DMA+0x18c>)
 800364a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError ;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003650:	4a2a      	ldr	r2, [pc, #168]	; (80036fc <HAL_ADCEx_MultiModeStart_DMA+0x190>)
 8003652:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f06f 0202 	mvn.w	r2, #2
 800365c:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800366c:	605a      	str	r2, [r3, #4]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800366e:	4b24      	ldr	r3, [pc, #144]	; (8003700 <HAL_ADCEx_MultiModeStart_DMA+0x194>)
 8003670:	617b      	str	r3, [r7, #20]

    if (hadc->Init.DMAContinuousRequests != DISABLE)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003678:	2b00      	cmp	r3, #0
 800367a:	d006      	beq.n	800368a <HAL_ADCEx_MultiModeStart_DMA+0x11e>
    {
      /* Enable the selected ADC DMA request after last transfer */
      tmpADC_Common->CCR |= ADC_CCR_DDS;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	605a      	str	r2, [r3, #4]
 8003688:	e005      	b.n	8003696 <HAL_ADCEx_MultiModeStart_DMA+0x12a>
    }
    else
    {
      /* Disable the selected ADC EOC rising on each regular channel conversion */
      tmpADC_Common->CCR &= ~ADC_CCR_DDS;
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	605a      	str	r2, [r3, #4]
    }
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	3308      	adds	r3, #8
 800369e:	4619      	mov	r1, r3
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f000 fbc6 	bl	8003e34 <HAL_DMA_Start_IT>
    
    /* if no external trigger present enable software conversion of regular channels */
    if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d114      	bne.n	80036e0 <HAL_ADCEx_MultiModeStart_DMA+0x174>
    {
      /* Enable the selected ADC software conversion for regular group */
      hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036c4:	609a      	str	r2, [r3, #8]
 80036c6:	e00b      	b.n	80036e0 <HAL_ADCEx_MultiModeStart_DMA+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	f043 0210 	orr.w	r2, r3, #16
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d8:	f043 0201 	orr.w	r2, r3, #1
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3718      	adds	r7, #24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20000008 	.word	0x20000008
 80036f0:	431bde83 	.word	0x431bde83
 80036f4:	08003791 	.word	0x08003791
 80036f8:	08003837 	.word	0x08003837
 80036fc:	08003853 	.word	0x08003853
 8003700:	40012300 	.word	0x40012300

08003704 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8003718:	2302      	movs	r3, #2
 800371a:	e031      	b.n	8003780 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003724:	4b19      	ldr	r3, [pc, #100]	; (800378c <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8003726:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f023 021f 	bic.w	r2, r3, #31
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	431a      	orrs	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	431a      	orrs	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	431a      	orrs	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	40012300 	.word	0x40012300

08003790 <ADC_MultiModeDMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d13c      	bne.n	8003824 <ADC_MultiModeDMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d12b      	bne.n	800381c <ADC_MultiModeDMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d127      	bne.n	800381c <ADC_MultiModeDMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d006      	beq.n	80037e8 <ADC_MultiModeDMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d119      	bne.n	800381c <ADC_MultiModeDMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0220 	bic.w	r2, r2, #32
 80037f6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d105      	bne.n	800381c <ADC_MultiModeDMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	f043 0201 	orr.w	r2, r3, #1
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f7ff fc68 	bl	80030f2 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003822:	e004      	b.n	800382e <ADC_MultiModeDMAConvCplt+0x9e>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	4798      	blx	r3
}
 800382e:	bf00      	nop
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <ADC_MultiModeDMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b084      	sub	sp, #16
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
    ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003842:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
    HAL_ADC_ConvHalfCpltCallback(hadc); 
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f7ff fc5e 	bl	8003106 <HAL_ADC_ConvHalfCpltCallback>
}
 800384a:	bf00      	nop
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <ADC_MultiModeDMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma)   
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b084      	sub	sp, #16
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
    ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385e:	60fb      	str	r3, [r7, #12]
    hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2240      	movs	r2, #64	; 0x40
 8003864:	641a      	str	r2, [r3, #64]	; 0x40
    /* Set ADC error code to DMA error */
    hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386a:	f043 0204 	orr.w	r2, r3, #4
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_ADC_ErrorCallback(hadc); 
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f7ff fc51 	bl	800311a <HAL_ADC_ErrorCallback>
}
 8003878:	bf00      	nop
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003890:	4b0c      	ldr	r3, [pc, #48]	; (80038c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800389c:	4013      	ands	r3, r2
 800389e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038b2:	4a04      	ldr	r2, [pc, #16]	; (80038c4 <__NVIC_SetPriorityGrouping+0x44>)
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	60d3      	str	r3, [r2, #12]
}
 80038b8:	bf00      	nop
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	e000ed00 	.word	0xe000ed00

080038c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038cc:	4b04      	ldr	r3, [pc, #16]	; (80038e0 <__NVIC_GetPriorityGrouping+0x18>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	0a1b      	lsrs	r3, r3, #8
 80038d2:	f003 0307 	and.w	r3, r3, #7
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	e000ed00 	.word	0xe000ed00

080038e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	4603      	mov	r3, r0
 80038ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	db0b      	blt.n	800390e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038f6:	79fb      	ldrb	r3, [r7, #7]
 80038f8:	f003 021f 	and.w	r2, r3, #31
 80038fc:	4907      	ldr	r1, [pc, #28]	; (800391c <__NVIC_EnableIRQ+0x38>)
 80038fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003902:	095b      	lsrs	r3, r3, #5
 8003904:	2001      	movs	r0, #1
 8003906:	fa00 f202 	lsl.w	r2, r0, r2
 800390a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800390e:	bf00      	nop
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	e000e100 	.word	0xe000e100

08003920 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800392a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392e:	2b00      	cmp	r3, #0
 8003930:	db12      	blt.n	8003958 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003932:	79fb      	ldrb	r3, [r7, #7]
 8003934:	f003 021f 	and.w	r2, r3, #31
 8003938:	490a      	ldr	r1, [pc, #40]	; (8003964 <__NVIC_DisableIRQ+0x44>)
 800393a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393e:	095b      	lsrs	r3, r3, #5
 8003940:	2001      	movs	r0, #1
 8003942:	fa00 f202 	lsl.w	r2, r0, r2
 8003946:	3320      	adds	r3, #32
 8003948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800394c:	f3bf 8f4f 	dsb	sy
}
 8003950:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003952:	f3bf 8f6f 	isb	sy
}
 8003956:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	e000e100 	.word	0xe000e100

08003968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	6039      	str	r1, [r7, #0]
 8003972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003978:	2b00      	cmp	r3, #0
 800397a:	db0a      	blt.n	8003992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	b2da      	uxtb	r2, r3
 8003980:	490c      	ldr	r1, [pc, #48]	; (80039b4 <__NVIC_SetPriority+0x4c>)
 8003982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003986:	0112      	lsls	r2, r2, #4
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	440b      	add	r3, r1
 800398c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003990:	e00a      	b.n	80039a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	b2da      	uxtb	r2, r3
 8003996:	4908      	ldr	r1, [pc, #32]	; (80039b8 <__NVIC_SetPriority+0x50>)
 8003998:	79fb      	ldrb	r3, [r7, #7]
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	3b04      	subs	r3, #4
 80039a0:	0112      	lsls	r2, r2, #4
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	440b      	add	r3, r1
 80039a6:	761a      	strb	r2, [r3, #24]
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	e000e100 	.word	0xe000e100
 80039b8:	e000ed00 	.word	0xe000ed00

080039bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039bc:	b480      	push	{r7}
 80039be:	b089      	sub	sp, #36	; 0x24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f1c3 0307 	rsb	r3, r3, #7
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	bf28      	it	cs
 80039da:	2304      	movcs	r3, #4
 80039dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	3304      	adds	r3, #4
 80039e2:	2b06      	cmp	r3, #6
 80039e4:	d902      	bls.n	80039ec <NVIC_EncodePriority+0x30>
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	3b03      	subs	r3, #3
 80039ea:	e000      	b.n	80039ee <NVIC_EncodePriority+0x32>
 80039ec:	2300      	movs	r3, #0
 80039ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f0:	f04f 32ff 	mov.w	r2, #4294967295
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	43da      	mvns	r2, r3
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	401a      	ands	r2, r3
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a04:	f04f 31ff 	mov.w	r1, #4294967295
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0e:	43d9      	mvns	r1, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a14:	4313      	orrs	r3, r2
         );
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3724      	adds	r7, #36	; 0x24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
	...

08003a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a34:	d301      	bcc.n	8003a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a36:	2301      	movs	r3, #1
 8003a38:	e00f      	b.n	8003a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a3a:	4a0a      	ldr	r2, [pc, #40]	; (8003a64 <SysTick_Config+0x40>)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a42:	210f      	movs	r1, #15
 8003a44:	f04f 30ff 	mov.w	r0, #4294967295
 8003a48:	f7ff ff8e 	bl	8003968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a4c:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <SysTick_Config+0x40>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a52:	4b04      	ldr	r3, [pc, #16]	; (8003a64 <SysTick_Config+0x40>)
 8003a54:	2207      	movs	r2, #7
 8003a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	e000e010 	.word	0xe000e010

08003a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7ff ff05 	bl	8003880 <__NVIC_SetPriorityGrouping>
}
 8003a76:	bf00      	nop
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b086      	sub	sp, #24
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	4603      	mov	r3, r0
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	607a      	str	r2, [r7, #4]
 8003a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a90:	f7ff ff1a 	bl	80038c8 <__NVIC_GetPriorityGrouping>
 8003a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	68b9      	ldr	r1, [r7, #8]
 8003a9a:	6978      	ldr	r0, [r7, #20]
 8003a9c:	f7ff ff8e 	bl	80039bc <NVIC_EncodePriority>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff ff5d 	bl	8003968 <__NVIC_SetPriority>
}
 8003aae:	bf00      	nop
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b082      	sub	sp, #8
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	4603      	mov	r3, r0
 8003abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff ff0d 	bl	80038e4 <__NVIC_EnableIRQ>
}
 8003aca:	bf00      	nop
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	4603      	mov	r3, r0
 8003ada:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff ff1d 	bl	8003920 <__NVIC_DisableIRQ>
}
 8003ae6:	bf00      	nop
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b082      	sub	sp, #8
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7ff ff94 	bl	8003a24 <SysTick_Config>
 8003afc:	4603      	mov	r3, r0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b082      	sub	sp, #8
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e014      	b.n	8003b42 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	791b      	ldrb	r3, [r3, #4]
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d105      	bne.n	8003b2e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7fd ff91 	bl	8001a50 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2202      	movs	r2, #2
 8003b32:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	795b      	ldrb	r3, [r3, #5]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <HAL_DAC_Start+0x16>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	e040      	b.n	8003be2 <HAL_DAC_Start+0x98>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2202      	movs	r2, #2
 8003b6a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6819      	ldr	r1, [r3, #0]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	f003 0310 	and.w	r3, r3, #16
 8003b78:	2201      	movs	r2, #1
 8003b7a:	409a      	lsls	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10f      	bne.n	8003baa <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003b94:	2b3c      	cmp	r3, #60	; 0x3c
 8003b96:	d11d      	bne.n	8003bd4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	605a      	str	r2, [r3, #4]
 8003ba8:	e014      	b.n	8003bd4 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	f003 0310 	and.w	r3, r3, #16
 8003bba:	213c      	movs	r1, #60	; 0x3c
 8003bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d107      	bne.n	8003bd4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0202 	orr.w	r2, r2, #2
 8003bd2:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b087      	sub	sp, #28
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	60f8      	str	r0, [r7, #12]
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	607a      	str	r2, [r7, #4]
 8003bfa:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d105      	bne.n	8003c18 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4413      	add	r3, r2
 8003c12:	3308      	adds	r3, #8
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	e004      	b.n	8003c22 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	3314      	adds	r3, #20
 8003c20:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	461a      	mov	r2, r3
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	371c      	adds	r7, #28
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	795b      	ldrb	r3, [r3, #5]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d101      	bne.n	8003c50 <HAL_DAC_ConfigChannel+0x18>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e03c      	b.n	8003cca <HAL_DAC_ConfigChannel+0x92>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2201      	movs	r2, #1
 8003c54:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2202      	movs	r2, #2
 8003c5a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f003 0310 	and.w	r3, r3, #16
 8003c6a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	43db      	mvns	r3, r3
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	4013      	ands	r3, r2
 8003c78:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f003 0310 	and.w	r3, r3, #16
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6819      	ldr	r1, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f003 0310 	and.w	r3, r3, #16
 8003cac:	22c0      	movs	r2, #192	; 0xc0
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb2:	43da      	mvns	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	400a      	ands	r2, r1
 8003cba:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	371c      	adds	r7, #28
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
	...

08003cd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ce4:	f7ff f992 	bl	800300c <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e099      	b.n	8003e28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0201 	bic.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d14:	e00f      	b.n	8003d36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d16:	f7ff f979 	bl	800300c <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b05      	cmp	r3, #5
 8003d22:	d908      	bls.n	8003d36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2220      	movs	r2, #32
 8003d28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e078      	b.n	8003e28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1e8      	bne.n	8003d16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	4b38      	ldr	r3, [pc, #224]	; (8003e30 <HAL_DMA_Init+0x158>)
 8003d50:	4013      	ands	r3, r2
 8003d52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d107      	bne.n	8003da0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f023 0307 	bic.w	r3, r3, #7
 8003db6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d117      	bne.n	8003dfa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00e      	beq.n	8003dfa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f8e5 	bl	8003fac <DMA_CheckFifoParam>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d008      	beq.n	8003dfa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2240      	movs	r2, #64	; 0x40
 8003dec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003df6:	2301      	movs	r3, #1
 8003df8:	e016      	b.n	8003e28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f89c 	bl	8003f40 <DMA_CalcBaseAndBitshift>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e10:	223f      	movs	r2, #63	; 0x3f
 8003e12:	409a      	lsls	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	f010803f 	.word	0xf010803f

08003e34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
 8003e40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e42:	2300      	movs	r3, #0
 8003e44:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d101      	bne.n	8003e5a <HAL_DMA_Start_IT+0x26>
 8003e56:	2302      	movs	r3, #2
 8003e58:	e040      	b.n	8003edc <HAL_DMA_Start_IT+0xa8>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d12f      	bne.n	8003ece <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2202      	movs	r2, #2
 8003e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	68b9      	ldr	r1, [r7, #8]
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 f82e 	bl	8003ee4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8c:	223f      	movs	r2, #63	; 0x3f
 8003e8e:	409a      	lsls	r2, r3
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0216 	orr.w	r2, r2, #22
 8003ea2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d007      	beq.n	8003ebc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0208 	orr.w	r2, r2, #8
 8003eba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0201 	orr.w	r2, r2, #1
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	e005      	b.n	8003eda <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3718      	adds	r7, #24
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	2b40      	cmp	r3, #64	; 0x40
 8003f10:	d108      	bne.n	8003f24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f22:	e007      	b.n	8003f34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	60da      	str	r2, [r3, #12]
}
 8003f34:	bf00      	nop
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	3b10      	subs	r3, #16
 8003f50:	4a14      	ldr	r2, [pc, #80]	; (8003fa4 <DMA_CalcBaseAndBitshift+0x64>)
 8003f52:	fba2 2303 	umull	r2, r3, r2, r3
 8003f56:	091b      	lsrs	r3, r3, #4
 8003f58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f5a:	4a13      	ldr	r2, [pc, #76]	; (8003fa8 <DMA_CalcBaseAndBitshift+0x68>)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4413      	add	r3, r2
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2b03      	cmp	r3, #3
 8003f6c:	d909      	bls.n	8003f82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f76:	f023 0303 	bic.w	r3, r3, #3
 8003f7a:	1d1a      	adds	r2, r3, #4
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	659a      	str	r2, [r3, #88]	; 0x58
 8003f80:	e007      	b.n	8003f92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f8a:	f023 0303 	bic.w	r3, r3, #3
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3714      	adds	r7, #20
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	aaaaaaab 	.word	0xaaaaaaab
 8003fa8:	080073a4 	.word	0x080073a4

08003fac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d11f      	bne.n	8004006 <DMA_CheckFifoParam+0x5a>
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2b03      	cmp	r3, #3
 8003fca:	d856      	bhi.n	800407a <DMA_CheckFifoParam+0xce>
 8003fcc:	a201      	add	r2, pc, #4	; (adr r2, 8003fd4 <DMA_CheckFifoParam+0x28>)
 8003fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd2:	bf00      	nop
 8003fd4:	08003fe5 	.word	0x08003fe5
 8003fd8:	08003ff7 	.word	0x08003ff7
 8003fdc:	08003fe5 	.word	0x08003fe5
 8003fe0:	0800407b 	.word	0x0800407b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d046      	beq.n	800407e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ff4:	e043      	b.n	800407e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ffe:	d140      	bne.n	8004082 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004004:	e03d      	b.n	8004082 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800400e:	d121      	bne.n	8004054 <DMA_CheckFifoParam+0xa8>
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2b03      	cmp	r3, #3
 8004014:	d837      	bhi.n	8004086 <DMA_CheckFifoParam+0xda>
 8004016:	a201      	add	r2, pc, #4	; (adr r2, 800401c <DMA_CheckFifoParam+0x70>)
 8004018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401c:	0800402d 	.word	0x0800402d
 8004020:	08004033 	.word	0x08004033
 8004024:	0800402d 	.word	0x0800402d
 8004028:	08004045 	.word	0x08004045
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	73fb      	strb	r3, [r7, #15]
      break;
 8004030:	e030      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004036:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d025      	beq.n	800408a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004042:	e022      	b.n	800408a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004048:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800404c:	d11f      	bne.n	800408e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004052:	e01c      	b.n	800408e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d903      	bls.n	8004062 <DMA_CheckFifoParam+0xb6>
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b03      	cmp	r3, #3
 800405e:	d003      	beq.n	8004068 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004060:	e018      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	73fb      	strb	r3, [r7, #15]
      break;
 8004066:	e015      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00e      	beq.n	8004092 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	73fb      	strb	r3, [r7, #15]
      break;
 8004078:	e00b      	b.n	8004092 <DMA_CheckFifoParam+0xe6>
      break;
 800407a:	bf00      	nop
 800407c:	e00a      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
      break;
 800407e:	bf00      	nop
 8004080:	e008      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
      break;
 8004082:	bf00      	nop
 8004084:	e006      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
      break;
 8004086:	bf00      	nop
 8004088:	e004      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
      break;
 800408a:	bf00      	nop
 800408c:	e002      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
      break;   
 800408e:	bf00      	nop
 8004090:	e000      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
      break;
 8004092:	bf00      	nop
    }
  } 
  
  return status; 
 8004094:	7bfb      	ldrb	r3, [r7, #15]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop

080040a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b089      	sub	sp, #36	; 0x24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ba:	2300      	movs	r3, #0
 80040bc:	61fb      	str	r3, [r7, #28]
 80040be:	e16b      	b.n	8004398 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040c0:	2201      	movs	r2, #1
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	4013      	ands	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	429a      	cmp	r2, r3
 80040da:	f040 815a 	bne.w	8004392 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d005      	beq.n	80040f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d130      	bne.n	8004158 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	2203      	movs	r2, #3
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	43db      	mvns	r3, r3
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	4013      	ands	r3, r2
 800410c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	4313      	orrs	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800412c:	2201      	movs	r2, #1
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	fa02 f303 	lsl.w	r3, r2, r3
 8004134:	43db      	mvns	r3, r3
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	4013      	ands	r3, r2
 800413a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	091b      	lsrs	r3, r3, #4
 8004142:	f003 0201 	and.w	r2, r3, #1
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	4313      	orrs	r3, r2
 8004150:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 0303 	and.w	r3, r3, #3
 8004160:	2b03      	cmp	r3, #3
 8004162:	d017      	beq.n	8004194 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	2203      	movs	r2, #3
 8004170:	fa02 f303 	lsl.w	r3, r2, r3
 8004174:	43db      	mvns	r3, r3
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	4013      	ands	r3, r2
 800417a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	fa02 f303 	lsl.w	r3, r2, r3
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	4313      	orrs	r3, r2
 800418c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f003 0303 	and.w	r3, r3, #3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d123      	bne.n	80041e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	08da      	lsrs	r2, r3, #3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3208      	adds	r2, #8
 80041a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	220f      	movs	r2, #15
 80041b8:	fa02 f303 	lsl.w	r3, r2, r3
 80041bc:	43db      	mvns	r3, r3
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	4013      	ands	r3, r2
 80041c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	691a      	ldr	r2, [r3, #16]
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	08da      	lsrs	r2, r3, #3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	3208      	adds	r2, #8
 80041e2:	69b9      	ldr	r1, [r7, #24]
 80041e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	2203      	movs	r2, #3
 80041f4:	fa02 f303 	lsl.w	r3, r2, r3
 80041f8:	43db      	mvns	r3, r3
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	4013      	ands	r3, r2
 80041fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f003 0203 	and.w	r2, r3, #3
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	fa02 f303 	lsl.w	r3, r2, r3
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	4313      	orrs	r3, r2
 8004214:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 80b4 	beq.w	8004392 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800422a:	2300      	movs	r3, #0
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	4b60      	ldr	r3, [pc, #384]	; (80043b0 <HAL_GPIO_Init+0x30c>)
 8004230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004232:	4a5f      	ldr	r2, [pc, #380]	; (80043b0 <HAL_GPIO_Init+0x30c>)
 8004234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004238:	6453      	str	r3, [r2, #68]	; 0x44
 800423a:	4b5d      	ldr	r3, [pc, #372]	; (80043b0 <HAL_GPIO_Init+0x30c>)
 800423c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004246:	4a5b      	ldr	r2, [pc, #364]	; (80043b4 <HAL_GPIO_Init+0x310>)
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	089b      	lsrs	r3, r3, #2
 800424c:	3302      	adds	r3, #2
 800424e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004252:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	220f      	movs	r2, #15
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	43db      	mvns	r3, r3
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	4013      	ands	r3, r2
 8004268:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a52      	ldr	r2, [pc, #328]	; (80043b8 <HAL_GPIO_Init+0x314>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d02b      	beq.n	80042ca <HAL_GPIO_Init+0x226>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a51      	ldr	r2, [pc, #324]	; (80043bc <HAL_GPIO_Init+0x318>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d025      	beq.n	80042c6 <HAL_GPIO_Init+0x222>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a50      	ldr	r2, [pc, #320]	; (80043c0 <HAL_GPIO_Init+0x31c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d01f      	beq.n	80042c2 <HAL_GPIO_Init+0x21e>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a4f      	ldr	r2, [pc, #316]	; (80043c4 <HAL_GPIO_Init+0x320>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d019      	beq.n	80042be <HAL_GPIO_Init+0x21a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a4e      	ldr	r2, [pc, #312]	; (80043c8 <HAL_GPIO_Init+0x324>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d013      	beq.n	80042ba <HAL_GPIO_Init+0x216>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a4d      	ldr	r2, [pc, #308]	; (80043cc <HAL_GPIO_Init+0x328>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d00d      	beq.n	80042b6 <HAL_GPIO_Init+0x212>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a4c      	ldr	r2, [pc, #304]	; (80043d0 <HAL_GPIO_Init+0x32c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d007      	beq.n	80042b2 <HAL_GPIO_Init+0x20e>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a4b      	ldr	r2, [pc, #300]	; (80043d4 <HAL_GPIO_Init+0x330>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d101      	bne.n	80042ae <HAL_GPIO_Init+0x20a>
 80042aa:	2307      	movs	r3, #7
 80042ac:	e00e      	b.n	80042cc <HAL_GPIO_Init+0x228>
 80042ae:	2308      	movs	r3, #8
 80042b0:	e00c      	b.n	80042cc <HAL_GPIO_Init+0x228>
 80042b2:	2306      	movs	r3, #6
 80042b4:	e00a      	b.n	80042cc <HAL_GPIO_Init+0x228>
 80042b6:	2305      	movs	r3, #5
 80042b8:	e008      	b.n	80042cc <HAL_GPIO_Init+0x228>
 80042ba:	2304      	movs	r3, #4
 80042bc:	e006      	b.n	80042cc <HAL_GPIO_Init+0x228>
 80042be:	2303      	movs	r3, #3
 80042c0:	e004      	b.n	80042cc <HAL_GPIO_Init+0x228>
 80042c2:	2302      	movs	r3, #2
 80042c4:	e002      	b.n	80042cc <HAL_GPIO_Init+0x228>
 80042c6:	2301      	movs	r3, #1
 80042c8:	e000      	b.n	80042cc <HAL_GPIO_Init+0x228>
 80042ca:	2300      	movs	r3, #0
 80042cc:	69fa      	ldr	r2, [r7, #28]
 80042ce:	f002 0203 	and.w	r2, r2, #3
 80042d2:	0092      	lsls	r2, r2, #2
 80042d4:	4093      	lsls	r3, r2
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	4313      	orrs	r3, r2
 80042da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042dc:	4935      	ldr	r1, [pc, #212]	; (80043b4 <HAL_GPIO_Init+0x310>)
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	089b      	lsrs	r3, r3, #2
 80042e2:	3302      	adds	r3, #2
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042ea:	4b3b      	ldr	r3, [pc, #236]	; (80043d8 <HAL_GPIO_Init+0x334>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	43db      	mvns	r3, r3
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	4013      	ands	r3, r2
 80042f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	4313      	orrs	r3, r2
 800430c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800430e:	4a32      	ldr	r2, [pc, #200]	; (80043d8 <HAL_GPIO_Init+0x334>)
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004314:	4b30      	ldr	r3, [pc, #192]	; (80043d8 <HAL_GPIO_Init+0x334>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	43db      	mvns	r3, r3
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	4013      	ands	r3, r2
 8004322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	4313      	orrs	r3, r2
 8004336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004338:	4a27      	ldr	r2, [pc, #156]	; (80043d8 <HAL_GPIO_Init+0x334>)
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800433e:	4b26      	ldr	r3, [pc, #152]	; (80043d8 <HAL_GPIO_Init+0x334>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	43db      	mvns	r3, r3
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	4013      	ands	r3, r2
 800434c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	4313      	orrs	r3, r2
 8004360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004362:	4a1d      	ldr	r2, [pc, #116]	; (80043d8 <HAL_GPIO_Init+0x334>)
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004368:	4b1b      	ldr	r3, [pc, #108]	; (80043d8 <HAL_GPIO_Init+0x334>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	43db      	mvns	r3, r3
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	4013      	ands	r3, r2
 8004376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	4313      	orrs	r3, r2
 800438a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800438c:	4a12      	ldr	r2, [pc, #72]	; (80043d8 <HAL_GPIO_Init+0x334>)
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	3301      	adds	r3, #1
 8004396:	61fb      	str	r3, [r7, #28]
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	2b0f      	cmp	r3, #15
 800439c:	f67f ae90 	bls.w	80040c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043a0:	bf00      	nop
 80043a2:	bf00      	nop
 80043a4:	3724      	adds	r7, #36	; 0x24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40023800 	.word	0x40023800
 80043b4:	40013800 	.word	0x40013800
 80043b8:	40020000 	.word	0x40020000
 80043bc:	40020400 	.word	0x40020400
 80043c0:	40020800 	.word	0x40020800
 80043c4:	40020c00 	.word	0x40020c00
 80043c8:	40021000 	.word	0x40021000
 80043cc:	40021400 	.word	0x40021400
 80043d0:	40021800 	.word	0x40021800
 80043d4:	40021c00 	.word	0x40021c00
 80043d8:	40013c00 	.word	0x40013c00

080043dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	460b      	mov	r3, r1
 80043e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691a      	ldr	r2, [r3, #16]
 80043ec:	887b      	ldrh	r3, [r7, #2]
 80043ee:	4013      	ands	r3, r2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d002      	beq.n	80043fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043f4:	2301      	movs	r3, #1
 80043f6:	73fb      	strb	r3, [r7, #15]
 80043f8:	e001      	b.n	80043fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043fa:	2300      	movs	r3, #0
 80043fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	807b      	strh	r3, [r7, #2]
 8004418:	4613      	mov	r3, r2
 800441a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800441c:	787b      	ldrb	r3, [r7, #1]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004422:	887a      	ldrh	r2, [r7, #2]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004428:	e003      	b.n	8004432 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800442a:	887b      	ldrh	r3, [r7, #2]
 800442c:	041a      	lsls	r2, r3, #16
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	619a      	str	r2, [r3, #24]
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr

0800443e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800443e:	b480      	push	{r7}
 8004440:	b085      	sub	sp, #20
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
 8004446:	460b      	mov	r3, r1
 8004448:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004450:	887a      	ldrh	r2, [r7, #2]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4013      	ands	r3, r2
 8004456:	041a      	lsls	r2, r3, #16
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	43d9      	mvns	r1, r3
 800445c:	887b      	ldrh	r3, [r7, #2]
 800445e:	400b      	ands	r3, r1
 8004460:	431a      	orrs	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	619a      	str	r2, [r3, #24]
}
 8004466:	bf00      	nop
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
	...

08004474 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e264      	b.n	8004950 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d075      	beq.n	800457e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004492:	4ba3      	ldr	r3, [pc, #652]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 030c 	and.w	r3, r3, #12
 800449a:	2b04      	cmp	r3, #4
 800449c:	d00c      	beq.n	80044b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800449e:	4ba0      	ldr	r3, [pc, #640]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044a6:	2b08      	cmp	r3, #8
 80044a8:	d112      	bne.n	80044d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044aa:	4b9d      	ldr	r3, [pc, #628]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044b6:	d10b      	bne.n	80044d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b8:	4b99      	ldr	r3, [pc, #612]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d05b      	beq.n	800457c <HAL_RCC_OscConfig+0x108>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d157      	bne.n	800457c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e23f      	b.n	8004950 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d8:	d106      	bne.n	80044e8 <HAL_RCC_OscConfig+0x74>
 80044da:	4b91      	ldr	r3, [pc, #580]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a90      	ldr	r2, [pc, #576]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 80044e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	e01d      	b.n	8004524 <HAL_RCC_OscConfig+0xb0>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044f0:	d10c      	bne.n	800450c <HAL_RCC_OscConfig+0x98>
 80044f2:	4b8b      	ldr	r3, [pc, #556]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a8a      	ldr	r2, [pc, #552]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 80044f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	4b88      	ldr	r3, [pc, #544]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a87      	ldr	r2, [pc, #540]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 8004504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	e00b      	b.n	8004524 <HAL_RCC_OscConfig+0xb0>
 800450c:	4b84      	ldr	r3, [pc, #528]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a83      	ldr	r2, [pc, #524]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 8004512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004516:	6013      	str	r3, [r2, #0]
 8004518:	4b81      	ldr	r3, [pc, #516]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a80      	ldr	r2, [pc, #512]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 800451e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d013      	beq.n	8004554 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452c:	f7fe fd6e 	bl	800300c <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004534:	f7fe fd6a 	bl	800300c <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b64      	cmp	r3, #100	; 0x64
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e204      	b.n	8004950 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004546:	4b76      	ldr	r3, [pc, #472]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f0      	beq.n	8004534 <HAL_RCC_OscConfig+0xc0>
 8004552:	e014      	b.n	800457e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004554:	f7fe fd5a 	bl	800300c <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800455c:	f7fe fd56 	bl	800300c <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b64      	cmp	r3, #100	; 0x64
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e1f0      	b.n	8004950 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800456e:	4b6c      	ldr	r3, [pc, #432]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f0      	bne.n	800455c <HAL_RCC_OscConfig+0xe8>
 800457a:	e000      	b.n	800457e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800457c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d063      	beq.n	8004652 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800458a:	4b65      	ldr	r3, [pc, #404]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 030c 	and.w	r3, r3, #12
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00b      	beq.n	80045ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004596:	4b62      	ldr	r3, [pc, #392]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800459e:	2b08      	cmp	r3, #8
 80045a0:	d11c      	bne.n	80045dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045a2:	4b5f      	ldr	r3, [pc, #380]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d116      	bne.n	80045dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ae:	4b5c      	ldr	r3, [pc, #368]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d005      	beq.n	80045c6 <HAL_RCC_OscConfig+0x152>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d001      	beq.n	80045c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e1c4      	b.n	8004950 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c6:	4b56      	ldr	r3, [pc, #344]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	4952      	ldr	r1, [pc, #328]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045da:	e03a      	b.n	8004652 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d020      	beq.n	8004626 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045e4:	4b4f      	ldr	r3, [pc, #316]	; (8004724 <HAL_RCC_OscConfig+0x2b0>)
 80045e6:	2201      	movs	r2, #1
 80045e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ea:	f7fe fd0f 	bl	800300c <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045f2:	f7fe fd0b 	bl	800300c <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e1a5      	b.n	8004950 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004604:	4b46      	ldr	r3, [pc, #280]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0f0      	beq.n	80045f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004610:	4b43      	ldr	r3, [pc, #268]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	4940      	ldr	r1, [pc, #256]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 8004620:	4313      	orrs	r3, r2
 8004622:	600b      	str	r3, [r1, #0]
 8004624:	e015      	b.n	8004652 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004626:	4b3f      	ldr	r3, [pc, #252]	; (8004724 <HAL_RCC_OscConfig+0x2b0>)
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462c:	f7fe fcee 	bl	800300c <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004634:	f7fe fcea 	bl	800300c <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e184      	b.n	8004950 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004646:	4b36      	ldr	r3, [pc, #216]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f0      	bne.n	8004634 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0308 	and.w	r3, r3, #8
 800465a:	2b00      	cmp	r3, #0
 800465c:	d030      	beq.n	80046c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d016      	beq.n	8004694 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004666:	4b30      	ldr	r3, [pc, #192]	; (8004728 <HAL_RCC_OscConfig+0x2b4>)
 8004668:	2201      	movs	r2, #1
 800466a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466c:	f7fe fcce 	bl	800300c <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004674:	f7fe fcca 	bl	800300c <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e164      	b.n	8004950 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004686:	4b26      	ldr	r3, [pc, #152]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 8004688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0f0      	beq.n	8004674 <HAL_RCC_OscConfig+0x200>
 8004692:	e015      	b.n	80046c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004694:	4b24      	ldr	r3, [pc, #144]	; (8004728 <HAL_RCC_OscConfig+0x2b4>)
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800469a:	f7fe fcb7 	bl	800300c <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046a2:	f7fe fcb3 	bl	800300c <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e14d      	b.n	8004950 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046b4:	4b1a      	ldr	r3, [pc, #104]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 80046b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1f0      	bne.n	80046a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 80a0 	beq.w	800480e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ce:	2300      	movs	r3, #0
 80046d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046d2:	4b13      	ldr	r3, [pc, #76]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10f      	bne.n	80046fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046de:	2300      	movs	r3, #0
 80046e0:	60bb      	str	r3, [r7, #8]
 80046e2:	4b0f      	ldr	r3, [pc, #60]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	4a0e      	ldr	r2, [pc, #56]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 80046e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ec:	6413      	str	r3, [r2, #64]	; 0x40
 80046ee:	4b0c      	ldr	r3, [pc, #48]	; (8004720 <HAL_RCC_OscConfig+0x2ac>)
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f6:	60bb      	str	r3, [r7, #8]
 80046f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046fa:	2301      	movs	r3, #1
 80046fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046fe:	4b0b      	ldr	r3, [pc, #44]	; (800472c <HAL_RCC_OscConfig+0x2b8>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004706:	2b00      	cmp	r3, #0
 8004708:	d121      	bne.n	800474e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800470a:	4b08      	ldr	r3, [pc, #32]	; (800472c <HAL_RCC_OscConfig+0x2b8>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a07      	ldr	r2, [pc, #28]	; (800472c <HAL_RCC_OscConfig+0x2b8>)
 8004710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004716:	f7fe fc79 	bl	800300c <HAL_GetTick>
 800471a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800471c:	e011      	b.n	8004742 <HAL_RCC_OscConfig+0x2ce>
 800471e:	bf00      	nop
 8004720:	40023800 	.word	0x40023800
 8004724:	42470000 	.word	0x42470000
 8004728:	42470e80 	.word	0x42470e80
 800472c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004730:	f7fe fc6c 	bl	800300c <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e106      	b.n	8004950 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004742:	4b85      	ldr	r3, [pc, #532]	; (8004958 <HAL_RCC_OscConfig+0x4e4>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0f0      	beq.n	8004730 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d106      	bne.n	8004764 <HAL_RCC_OscConfig+0x2f0>
 8004756:	4b81      	ldr	r3, [pc, #516]	; (800495c <HAL_RCC_OscConfig+0x4e8>)
 8004758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475a:	4a80      	ldr	r2, [pc, #512]	; (800495c <HAL_RCC_OscConfig+0x4e8>)
 800475c:	f043 0301 	orr.w	r3, r3, #1
 8004760:	6713      	str	r3, [r2, #112]	; 0x70
 8004762:	e01c      	b.n	800479e <HAL_RCC_OscConfig+0x32a>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	2b05      	cmp	r3, #5
 800476a:	d10c      	bne.n	8004786 <HAL_RCC_OscConfig+0x312>
 800476c:	4b7b      	ldr	r3, [pc, #492]	; (800495c <HAL_RCC_OscConfig+0x4e8>)
 800476e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004770:	4a7a      	ldr	r2, [pc, #488]	; (800495c <HAL_RCC_OscConfig+0x4e8>)
 8004772:	f043 0304 	orr.w	r3, r3, #4
 8004776:	6713      	str	r3, [r2, #112]	; 0x70
 8004778:	4b78      	ldr	r3, [pc, #480]	; (800495c <HAL_RCC_OscConfig+0x4e8>)
 800477a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477c:	4a77      	ldr	r2, [pc, #476]	; (800495c <HAL_RCC_OscConfig+0x4e8>)
 800477e:	f043 0301 	orr.w	r3, r3, #1
 8004782:	6713      	str	r3, [r2, #112]	; 0x70
 8004784:	e00b      	b.n	800479e <HAL_RCC_OscConfig+0x32a>
 8004786:	4b75      	ldr	r3, [pc, #468]	; (800495c <HAL_RCC_OscConfig+0x4e8>)
 8004788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478a:	4a74      	ldr	r2, [pc, #464]	; (800495c <HAL_RCC_OscConfig+0x4e8>)
 800478c:	f023 0301 	bic.w	r3, r3, #1
 8004790:	6713      	str	r3, [r2, #112]	; 0x70
 8004792:	4b72      	ldr	r3, [pc, #456]	; (800495c <HAL_RCC_OscConfig+0x4e8>)
 8004794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004796:	4a71      	ldr	r2, [pc, #452]	; (800495c <HAL_RCC_OscConfig+0x4e8>)
 8004798:	f023 0304 	bic.w	r3, r3, #4
 800479c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d015      	beq.n	80047d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a6:	f7fe fc31 	bl	800300c <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ac:	e00a      	b.n	80047c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047ae:	f7fe fc2d 	bl	800300c <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047bc:	4293      	cmp	r3, r2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e0c5      	b.n	8004950 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c4:	4b65      	ldr	r3, [pc, #404]	; (800495c <HAL_RCC_OscConfig+0x4e8>)
 80047c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0ee      	beq.n	80047ae <HAL_RCC_OscConfig+0x33a>
 80047d0:	e014      	b.n	80047fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047d2:	f7fe fc1b 	bl	800300c <HAL_GetTick>
 80047d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047d8:	e00a      	b.n	80047f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047da:	f7fe fc17 	bl	800300c <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e0af      	b.n	8004950 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047f0:	4b5a      	ldr	r3, [pc, #360]	; (800495c <HAL_RCC_OscConfig+0x4e8>)
 80047f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1ee      	bne.n	80047da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047fc:	7dfb      	ldrb	r3, [r7, #23]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d105      	bne.n	800480e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004802:	4b56      	ldr	r3, [pc, #344]	; (800495c <HAL_RCC_OscConfig+0x4e8>)
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	4a55      	ldr	r2, [pc, #340]	; (800495c <HAL_RCC_OscConfig+0x4e8>)
 8004808:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800480c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 809b 	beq.w	800494e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004818:	4b50      	ldr	r3, [pc, #320]	; (800495c <HAL_RCC_OscConfig+0x4e8>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f003 030c 	and.w	r3, r3, #12
 8004820:	2b08      	cmp	r3, #8
 8004822:	d05c      	beq.n	80048de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	2b02      	cmp	r3, #2
 800482a:	d141      	bne.n	80048b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800482c:	4b4c      	ldr	r3, [pc, #304]	; (8004960 <HAL_RCC_OscConfig+0x4ec>)
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004832:	f7fe fbeb 	bl	800300c <HAL_GetTick>
 8004836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004838:	e008      	b.n	800484c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800483a:	f7fe fbe7 	bl	800300c <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e081      	b.n	8004950 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800484c:	4b43      	ldr	r3, [pc, #268]	; (800495c <HAL_RCC_OscConfig+0x4e8>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1f0      	bne.n	800483a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	69da      	ldr	r2, [r3, #28]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	431a      	orrs	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	019b      	lsls	r3, r3, #6
 8004868:	431a      	orrs	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486e:	085b      	lsrs	r3, r3, #1
 8004870:	3b01      	subs	r3, #1
 8004872:	041b      	lsls	r3, r3, #16
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487a:	061b      	lsls	r3, r3, #24
 800487c:	4937      	ldr	r1, [pc, #220]	; (800495c <HAL_RCC_OscConfig+0x4e8>)
 800487e:	4313      	orrs	r3, r2
 8004880:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004882:	4b37      	ldr	r3, [pc, #220]	; (8004960 <HAL_RCC_OscConfig+0x4ec>)
 8004884:	2201      	movs	r2, #1
 8004886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004888:	f7fe fbc0 	bl	800300c <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004890:	f7fe fbbc 	bl	800300c <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e056      	b.n	8004950 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048a2:	4b2e      	ldr	r3, [pc, #184]	; (800495c <HAL_RCC_OscConfig+0x4e8>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d0f0      	beq.n	8004890 <HAL_RCC_OscConfig+0x41c>
 80048ae:	e04e      	b.n	800494e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b0:	4b2b      	ldr	r3, [pc, #172]	; (8004960 <HAL_RCC_OscConfig+0x4ec>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b6:	f7fe fba9 	bl	800300c <HAL_GetTick>
 80048ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048bc:	e008      	b.n	80048d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048be:	f7fe fba5 	bl	800300c <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e03f      	b.n	8004950 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048d0:	4b22      	ldr	r3, [pc, #136]	; (800495c <HAL_RCC_OscConfig+0x4e8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1f0      	bne.n	80048be <HAL_RCC_OscConfig+0x44a>
 80048dc:	e037      	b.n	800494e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d101      	bne.n	80048ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e032      	b.n	8004950 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048ea:	4b1c      	ldr	r3, [pc, #112]	; (800495c <HAL_RCC_OscConfig+0x4e8>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d028      	beq.n	800494a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004902:	429a      	cmp	r2, r3
 8004904:	d121      	bne.n	800494a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004910:	429a      	cmp	r2, r3
 8004912:	d11a      	bne.n	800494a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800491a:	4013      	ands	r3, r2
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004920:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004922:	4293      	cmp	r3, r2
 8004924:	d111      	bne.n	800494a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004930:	085b      	lsrs	r3, r3, #1
 8004932:	3b01      	subs	r3, #1
 8004934:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004936:	429a      	cmp	r2, r3
 8004938:	d107      	bne.n	800494a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004944:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004946:	429a      	cmp	r2, r3
 8004948:	d001      	beq.n	800494e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e000      	b.n	8004950 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3718      	adds	r7, #24
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	40007000 	.word	0x40007000
 800495c:	40023800 	.word	0x40023800
 8004960:	42470060 	.word	0x42470060

08004964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e0cc      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004978:	4b68      	ldr	r3, [pc, #416]	; (8004b1c <HAL_RCC_ClockConfig+0x1b8>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 030f 	and.w	r3, r3, #15
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	d90c      	bls.n	80049a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004986:	4b65      	ldr	r3, [pc, #404]	; (8004b1c <HAL_RCC_ClockConfig+0x1b8>)
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800498e:	4b63      	ldr	r3, [pc, #396]	; (8004b1c <HAL_RCC_ClockConfig+0x1b8>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	429a      	cmp	r2, r3
 800499a:	d001      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e0b8      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d020      	beq.n	80049ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d005      	beq.n	80049c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049b8:	4b59      	ldr	r3, [pc, #356]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	4a58      	ldr	r2, [pc, #352]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 80049be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0308 	and.w	r3, r3, #8
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d005      	beq.n	80049dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049d0:	4b53      	ldr	r3, [pc, #332]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	4a52      	ldr	r2, [pc, #328]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049dc:	4b50      	ldr	r3, [pc, #320]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	494d      	ldr	r1, [pc, #308]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d044      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d107      	bne.n	8004a12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a02:	4b47      	ldr	r3, [pc, #284]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d119      	bne.n	8004a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e07f      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d003      	beq.n	8004a22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a1e:	2b03      	cmp	r3, #3
 8004a20:	d107      	bne.n	8004a32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a22:	4b3f      	ldr	r3, [pc, #252]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d109      	bne.n	8004a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e06f      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a32:	4b3b      	ldr	r3, [pc, #236]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e067      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a42:	4b37      	ldr	r3, [pc, #220]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f023 0203 	bic.w	r2, r3, #3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	4934      	ldr	r1, [pc, #208]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a54:	f7fe fada 	bl	800300c <HAL_GetTick>
 8004a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a5a:	e00a      	b.n	8004a72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a5c:	f7fe fad6 	bl	800300c <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e04f      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a72:	4b2b      	ldr	r3, [pc, #172]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 020c 	and.w	r2, r3, #12
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d1eb      	bne.n	8004a5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a84:	4b25      	ldr	r3, [pc, #148]	; (8004b1c <HAL_RCC_ClockConfig+0x1b8>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 030f 	and.w	r3, r3, #15
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d20c      	bcs.n	8004aac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a92:	4b22      	ldr	r3, [pc, #136]	; (8004b1c <HAL_RCC_ClockConfig+0x1b8>)
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a9a:	4b20      	ldr	r3, [pc, #128]	; (8004b1c <HAL_RCC_ClockConfig+0x1b8>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d001      	beq.n	8004aac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e032      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d008      	beq.n	8004aca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ab8:	4b19      	ldr	r3, [pc, #100]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	4916      	ldr	r1, [pc, #88]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d009      	beq.n	8004aea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ad6:	4b12      	ldr	r3, [pc, #72]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	490e      	ldr	r1, [pc, #56]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004aea:	f000 f821 	bl	8004b30 <HAL_RCC_GetSysClockFreq>
 8004aee:	4602      	mov	r2, r0
 8004af0:	4b0b      	ldr	r3, [pc, #44]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	091b      	lsrs	r3, r3, #4
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	490a      	ldr	r1, [pc, #40]	; (8004b24 <HAL_RCC_ClockConfig+0x1c0>)
 8004afc:	5ccb      	ldrb	r3, [r1, r3]
 8004afe:	fa22 f303 	lsr.w	r3, r2, r3
 8004b02:	4a09      	ldr	r2, [pc, #36]	; (8004b28 <HAL_RCC_ClockConfig+0x1c4>)
 8004b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b06:	4b09      	ldr	r3, [pc, #36]	; (8004b2c <HAL_RCC_ClockConfig+0x1c8>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7fe fa3a 	bl	8002f84 <HAL_InitTick>

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	40023c00 	.word	0x40023c00
 8004b20:	40023800 	.word	0x40023800
 8004b24:	08007394 	.word	0x08007394
 8004b28:	20000008 	.word	0x20000008
 8004b2c:	2000000c 	.word	0x2000000c

08004b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004b34:	b084      	sub	sp, #16
 8004b36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	607b      	str	r3, [r7, #4]
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	2300      	movs	r3, #0
 8004b42:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b48:	4b67      	ldr	r3, [pc, #412]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f003 030c 	and.w	r3, r3, #12
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d00d      	beq.n	8004b70 <HAL_RCC_GetSysClockFreq+0x40>
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	f200 80bd 	bhi.w	8004cd4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <HAL_RCC_GetSysClockFreq+0x34>
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	d003      	beq.n	8004b6a <HAL_RCC_GetSysClockFreq+0x3a>
 8004b62:	e0b7      	b.n	8004cd4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b64:	4b61      	ldr	r3, [pc, #388]	; (8004cec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004b66:	60bb      	str	r3, [r7, #8]
       break;
 8004b68:	e0b7      	b.n	8004cda <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b6a:	4b61      	ldr	r3, [pc, #388]	; (8004cf0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004b6c:	60bb      	str	r3, [r7, #8]
      break;
 8004b6e:	e0b4      	b.n	8004cda <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b70:	4b5d      	ldr	r3, [pc, #372]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b78:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b7a:	4b5b      	ldr	r3, [pc, #364]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d04d      	beq.n	8004c22 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b86:	4b58      	ldr	r3, [pc, #352]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	099b      	lsrs	r3, r3, #6
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	f04f 0300 	mov.w	r3, #0
 8004b92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b96:	f04f 0100 	mov.w	r1, #0
 8004b9a:	ea02 0800 	and.w	r8, r2, r0
 8004b9e:	ea03 0901 	and.w	r9, r3, r1
 8004ba2:	4640      	mov	r0, r8
 8004ba4:	4649      	mov	r1, r9
 8004ba6:	f04f 0200 	mov.w	r2, #0
 8004baa:	f04f 0300 	mov.w	r3, #0
 8004bae:	014b      	lsls	r3, r1, #5
 8004bb0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004bb4:	0142      	lsls	r2, r0, #5
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	4619      	mov	r1, r3
 8004bba:	ebb0 0008 	subs.w	r0, r0, r8
 8004bbe:	eb61 0109 	sbc.w	r1, r1, r9
 8004bc2:	f04f 0200 	mov.w	r2, #0
 8004bc6:	f04f 0300 	mov.w	r3, #0
 8004bca:	018b      	lsls	r3, r1, #6
 8004bcc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004bd0:	0182      	lsls	r2, r0, #6
 8004bd2:	1a12      	subs	r2, r2, r0
 8004bd4:	eb63 0301 	sbc.w	r3, r3, r1
 8004bd8:	f04f 0000 	mov.w	r0, #0
 8004bdc:	f04f 0100 	mov.w	r1, #0
 8004be0:	00d9      	lsls	r1, r3, #3
 8004be2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004be6:	00d0      	lsls	r0, r2, #3
 8004be8:	4602      	mov	r2, r0
 8004bea:	460b      	mov	r3, r1
 8004bec:	eb12 0208 	adds.w	r2, r2, r8
 8004bf0:	eb43 0309 	adc.w	r3, r3, r9
 8004bf4:	f04f 0000 	mov.w	r0, #0
 8004bf8:	f04f 0100 	mov.w	r1, #0
 8004bfc:	0259      	lsls	r1, r3, #9
 8004bfe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004c02:	0250      	lsls	r0, r2, #9
 8004c04:	4602      	mov	r2, r0
 8004c06:	460b      	mov	r3, r1
 8004c08:	4610      	mov	r0, r2
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	f04f 0300 	mov.w	r3, #0
 8004c14:	f7fb fce4 	bl	80005e0 <__aeabi_uldivmod>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	e04a      	b.n	8004cb8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c22:	4b31      	ldr	r3, [pc, #196]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	099b      	lsrs	r3, r3, #6
 8004c28:	461a      	mov	r2, r3
 8004c2a:	f04f 0300 	mov.w	r3, #0
 8004c2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004c32:	f04f 0100 	mov.w	r1, #0
 8004c36:	ea02 0400 	and.w	r4, r2, r0
 8004c3a:	ea03 0501 	and.w	r5, r3, r1
 8004c3e:	4620      	mov	r0, r4
 8004c40:	4629      	mov	r1, r5
 8004c42:	f04f 0200 	mov.w	r2, #0
 8004c46:	f04f 0300 	mov.w	r3, #0
 8004c4a:	014b      	lsls	r3, r1, #5
 8004c4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004c50:	0142      	lsls	r2, r0, #5
 8004c52:	4610      	mov	r0, r2
 8004c54:	4619      	mov	r1, r3
 8004c56:	1b00      	subs	r0, r0, r4
 8004c58:	eb61 0105 	sbc.w	r1, r1, r5
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	018b      	lsls	r3, r1, #6
 8004c66:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004c6a:	0182      	lsls	r2, r0, #6
 8004c6c:	1a12      	subs	r2, r2, r0
 8004c6e:	eb63 0301 	sbc.w	r3, r3, r1
 8004c72:	f04f 0000 	mov.w	r0, #0
 8004c76:	f04f 0100 	mov.w	r1, #0
 8004c7a:	00d9      	lsls	r1, r3, #3
 8004c7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c80:	00d0      	lsls	r0, r2, #3
 8004c82:	4602      	mov	r2, r0
 8004c84:	460b      	mov	r3, r1
 8004c86:	1912      	adds	r2, r2, r4
 8004c88:	eb45 0303 	adc.w	r3, r5, r3
 8004c8c:	f04f 0000 	mov.w	r0, #0
 8004c90:	f04f 0100 	mov.w	r1, #0
 8004c94:	0299      	lsls	r1, r3, #10
 8004c96:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004c9a:	0290      	lsls	r0, r2, #10
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4610      	mov	r0, r2
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	f7fb fc98 	bl	80005e0 <__aeabi_uldivmod>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004cb8:	4b0b      	ldr	r3, [pc, #44]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	0c1b      	lsrs	r3, r3, #16
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	005b      	lsls	r3, r3, #1
 8004cc6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd0:	60bb      	str	r3, [r7, #8]
      break;
 8004cd2:	e002      	b.n	8004cda <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cd4:	4b05      	ldr	r3, [pc, #20]	; (8004cec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004cd6:	60bb      	str	r3, [r7, #8]
      break;
 8004cd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cda:	68bb      	ldr	r3, [r7, #8]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004ce6:	bf00      	nop
 8004ce8:	40023800 	.word	0x40023800
 8004cec:	00f42400 	.word	0x00f42400
 8004cf0:	007a1200 	.word	0x007a1200

08004cf4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e07b      	b.n	8004dfe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d108      	bne.n	8004d20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d16:	d009      	beq.n	8004d2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	61da      	str	r2, [r3, #28]
 8004d1e:	e005      	b.n	8004d2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d106      	bne.n	8004d4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7fc fec6 	bl	8001ad8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d74:	431a      	orrs	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	431a      	orrs	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004da6:	431a      	orrs	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db0:	ea42 0103 	orr.w	r1, r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	0c1b      	lsrs	r3, r3, #16
 8004dca:	f003 0104 	and.w	r1, r3, #4
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	f003 0210 	and.w	r2, r3, #16
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	69da      	ldr	r2, [r3, #28]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
	...

08004e08 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	4613      	mov	r3, r2
 8004e14:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e16:	2300      	movs	r3, #0
 8004e18:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d110      	bne.n	8004e44 <HAL_SPI_Receive_DMA+0x3c>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e2a:	d10b      	bne.n	8004e44 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2204      	movs	r2, #4
 8004e30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8004e34:	88fb      	ldrh	r3, [r7, #6]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	68b9      	ldr	r1, [r7, #8]
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 f8ac 	bl	8004f98 <HAL_SPI_TransmitReceive_DMA>
 8004e40:	4603      	mov	r3, r0
 8004e42:	e09f      	b.n	8004f84 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d101      	bne.n	8004e52 <HAL_SPI_Receive_DMA+0x4a>
 8004e4e:	2302      	movs	r3, #2
 8004e50:	e098      	b.n	8004f84 <HAL_SPI_Receive_DMA+0x17c>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d002      	beq.n	8004e6c <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8004e66:	2302      	movs	r3, #2
 8004e68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e6a:	e086      	b.n	8004f7a <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d002      	beq.n	8004e78 <HAL_SPI_Receive_DMA+0x70>
 8004e72:	88fb      	ldrh	r3, [r7, #6]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d102      	bne.n	8004e7e <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e7c:	e07d      	b.n	8004f7a <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2204      	movs	r2, #4
 8004e82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	88fa      	ldrh	r2, [r7, #6]
 8004e96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	88fa      	ldrh	r2, [r7, #6]
 8004e9c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ebe:	d10f      	bne.n	8004ee0 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ece:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ede:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee4:	4a29      	ldr	r2, [pc, #164]	; (8004f8c <HAL_SPI_Receive_DMA+0x184>)
 8004ee6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eec:	4a28      	ldr	r2, [pc, #160]	; (8004f90 <HAL_SPI_Receive_DMA+0x188>)
 8004eee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef4:	4a27      	ldr	r2, [pc, #156]	; (8004f94 <HAL_SPI_Receive_DMA+0x18c>)
 8004ef6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004efc:	2200      	movs	r2, #0
 8004efe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	330c      	adds	r3, #12
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f10:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f16:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004f18:	f7fe ff8c 	bl	8003e34 <HAL_DMA_Start_IT>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00c      	beq.n	8004f3c <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f26:	f043 0210 	orr.w	r2, r3, #16
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004f3a:	e01e      	b.n	8004f7a <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f46:	2b40      	cmp	r3, #64	; 0x40
 8004f48:	d007      	beq.n	8004f5a <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f58:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f042 0220 	orr.w	r2, r2, #32
 8004f68:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f042 0201 	orr.w	r2, r2, #1
 8004f78:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3718      	adds	r7, #24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	08005339 	.word	0x08005339
 8004f90:	08005201 	.word	0x08005201
 8004f94:	08005371 	.word	0x08005371

08004f98 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
 8004fa4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d101      	bne.n	8004fb8 <HAL_SPI_TransmitReceive_DMA+0x20>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e0e3      	b.n	8005180 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fc6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004fce:	7dbb      	ldrb	r3, [r7, #22]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d00d      	beq.n	8004ff0 <HAL_SPI_TransmitReceive_DMA+0x58>
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fda:	d106      	bne.n	8004fea <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d102      	bne.n	8004fea <HAL_SPI_TransmitReceive_DMA+0x52>
 8004fe4:	7dbb      	ldrb	r3, [r7, #22]
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	d002      	beq.n	8004ff0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8004fea:	2302      	movs	r3, #2
 8004fec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004fee:	e0c2      	b.n	8005176 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d005      	beq.n	8005002 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004ffc:	887b      	ldrh	r3, [r7, #2]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d102      	bne.n	8005008 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005006:	e0b6      	b.n	8005176 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b04      	cmp	r3, #4
 8005012:	d003      	beq.n	800501c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2205      	movs	r2, #5
 8005018:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	887a      	ldrh	r2, [r7, #2]
 800502c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	887a      	ldrh	r2, [r7, #2]
 8005032:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	887a      	ldrh	r2, [r7, #2]
 800503e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	887a      	ldrh	r2, [r7, #2]
 8005044:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b04      	cmp	r3, #4
 800505c:	d108      	bne.n	8005070 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005062:	4a49      	ldr	r2, [pc, #292]	; (8005188 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8005064:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800506a:	4a48      	ldr	r2, [pc, #288]	; (800518c <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800506c:	63da      	str	r2, [r3, #60]	; 0x3c
 800506e:	e007      	b.n	8005080 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005074:	4a46      	ldr	r2, [pc, #280]	; (8005190 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8005076:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800507c:	4a45      	ldr	r2, [pc, #276]	; (8005194 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800507e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005084:	4a44      	ldr	r2, [pc, #272]	; (8005198 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8005086:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800508c:	2200      	movs	r2, #0
 800508e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	330c      	adds	r3, #12
 800509a:	4619      	mov	r1, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050a6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80050a8:	f7fe fec4 	bl	8003e34 <HAL_DMA_Start_IT>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00c      	beq.n	80050cc <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b6:	f043 0210 	orr.w	r2, r3, #16
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80050ca:	e054      	b.n	8005176 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0201 	orr.w	r2, r2, #1
 80050da:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050e0:	2200      	movs	r2, #0
 80050e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050e8:	2200      	movs	r2, #0
 80050ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050f0:	2200      	movs	r2, #0
 80050f2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050f8:	2200      	movs	r2, #0
 80050fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005104:	4619      	mov	r1, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	330c      	adds	r3, #12
 800510c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005112:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005114:	f7fe fe8e 	bl	8003e34 <HAL_DMA_Start_IT>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00c      	beq.n	8005138 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005122:	f043 0210 	orr.w	r2, r3, #16
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005136:	e01e      	b.n	8005176 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005142:	2b40      	cmp	r3, #64	; 0x40
 8005144:	d007      	beq.n	8005156 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005154:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f042 0220 	orr.w	r2, r2, #32
 8005164:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f042 0202 	orr.w	r2, r2, #2
 8005174:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800517e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005180:	4618      	mov	r0, r3
 8005182:	3718      	adds	r7, #24
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	08005339 	.word	0x08005339
 800518c:	08005201 	.word	0x08005201
 8005190:	08005355 	.word	0x08005355
 8005194:	080052a9 	.word	0x080052a9
 8005198:	08005371 	.word	0x08005371

0800519c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800520e:	f7fd fefd 	bl	800300c <HAL_GetTick>
 8005212:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005222:	d03b      	beq.n	800529c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0220 	bic.w	r2, r2, #32
 8005232:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10d      	bne.n	8005258 <SPI_DMAReceiveCplt+0x58>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005244:	d108      	bne.n	8005258 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 0203 	bic.w	r2, r2, #3
 8005254:	605a      	str	r2, [r3, #4]
 8005256:	e007      	b.n	8005268 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0201 	bic.w	r2, r2, #1
 8005266:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	2164      	movs	r1, #100	; 0x64
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f000 f927 	bl	80054c0 <SPI_EndRxTransaction>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d002      	beq.n	800527e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2220      	movs	r2, #32
 800527c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005290:	2b00      	cmp	r3, #0
 8005292:	d003      	beq.n	800529c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f7ff ffa9 	bl	80051ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800529a:	e002      	b.n	80052a2 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f7ff ff7d 	bl	800519c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052b6:	f7fd fea9 	bl	800300c <HAL_GetTick>
 80052ba:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ca:	d02f      	beq.n	800532c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 0220 	bic.w	r2, r2, #32
 80052da:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	2164      	movs	r1, #100	; 0x64
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 f953 	bl	800558c <SPI_EndRxTxTransaction>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d005      	beq.n	80052f8 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f0:	f043 0220 	orr.w	r2, r3, #32
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0203 	bic.w	r2, r2, #3
 8005306:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005320:	2b00      	cmp	r3, #0
 8005322:	d003      	beq.n	800532c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f7ff ff61 	bl	80051ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800532a:	e002      	b.n	8005332 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f7ff ff3f 	bl	80051b0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005344:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f7ff ff3c 	bl	80051c4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800534c:	bf00      	nop
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005360:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f7ff ff38 	bl	80051d8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005368:	bf00      	nop
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f022 0203 	bic.w	r2, r2, #3
 800538c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005392:	f043 0210 	orr.w	r2, r3, #16
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f7ff ff22 	bl	80051ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80053a8:	bf00      	nop
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b088      	sub	sp, #32
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	603b      	str	r3, [r7, #0]
 80053bc:	4613      	mov	r3, r2
 80053be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053c0:	f7fd fe24 	bl	800300c <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c8:	1a9b      	subs	r3, r3, r2
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	4413      	add	r3, r2
 80053ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053d0:	f7fd fe1c 	bl	800300c <HAL_GetTick>
 80053d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053d6:	4b39      	ldr	r3, [pc, #228]	; (80054bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	015b      	lsls	r3, r3, #5
 80053dc:	0d1b      	lsrs	r3, r3, #20
 80053de:	69fa      	ldr	r2, [r7, #28]
 80053e0:	fb02 f303 	mul.w	r3, r2, r3
 80053e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053e6:	e054      	b.n	8005492 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ee:	d050      	beq.n	8005492 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053f0:	f7fd fe0c 	bl	800300c <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	69fa      	ldr	r2, [r7, #28]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d902      	bls.n	8005406 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d13d      	bne.n	8005482 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005414:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800541e:	d111      	bne.n	8005444 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005428:	d004      	beq.n	8005434 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005432:	d107      	bne.n	8005444 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005442:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005448:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800544c:	d10f      	bne.n	800546e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800545c:	601a      	str	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800546c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e017      	b.n	80054b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005488:	2300      	movs	r3, #0
 800548a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	3b01      	subs	r3, #1
 8005490:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	4013      	ands	r3, r2
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	429a      	cmp	r2, r3
 80054a0:	bf0c      	ite	eq
 80054a2:	2301      	moveq	r3, #1
 80054a4:	2300      	movne	r3, #0
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	461a      	mov	r2, r3
 80054aa:	79fb      	ldrb	r3, [r7, #7]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d19b      	bne.n	80053e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3720      	adds	r7, #32
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	20000008 	.word	0x20000008

080054c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af02      	add	r7, sp, #8
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054d4:	d111      	bne.n	80054fa <SPI_EndRxTransaction+0x3a>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054de:	d004      	beq.n	80054ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e8:	d107      	bne.n	80054fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054f8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005502:	d12a      	bne.n	800555a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800550c:	d012      	beq.n	8005534 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	2200      	movs	r2, #0
 8005516:	2180      	movs	r1, #128	; 0x80
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f7ff ff49 	bl	80053b0 <SPI_WaitFlagStateUntilTimeout>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d02d      	beq.n	8005580 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005528:	f043 0220 	orr.w	r2, r3, #32
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e026      	b.n	8005582 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	2200      	movs	r2, #0
 800553c:	2101      	movs	r1, #1
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f7ff ff36 	bl	80053b0 <SPI_WaitFlagStateUntilTimeout>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d01a      	beq.n	8005580 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800554e:	f043 0220 	orr.w	r2, r3, #32
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e013      	b.n	8005582 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2200      	movs	r2, #0
 8005562:	2101      	movs	r1, #1
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f7ff ff23 	bl	80053b0 <SPI_WaitFlagStateUntilTimeout>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d007      	beq.n	8005580 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005574:	f043 0220 	orr.w	r2, r3, #32
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e000      	b.n	8005582 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
	...

0800558c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b088      	sub	sp, #32
 8005590:	af02      	add	r7, sp, #8
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005598:	4b1b      	ldr	r3, [pc, #108]	; (8005608 <SPI_EndRxTxTransaction+0x7c>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a1b      	ldr	r2, [pc, #108]	; (800560c <SPI_EndRxTxTransaction+0x80>)
 800559e:	fba2 2303 	umull	r2, r3, r2, r3
 80055a2:	0d5b      	lsrs	r3, r3, #21
 80055a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055a8:	fb02 f303 	mul.w	r3, r2, r3
 80055ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055b6:	d112      	bne.n	80055de <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	9300      	str	r3, [sp, #0]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2200      	movs	r2, #0
 80055c0:	2180      	movs	r1, #128	; 0x80
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f7ff fef4 	bl	80053b0 <SPI_WaitFlagStateUntilTimeout>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d016      	beq.n	80055fc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d2:	f043 0220 	orr.w	r2, r3, #32
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e00f      	b.n	80055fe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00a      	beq.n	80055fa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	3b01      	subs	r3, #1
 80055e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f4:	2b80      	cmp	r3, #128	; 0x80
 80055f6:	d0f2      	beq.n	80055de <SPI_EndRxTxTransaction+0x52>
 80055f8:	e000      	b.n	80055fc <SPI_EndRxTxTransaction+0x70>
        break;
 80055fa:	bf00      	nop
  }

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3718      	adds	r7, #24
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	20000008 	.word	0x20000008
 800560c:	165e9f81 	.word	0x165e9f81

08005610 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e041      	b.n	80056a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d106      	bne.n	800563c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f7fc fb00 	bl	8001c3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3304      	adds	r3, #4
 800564c:	4619      	mov	r1, r3
 800564e:	4610      	mov	r0, r2
 8005650:	f000 fd70 	bl	8006134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
	...

080056b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d001      	beq.n	80056c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e04e      	b.n	8005766 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0201 	orr.w	r2, r2, #1
 80056de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a23      	ldr	r2, [pc, #140]	; (8005774 <HAL_TIM_Base_Start_IT+0xc4>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d022      	beq.n	8005730 <HAL_TIM_Base_Start_IT+0x80>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f2:	d01d      	beq.n	8005730 <HAL_TIM_Base_Start_IT+0x80>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a1f      	ldr	r2, [pc, #124]	; (8005778 <HAL_TIM_Base_Start_IT+0xc8>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d018      	beq.n	8005730 <HAL_TIM_Base_Start_IT+0x80>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a1e      	ldr	r2, [pc, #120]	; (800577c <HAL_TIM_Base_Start_IT+0xcc>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d013      	beq.n	8005730 <HAL_TIM_Base_Start_IT+0x80>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a1c      	ldr	r2, [pc, #112]	; (8005780 <HAL_TIM_Base_Start_IT+0xd0>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d00e      	beq.n	8005730 <HAL_TIM_Base_Start_IT+0x80>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a1b      	ldr	r2, [pc, #108]	; (8005784 <HAL_TIM_Base_Start_IT+0xd4>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d009      	beq.n	8005730 <HAL_TIM_Base_Start_IT+0x80>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a19      	ldr	r2, [pc, #100]	; (8005788 <HAL_TIM_Base_Start_IT+0xd8>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d004      	beq.n	8005730 <HAL_TIM_Base_Start_IT+0x80>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a18      	ldr	r2, [pc, #96]	; (800578c <HAL_TIM_Base_Start_IT+0xdc>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d111      	bne.n	8005754 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f003 0307 	and.w	r3, r3, #7
 800573a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2b06      	cmp	r3, #6
 8005740:	d010      	beq.n	8005764 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f042 0201 	orr.w	r2, r2, #1
 8005750:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005752:	e007      	b.n	8005764 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 0201 	orr.w	r2, r2, #1
 8005762:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	40010000 	.word	0x40010000
 8005778:	40000400 	.word	0x40000400
 800577c:	40000800 	.word	0x40000800
 8005780:	40000c00 	.word	0x40000c00
 8005784:	40010400 	.word	0x40010400
 8005788:	40014000 	.word	0x40014000
 800578c:	40001800 	.word	0x40001800

08005790 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e041      	b.n	8005826 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d106      	bne.n	80057bc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f839 	bl	800582e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	3304      	adds	r3, #4
 80057cc:	4619      	mov	r1, r3
 80057ce:	4610      	mov	r0, r2
 80057d0:	f000 fcb0 	bl	8006134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800582e:	b480      	push	{r7}
 8005830:	b083      	sub	sp, #12
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005836:	bf00      	nop
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
	...

08005844 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d109      	bne.n	8005868 <HAL_TIM_OC_Start+0x24>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b01      	cmp	r3, #1
 800585e:	bf14      	ite	ne
 8005860:	2301      	movne	r3, #1
 8005862:	2300      	moveq	r3, #0
 8005864:	b2db      	uxtb	r3, r3
 8005866:	e022      	b.n	80058ae <HAL_TIM_OC_Start+0x6a>
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	2b04      	cmp	r3, #4
 800586c:	d109      	bne.n	8005882 <HAL_TIM_OC_Start+0x3e>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b01      	cmp	r3, #1
 8005878:	bf14      	ite	ne
 800587a:	2301      	movne	r3, #1
 800587c:	2300      	moveq	r3, #0
 800587e:	b2db      	uxtb	r3, r3
 8005880:	e015      	b.n	80058ae <HAL_TIM_OC_Start+0x6a>
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b08      	cmp	r3, #8
 8005886:	d109      	bne.n	800589c <HAL_TIM_OC_Start+0x58>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b01      	cmp	r3, #1
 8005892:	bf14      	ite	ne
 8005894:	2301      	movne	r3, #1
 8005896:	2300      	moveq	r3, #0
 8005898:	b2db      	uxtb	r3, r3
 800589a:	e008      	b.n	80058ae <HAL_TIM_OC_Start+0x6a>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	bf14      	ite	ne
 80058a8:	2301      	movne	r3, #1
 80058aa:	2300      	moveq	r3, #0
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e07c      	b.n	80059b0 <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d104      	bne.n	80058c6 <HAL_TIM_OC_Start+0x82>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058c4:	e013      	b.n	80058ee <HAL_TIM_OC_Start+0xaa>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b04      	cmp	r3, #4
 80058ca:	d104      	bne.n	80058d6 <HAL_TIM_OC_Start+0x92>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2202      	movs	r2, #2
 80058d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058d4:	e00b      	b.n	80058ee <HAL_TIM_OC_Start+0xaa>
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d104      	bne.n	80058e6 <HAL_TIM_OC_Start+0xa2>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2202      	movs	r2, #2
 80058e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058e4:	e003      	b.n	80058ee <HAL_TIM_OC_Start+0xaa>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2202      	movs	r2, #2
 80058ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2201      	movs	r2, #1
 80058f4:	6839      	ldr	r1, [r7, #0]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 ff94 	bl	8006824 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a2d      	ldr	r2, [pc, #180]	; (80059b8 <HAL_TIM_OC_Start+0x174>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d004      	beq.n	8005910 <HAL_TIM_OC_Start+0xcc>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a2c      	ldr	r2, [pc, #176]	; (80059bc <HAL_TIM_OC_Start+0x178>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d101      	bne.n	8005914 <HAL_TIM_OC_Start+0xd0>
 8005910:	2301      	movs	r3, #1
 8005912:	e000      	b.n	8005916 <HAL_TIM_OC_Start+0xd2>
 8005914:	2300      	movs	r3, #0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d007      	beq.n	800592a <HAL_TIM_OC_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005928:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a22      	ldr	r2, [pc, #136]	; (80059b8 <HAL_TIM_OC_Start+0x174>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d022      	beq.n	800597a <HAL_TIM_OC_Start+0x136>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800593c:	d01d      	beq.n	800597a <HAL_TIM_OC_Start+0x136>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a1f      	ldr	r2, [pc, #124]	; (80059c0 <HAL_TIM_OC_Start+0x17c>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d018      	beq.n	800597a <HAL_TIM_OC_Start+0x136>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a1d      	ldr	r2, [pc, #116]	; (80059c4 <HAL_TIM_OC_Start+0x180>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d013      	beq.n	800597a <HAL_TIM_OC_Start+0x136>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a1c      	ldr	r2, [pc, #112]	; (80059c8 <HAL_TIM_OC_Start+0x184>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d00e      	beq.n	800597a <HAL_TIM_OC_Start+0x136>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a16      	ldr	r2, [pc, #88]	; (80059bc <HAL_TIM_OC_Start+0x178>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d009      	beq.n	800597a <HAL_TIM_OC_Start+0x136>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a18      	ldr	r2, [pc, #96]	; (80059cc <HAL_TIM_OC_Start+0x188>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d004      	beq.n	800597a <HAL_TIM_OC_Start+0x136>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a16      	ldr	r2, [pc, #88]	; (80059d0 <HAL_TIM_OC_Start+0x18c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d111      	bne.n	800599e <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f003 0307 	and.w	r3, r3, #7
 8005984:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2b06      	cmp	r3, #6
 800598a:	d010      	beq.n	80059ae <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0201 	orr.w	r2, r2, #1
 800599a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800599c:	e007      	b.n	80059ae <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f042 0201 	orr.w	r2, r2, #1
 80059ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	40010000 	.word	0x40010000
 80059bc:	40010400 	.word	0x40010400
 80059c0:	40000400 	.word	0x40000400
 80059c4:	40000800 	.word	0x40000800
 80059c8:	40000c00 	.word	0x40000c00
 80059cc:	40014000 	.word	0x40014000
 80059d0:	40001800 	.word	0x40001800

080059d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e041      	b.n	8005a6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d106      	bne.n	8005a00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f839 	bl	8005a72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	3304      	adds	r3, #4
 8005a10:	4619      	mov	r1, r3
 8005a12:	4610      	mov	r0, r2
 8005a14:	f000 fb8e 	bl	8006134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b083      	sub	sp, #12
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a7a:	bf00      	nop
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b082      	sub	sp, #8
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	f003 0302 	and.w	r3, r3, #2
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d122      	bne.n	8005ae2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d11b      	bne.n	8005ae2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f06f 0202 	mvn.w	r2, #2
 8005ab2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	f003 0303 	and.w	r3, r3, #3
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 fb15 	bl	80060f8 <HAL_TIM_IC_CaptureCallback>
 8005ace:	e005      	b.n	8005adc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 fb07 	bl	80060e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 fb18 	bl	800610c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	f003 0304 	and.w	r3, r3, #4
 8005aec:	2b04      	cmp	r3, #4
 8005aee:	d122      	bne.n	8005b36 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	f003 0304 	and.w	r3, r3, #4
 8005afa:	2b04      	cmp	r3, #4
 8005afc:	d11b      	bne.n	8005b36 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f06f 0204 	mvn.w	r2, #4
 8005b06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d003      	beq.n	8005b24 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 faeb 	bl	80060f8 <HAL_TIM_IC_CaptureCallback>
 8005b22:	e005      	b.n	8005b30 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 fadd 	bl	80060e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 faee 	bl	800610c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	f003 0308 	and.w	r3, r3, #8
 8005b40:	2b08      	cmp	r3, #8
 8005b42:	d122      	bne.n	8005b8a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	f003 0308 	and.w	r3, r3, #8
 8005b4e:	2b08      	cmp	r3, #8
 8005b50:	d11b      	bne.n	8005b8a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f06f 0208 	mvn.w	r2, #8
 8005b5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2204      	movs	r2, #4
 8005b60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69db      	ldr	r3, [r3, #28]
 8005b68:	f003 0303 	and.w	r3, r3, #3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d003      	beq.n	8005b78 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 fac1 	bl	80060f8 <HAL_TIM_IC_CaptureCallback>
 8005b76:	e005      	b.n	8005b84 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 fab3 	bl	80060e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 fac4 	bl	800610c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	f003 0310 	and.w	r3, r3, #16
 8005b94:	2b10      	cmp	r3, #16
 8005b96:	d122      	bne.n	8005bde <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	f003 0310 	and.w	r3, r3, #16
 8005ba2:	2b10      	cmp	r3, #16
 8005ba4:	d11b      	bne.n	8005bde <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f06f 0210 	mvn.w	r2, #16
 8005bae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2208      	movs	r2, #8
 8005bb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	69db      	ldr	r3, [r3, #28]
 8005bbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d003      	beq.n	8005bcc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fa97 	bl	80060f8 <HAL_TIM_IC_CaptureCallback>
 8005bca:	e005      	b.n	8005bd8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 fa89 	bl	80060e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 fa9a 	bl	800610c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	f003 0301 	and.w	r3, r3, #1
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d10e      	bne.n	8005c0a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d107      	bne.n	8005c0a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f06f 0201 	mvn.w	r2, #1
 8005c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 fa63 	bl	80060d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c14:	2b80      	cmp	r3, #128	; 0x80
 8005c16:	d10e      	bne.n	8005c36 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c22:	2b80      	cmp	r3, #128	; 0x80
 8005c24:	d107      	bne.n	8005c36 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 fef5 	bl	8006a20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c40:	2b40      	cmp	r3, #64	; 0x40
 8005c42:	d10e      	bne.n	8005c62 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4e:	2b40      	cmp	r3, #64	; 0x40
 8005c50:	d107      	bne.n	8005c62 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 fa5f 	bl	8006120 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	f003 0320 	and.w	r3, r3, #32
 8005c6c:	2b20      	cmp	r3, #32
 8005c6e:	d10e      	bne.n	8005c8e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	f003 0320 	and.w	r3, r3, #32
 8005c7a:	2b20      	cmp	r3, #32
 8005c7c:	d107      	bne.n	8005c8e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f06f 0220 	mvn.w	r2, #32
 8005c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 febf 	bl	8006a0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c8e:	bf00      	nop
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
	...

08005c98 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d101      	bne.n	8005cb2 <HAL_TIM_OC_ConfigChannel+0x1a>
 8005cae:	2302      	movs	r3, #2
 8005cb0:	e046      	b.n	8005d40 <HAL_TIM_OC_ConfigChannel+0xa8>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b0c      	cmp	r3, #12
 8005cbe:	d839      	bhi.n	8005d34 <HAL_TIM_OC_ConfigChannel+0x9c>
 8005cc0:	a201      	add	r2, pc, #4	; (adr r2, 8005cc8 <HAL_TIM_OC_ConfigChannel+0x30>)
 8005cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc6:	bf00      	nop
 8005cc8:	08005cfd 	.word	0x08005cfd
 8005ccc:	08005d35 	.word	0x08005d35
 8005cd0:	08005d35 	.word	0x08005d35
 8005cd4:	08005d35 	.word	0x08005d35
 8005cd8:	08005d0b 	.word	0x08005d0b
 8005cdc:	08005d35 	.word	0x08005d35
 8005ce0:	08005d35 	.word	0x08005d35
 8005ce4:	08005d35 	.word	0x08005d35
 8005ce8:	08005d19 	.word	0x08005d19
 8005cec:	08005d35 	.word	0x08005d35
 8005cf0:	08005d35 	.word	0x08005d35
 8005cf4:	08005d35 	.word	0x08005d35
 8005cf8:	08005d27 	.word	0x08005d27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68b9      	ldr	r1, [r7, #8]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 fab6 	bl	8006274 <TIM_OC1_SetConfig>
      break;
 8005d08:	e015      	b.n	8005d36 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68b9      	ldr	r1, [r7, #8]
 8005d10:	4618      	mov	r0, r3
 8005d12:	f000 fb1f 	bl	8006354 <TIM_OC2_SetConfig>
      break;
 8005d16:	e00e      	b.n	8005d36 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68b9      	ldr	r1, [r7, #8]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 fb8e 	bl	8006440 <TIM_OC3_SetConfig>
      break;
 8005d24:	e007      	b.n	8005d36 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68b9      	ldr	r1, [r7, #8]
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f000 fbfb 	bl	8006528 <TIM_OC4_SetConfig>
      break;
 8005d32:	e000      	b.n	8005d36 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8005d34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d101      	bne.n	8005d62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005d5e:	2302      	movs	r3, #2
 8005d60:	e0ac      	b.n	8005ebc <HAL_TIM_PWM_ConfigChannel+0x174>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2b0c      	cmp	r3, #12
 8005d6e:	f200 809f 	bhi.w	8005eb0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005d72:	a201      	add	r2, pc, #4	; (adr r2, 8005d78 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d78:	08005dad 	.word	0x08005dad
 8005d7c:	08005eb1 	.word	0x08005eb1
 8005d80:	08005eb1 	.word	0x08005eb1
 8005d84:	08005eb1 	.word	0x08005eb1
 8005d88:	08005ded 	.word	0x08005ded
 8005d8c:	08005eb1 	.word	0x08005eb1
 8005d90:	08005eb1 	.word	0x08005eb1
 8005d94:	08005eb1 	.word	0x08005eb1
 8005d98:	08005e2f 	.word	0x08005e2f
 8005d9c:	08005eb1 	.word	0x08005eb1
 8005da0:	08005eb1 	.word	0x08005eb1
 8005da4:	08005eb1 	.word	0x08005eb1
 8005da8:	08005e6f 	.word	0x08005e6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68b9      	ldr	r1, [r7, #8]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 fa5e 	bl	8006274 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	699a      	ldr	r2, [r3, #24]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f042 0208 	orr.w	r2, r2, #8
 8005dc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699a      	ldr	r2, [r3, #24]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 0204 	bic.w	r2, r2, #4
 8005dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6999      	ldr	r1, [r3, #24]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	691a      	ldr	r2, [r3, #16]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	619a      	str	r2, [r3, #24]
      break;
 8005dea:	e062      	b.n	8005eb2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68b9      	ldr	r1, [r7, #8]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f000 faae 	bl	8006354 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	699a      	ldr	r2, [r3, #24]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	699a      	ldr	r2, [r3, #24]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6999      	ldr	r1, [r3, #24]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	021a      	lsls	r2, r3, #8
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	619a      	str	r2, [r3, #24]
      break;
 8005e2c:	e041      	b.n	8005eb2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68b9      	ldr	r1, [r7, #8]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 fb03 	bl	8006440 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	69da      	ldr	r2, [r3, #28]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f042 0208 	orr.w	r2, r2, #8
 8005e48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	69da      	ldr	r2, [r3, #28]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 0204 	bic.w	r2, r2, #4
 8005e58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	69d9      	ldr	r1, [r3, #28]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	691a      	ldr	r2, [r3, #16]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	61da      	str	r2, [r3, #28]
      break;
 8005e6c:	e021      	b.n	8005eb2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68b9      	ldr	r1, [r7, #8]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 fb57 	bl	8006528 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	69da      	ldr	r2, [r3, #28]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	69da      	ldr	r2, [r3, #28]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69d9      	ldr	r1, [r3, #28]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	021a      	lsls	r2, r3, #8
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	61da      	str	r2, [r3, #28]
      break;
 8005eae:	e000      	b.n	8005eb2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005eb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d101      	bne.n	8005edc <HAL_TIM_ConfigClockSource+0x18>
 8005ed8:	2302      	movs	r3, #2
 8005eda:	e0b3      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x180>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005efa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f02:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f14:	d03e      	beq.n	8005f94 <HAL_TIM_ConfigClockSource+0xd0>
 8005f16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f1a:	f200 8087 	bhi.w	800602c <HAL_TIM_ConfigClockSource+0x168>
 8005f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f22:	f000 8085 	beq.w	8006030 <HAL_TIM_ConfigClockSource+0x16c>
 8005f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f2a:	d87f      	bhi.n	800602c <HAL_TIM_ConfigClockSource+0x168>
 8005f2c:	2b70      	cmp	r3, #112	; 0x70
 8005f2e:	d01a      	beq.n	8005f66 <HAL_TIM_ConfigClockSource+0xa2>
 8005f30:	2b70      	cmp	r3, #112	; 0x70
 8005f32:	d87b      	bhi.n	800602c <HAL_TIM_ConfigClockSource+0x168>
 8005f34:	2b60      	cmp	r3, #96	; 0x60
 8005f36:	d050      	beq.n	8005fda <HAL_TIM_ConfigClockSource+0x116>
 8005f38:	2b60      	cmp	r3, #96	; 0x60
 8005f3a:	d877      	bhi.n	800602c <HAL_TIM_ConfigClockSource+0x168>
 8005f3c:	2b50      	cmp	r3, #80	; 0x50
 8005f3e:	d03c      	beq.n	8005fba <HAL_TIM_ConfigClockSource+0xf6>
 8005f40:	2b50      	cmp	r3, #80	; 0x50
 8005f42:	d873      	bhi.n	800602c <HAL_TIM_ConfigClockSource+0x168>
 8005f44:	2b40      	cmp	r3, #64	; 0x40
 8005f46:	d058      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0x136>
 8005f48:	2b40      	cmp	r3, #64	; 0x40
 8005f4a:	d86f      	bhi.n	800602c <HAL_TIM_ConfigClockSource+0x168>
 8005f4c:	2b30      	cmp	r3, #48	; 0x30
 8005f4e:	d064      	beq.n	800601a <HAL_TIM_ConfigClockSource+0x156>
 8005f50:	2b30      	cmp	r3, #48	; 0x30
 8005f52:	d86b      	bhi.n	800602c <HAL_TIM_ConfigClockSource+0x168>
 8005f54:	2b20      	cmp	r3, #32
 8005f56:	d060      	beq.n	800601a <HAL_TIM_ConfigClockSource+0x156>
 8005f58:	2b20      	cmp	r3, #32
 8005f5a:	d867      	bhi.n	800602c <HAL_TIM_ConfigClockSource+0x168>
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d05c      	beq.n	800601a <HAL_TIM_ConfigClockSource+0x156>
 8005f60:	2b10      	cmp	r3, #16
 8005f62:	d05a      	beq.n	800601a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005f64:	e062      	b.n	800602c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6818      	ldr	r0, [r3, #0]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	6899      	ldr	r1, [r3, #8]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	685a      	ldr	r2, [r3, #4]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	f000 fc35 	bl	80067e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f88:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	609a      	str	r2, [r3, #8]
      break;
 8005f92:	e04e      	b.n	8006032 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6818      	ldr	r0, [r3, #0]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	6899      	ldr	r1, [r3, #8]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f000 fc1e 	bl	80067e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689a      	ldr	r2, [r3, #8]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fb6:	609a      	str	r2, [r3, #8]
      break;
 8005fb8:	e03b      	b.n	8006032 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6818      	ldr	r0, [r3, #0]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	6859      	ldr	r1, [r3, #4]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	f000 fb92 	bl	80066f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2150      	movs	r1, #80	; 0x50
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f000 fbeb 	bl	80067ae <TIM_ITRx_SetConfig>
      break;
 8005fd8:	e02b      	b.n	8006032 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6818      	ldr	r0, [r3, #0]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	6859      	ldr	r1, [r3, #4]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	f000 fbb1 	bl	800674e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2160      	movs	r1, #96	; 0x60
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 fbdb 	bl	80067ae <TIM_ITRx_SetConfig>
      break;
 8005ff8:	e01b      	b.n	8006032 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6818      	ldr	r0, [r3, #0]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	6859      	ldr	r1, [r3, #4]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	461a      	mov	r2, r3
 8006008:	f000 fb72 	bl	80066f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2140      	movs	r1, #64	; 0x40
 8006012:	4618      	mov	r0, r3
 8006014:	f000 fbcb 	bl	80067ae <TIM_ITRx_SetConfig>
      break;
 8006018:	e00b      	b.n	8006032 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4619      	mov	r1, r3
 8006024:	4610      	mov	r0, r2
 8006026:	f000 fbc2 	bl	80067ae <TIM_ITRx_SetConfig>
        break;
 800602a:	e002      	b.n	8006032 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800602c:	bf00      	nop
 800602e:	e000      	b.n	8006032 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006030:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800605c:	2b01      	cmp	r3, #1
 800605e:	d101      	bne.n	8006064 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006060:	2302      	movs	r3, #2
 8006062:	e031      	b.n	80060c8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006074:	6839      	ldr	r1, [r7, #0]
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 faac 	bl	80065d4 <TIM_SlaveTimer_SetConfig>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d009      	beq.n	8006096 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e018      	b.n	80060c8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68da      	ldr	r2, [r3, #12]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060a4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68da      	ldr	r2, [r3, #12]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80060b4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3708      	adds	r7, #8
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a40      	ldr	r2, [pc, #256]	; (8006248 <TIM_Base_SetConfig+0x114>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d013      	beq.n	8006174 <TIM_Base_SetConfig+0x40>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006152:	d00f      	beq.n	8006174 <TIM_Base_SetConfig+0x40>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a3d      	ldr	r2, [pc, #244]	; (800624c <TIM_Base_SetConfig+0x118>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d00b      	beq.n	8006174 <TIM_Base_SetConfig+0x40>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a3c      	ldr	r2, [pc, #240]	; (8006250 <TIM_Base_SetConfig+0x11c>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d007      	beq.n	8006174 <TIM_Base_SetConfig+0x40>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a3b      	ldr	r2, [pc, #236]	; (8006254 <TIM_Base_SetConfig+0x120>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d003      	beq.n	8006174 <TIM_Base_SetConfig+0x40>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a3a      	ldr	r2, [pc, #232]	; (8006258 <TIM_Base_SetConfig+0x124>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d108      	bne.n	8006186 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800617a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	4313      	orrs	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a2f      	ldr	r2, [pc, #188]	; (8006248 <TIM_Base_SetConfig+0x114>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d02b      	beq.n	80061e6 <TIM_Base_SetConfig+0xb2>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006194:	d027      	beq.n	80061e6 <TIM_Base_SetConfig+0xb2>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a2c      	ldr	r2, [pc, #176]	; (800624c <TIM_Base_SetConfig+0x118>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d023      	beq.n	80061e6 <TIM_Base_SetConfig+0xb2>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a2b      	ldr	r2, [pc, #172]	; (8006250 <TIM_Base_SetConfig+0x11c>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d01f      	beq.n	80061e6 <TIM_Base_SetConfig+0xb2>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a2a      	ldr	r2, [pc, #168]	; (8006254 <TIM_Base_SetConfig+0x120>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d01b      	beq.n	80061e6 <TIM_Base_SetConfig+0xb2>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a29      	ldr	r2, [pc, #164]	; (8006258 <TIM_Base_SetConfig+0x124>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d017      	beq.n	80061e6 <TIM_Base_SetConfig+0xb2>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a28      	ldr	r2, [pc, #160]	; (800625c <TIM_Base_SetConfig+0x128>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d013      	beq.n	80061e6 <TIM_Base_SetConfig+0xb2>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a27      	ldr	r2, [pc, #156]	; (8006260 <TIM_Base_SetConfig+0x12c>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d00f      	beq.n	80061e6 <TIM_Base_SetConfig+0xb2>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a26      	ldr	r2, [pc, #152]	; (8006264 <TIM_Base_SetConfig+0x130>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d00b      	beq.n	80061e6 <TIM_Base_SetConfig+0xb2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a25      	ldr	r2, [pc, #148]	; (8006268 <TIM_Base_SetConfig+0x134>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d007      	beq.n	80061e6 <TIM_Base_SetConfig+0xb2>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a24      	ldr	r2, [pc, #144]	; (800626c <TIM_Base_SetConfig+0x138>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d003      	beq.n	80061e6 <TIM_Base_SetConfig+0xb2>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a23      	ldr	r2, [pc, #140]	; (8006270 <TIM_Base_SetConfig+0x13c>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d108      	bne.n	80061f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	4313      	orrs	r3, r2
 8006204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	689a      	ldr	r2, [r3, #8]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a0a      	ldr	r2, [pc, #40]	; (8006248 <TIM_Base_SetConfig+0x114>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d003      	beq.n	800622c <TIM_Base_SetConfig+0xf8>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a0c      	ldr	r2, [pc, #48]	; (8006258 <TIM_Base_SetConfig+0x124>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d103      	bne.n	8006234 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	691a      	ldr	r2, [r3, #16]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	615a      	str	r2, [r3, #20]
}
 800623a:	bf00      	nop
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	40010000 	.word	0x40010000
 800624c:	40000400 	.word	0x40000400
 8006250:	40000800 	.word	0x40000800
 8006254:	40000c00 	.word	0x40000c00
 8006258:	40010400 	.word	0x40010400
 800625c:	40014000 	.word	0x40014000
 8006260:	40014400 	.word	0x40014400
 8006264:	40014800 	.word	0x40014800
 8006268:	40001800 	.word	0x40001800
 800626c:	40001c00 	.word	0x40001c00
 8006270:	40002000 	.word	0x40002000

08006274 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006274:	b480      	push	{r7}
 8006276:	b087      	sub	sp, #28
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	f023 0201 	bic.w	r2, r3, #1
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f023 0303 	bic.w	r3, r3, #3
 80062aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f023 0302 	bic.w	r3, r3, #2
 80062bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a20      	ldr	r2, [pc, #128]	; (800634c <TIM_OC1_SetConfig+0xd8>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d003      	beq.n	80062d8 <TIM_OC1_SetConfig+0x64>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a1f      	ldr	r2, [pc, #124]	; (8006350 <TIM_OC1_SetConfig+0xdc>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d10c      	bne.n	80062f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f023 0308 	bic.w	r3, r3, #8
 80062de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f023 0304 	bic.w	r3, r3, #4
 80062f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a15      	ldr	r2, [pc, #84]	; (800634c <TIM_OC1_SetConfig+0xd8>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d003      	beq.n	8006302 <TIM_OC1_SetConfig+0x8e>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a14      	ldr	r2, [pc, #80]	; (8006350 <TIM_OC1_SetConfig+0xdc>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d111      	bne.n	8006326 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	4313      	orrs	r3, r2
 800631a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	4313      	orrs	r3, r2
 8006324:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	621a      	str	r2, [r3, #32]
}
 8006340:	bf00      	nop
 8006342:	371c      	adds	r7, #28
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	40010000 	.word	0x40010000
 8006350:	40010400 	.word	0x40010400

08006354 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	f023 0210 	bic.w	r2, r3, #16
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800638a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	021b      	lsls	r3, r3, #8
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	4313      	orrs	r3, r2
 8006396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f023 0320 	bic.w	r3, r3, #32
 800639e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	011b      	lsls	r3, r3, #4
 80063a6:	697a      	ldr	r2, [r7, #20]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a22      	ldr	r2, [pc, #136]	; (8006438 <TIM_OC2_SetConfig+0xe4>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d003      	beq.n	80063bc <TIM_OC2_SetConfig+0x68>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a21      	ldr	r2, [pc, #132]	; (800643c <TIM_OC2_SetConfig+0xe8>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d10d      	bne.n	80063d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	011b      	lsls	r3, r3, #4
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a17      	ldr	r2, [pc, #92]	; (8006438 <TIM_OC2_SetConfig+0xe4>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d003      	beq.n	80063e8 <TIM_OC2_SetConfig+0x94>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a16      	ldr	r2, [pc, #88]	; (800643c <TIM_OC2_SetConfig+0xe8>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d113      	bne.n	8006410 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	695b      	ldr	r3, [r3, #20]
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	4313      	orrs	r3, r2
 8006402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	4313      	orrs	r3, r2
 800640e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	621a      	str	r2, [r3, #32]
}
 800642a:	bf00      	nop
 800642c:	371c      	adds	r7, #28
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	40010000 	.word	0x40010000
 800643c:	40010400 	.word	0x40010400

08006440 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006440:	b480      	push	{r7}
 8006442:	b087      	sub	sp, #28
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	69db      	ldr	r3, [r3, #28]
 8006466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800646e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f023 0303 	bic.w	r3, r3, #3
 8006476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	4313      	orrs	r3, r2
 8006480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006488:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	021b      	lsls	r3, r3, #8
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	4313      	orrs	r3, r2
 8006494:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a21      	ldr	r2, [pc, #132]	; (8006520 <TIM_OC3_SetConfig+0xe0>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d003      	beq.n	80064a6 <TIM_OC3_SetConfig+0x66>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a20      	ldr	r2, [pc, #128]	; (8006524 <TIM_OC3_SetConfig+0xe4>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d10d      	bne.n	80064c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	021b      	lsls	r3, r3, #8
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a16      	ldr	r2, [pc, #88]	; (8006520 <TIM_OC3_SetConfig+0xe0>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d003      	beq.n	80064d2 <TIM_OC3_SetConfig+0x92>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a15      	ldr	r2, [pc, #84]	; (8006524 <TIM_OC3_SetConfig+0xe4>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d113      	bne.n	80064fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	011b      	lsls	r3, r3, #4
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	011b      	lsls	r3, r3, #4
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	693a      	ldr	r2, [r7, #16]
 80064fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	685a      	ldr	r2, [r3, #4]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	621a      	str	r2, [r3, #32]
}
 8006514:	bf00      	nop
 8006516:	371c      	adds	r7, #28
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	40010000 	.word	0x40010000
 8006524:	40010400 	.word	0x40010400

08006528 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006528:	b480      	push	{r7}
 800652a:	b087      	sub	sp, #28
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800655e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	021b      	lsls	r3, r3, #8
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	4313      	orrs	r3, r2
 800656a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006572:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	031b      	lsls	r3, r3, #12
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	4313      	orrs	r3, r2
 800657e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a12      	ldr	r2, [pc, #72]	; (80065cc <TIM_OC4_SetConfig+0xa4>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d003      	beq.n	8006590 <TIM_OC4_SetConfig+0x68>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a11      	ldr	r2, [pc, #68]	; (80065d0 <TIM_OC4_SetConfig+0xa8>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d109      	bne.n	80065a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006596:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	019b      	lsls	r3, r3, #6
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	621a      	str	r2, [r3, #32]
}
 80065be:	bf00      	nop
 80065c0:	371c      	adds	r7, #28
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	40010000 	.word	0x40010000
 80065d0:	40010400 	.word	0x40010400

080065d4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ec:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	f023 0307 	bic.w	r3, r3, #7
 80065fe:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	4313      	orrs	r3, r2
 8006608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	2b70      	cmp	r3, #112	; 0x70
 8006618:	d01a      	beq.n	8006650 <TIM_SlaveTimer_SetConfig+0x7c>
 800661a:	2b70      	cmp	r3, #112	; 0x70
 800661c:	d860      	bhi.n	80066e0 <TIM_SlaveTimer_SetConfig+0x10c>
 800661e:	2b60      	cmp	r3, #96	; 0x60
 8006620:	d054      	beq.n	80066cc <TIM_SlaveTimer_SetConfig+0xf8>
 8006622:	2b60      	cmp	r3, #96	; 0x60
 8006624:	d85c      	bhi.n	80066e0 <TIM_SlaveTimer_SetConfig+0x10c>
 8006626:	2b50      	cmp	r3, #80	; 0x50
 8006628:	d046      	beq.n	80066b8 <TIM_SlaveTimer_SetConfig+0xe4>
 800662a:	2b50      	cmp	r3, #80	; 0x50
 800662c:	d858      	bhi.n	80066e0 <TIM_SlaveTimer_SetConfig+0x10c>
 800662e:	2b40      	cmp	r3, #64	; 0x40
 8006630:	d019      	beq.n	8006666 <TIM_SlaveTimer_SetConfig+0x92>
 8006632:	2b40      	cmp	r3, #64	; 0x40
 8006634:	d854      	bhi.n	80066e0 <TIM_SlaveTimer_SetConfig+0x10c>
 8006636:	2b30      	cmp	r3, #48	; 0x30
 8006638:	d054      	beq.n	80066e4 <TIM_SlaveTimer_SetConfig+0x110>
 800663a:	2b30      	cmp	r3, #48	; 0x30
 800663c:	d850      	bhi.n	80066e0 <TIM_SlaveTimer_SetConfig+0x10c>
 800663e:	2b20      	cmp	r3, #32
 8006640:	d050      	beq.n	80066e4 <TIM_SlaveTimer_SetConfig+0x110>
 8006642:	2b20      	cmp	r3, #32
 8006644:	d84c      	bhi.n	80066e0 <TIM_SlaveTimer_SetConfig+0x10c>
 8006646:	2b00      	cmp	r3, #0
 8006648:	d04c      	beq.n	80066e4 <TIM_SlaveTimer_SetConfig+0x110>
 800664a:	2b10      	cmp	r3, #16
 800664c:	d04a      	beq.n	80066e4 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800664e:	e047      	b.n	80066e0 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6818      	ldr	r0, [r3, #0]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	68d9      	ldr	r1, [r3, #12]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	689a      	ldr	r2, [r3, #8]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	f000 f8c0 	bl	80067e4 <TIM_ETR_SetConfig>
      break;
 8006664:	e03f      	b.n	80066e6 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b05      	cmp	r3, #5
 800666c:	d101      	bne.n	8006672 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e03a      	b.n	80066e8 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6a1b      	ldr	r3, [r3, #32]
 8006678:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6a1a      	ldr	r2, [r3, #32]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 0201 	bic.w	r2, r2, #1
 8006688:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006698:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	011b      	lsls	r3, r3, #4
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	621a      	str	r2, [r3, #32]
      break;
 80066b6:	e016      	b.n	80066e6 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6818      	ldr	r0, [r3, #0]
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	6899      	ldr	r1, [r3, #8]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	461a      	mov	r2, r3
 80066c6:	f000 f813 	bl	80066f0 <TIM_TI1_ConfigInputStage>
      break;
 80066ca:	e00c      	b.n	80066e6 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6818      	ldr	r0, [r3, #0]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	6899      	ldr	r1, [r3, #8]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	461a      	mov	r2, r3
 80066da:	f000 f838 	bl	800674e <TIM_TI2_ConfigInputStage>
      break;
 80066de:	e002      	b.n	80066e6 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80066e0:	bf00      	nop
 80066e2:	e000      	b.n	80066e6 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80066e4:	bf00      	nop
  }
  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3718      	adds	r7, #24
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6a1b      	ldr	r3, [r3, #32]
 8006700:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	f023 0201 	bic.w	r2, r3, #1
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800671a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	011b      	lsls	r3, r3, #4
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	4313      	orrs	r3, r2
 8006724:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f023 030a 	bic.w	r3, r3, #10
 800672c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800672e:	697a      	ldr	r2, [r7, #20]
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	4313      	orrs	r3, r2
 8006734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	621a      	str	r2, [r3, #32]
}
 8006742:	bf00      	nop
 8006744:	371c      	adds	r7, #28
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800674e:	b480      	push	{r7}
 8006750:	b087      	sub	sp, #28
 8006752:	af00      	add	r7, sp, #0
 8006754:	60f8      	str	r0, [r7, #12]
 8006756:	60b9      	str	r1, [r7, #8]
 8006758:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	f023 0210 	bic.w	r2, r3, #16
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6a1b      	ldr	r3, [r3, #32]
 8006770:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006778:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	031b      	lsls	r3, r3, #12
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	4313      	orrs	r3, r2
 8006782:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800678a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	011b      	lsls	r3, r3, #4
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	4313      	orrs	r3, r2
 8006794:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	621a      	str	r2, [r3, #32]
}
 80067a2:	bf00      	nop
 80067a4:	371c      	adds	r7, #28
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b085      	sub	sp, #20
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
 80067b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067c6:	683a      	ldr	r2, [r7, #0]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	f043 0307 	orr.w	r3, r3, #7
 80067d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	609a      	str	r2, [r3, #8]
}
 80067d8:	bf00      	nop
 80067da:	3714      	adds	r7, #20
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b087      	sub	sp, #28
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
 80067f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	021a      	lsls	r2, r3, #8
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	431a      	orrs	r2, r3
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	4313      	orrs	r3, r2
 800680c:	697a      	ldr	r2, [r7, #20]
 800680e:	4313      	orrs	r3, r2
 8006810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	609a      	str	r2, [r3, #8]
}
 8006818:	bf00      	nop
 800681a:	371c      	adds	r7, #28
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006824:	b480      	push	{r7}
 8006826:	b087      	sub	sp, #28
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	f003 031f 	and.w	r3, r3, #31
 8006836:	2201      	movs	r2, #1
 8006838:	fa02 f303 	lsl.w	r3, r2, r3
 800683c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6a1a      	ldr	r2, [r3, #32]
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	43db      	mvns	r3, r3
 8006846:	401a      	ands	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6a1a      	ldr	r2, [r3, #32]
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	f003 031f 	and.w	r3, r3, #31
 8006856:	6879      	ldr	r1, [r7, #4]
 8006858:	fa01 f303 	lsl.w	r3, r1, r3
 800685c:	431a      	orrs	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	621a      	str	r2, [r3, #32]
}
 8006862:	bf00      	nop
 8006864:	371c      	adds	r7, #28
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
	...

08006870 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006880:	2b01      	cmp	r3, #1
 8006882:	d101      	bne.n	8006888 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006884:	2302      	movs	r3, #2
 8006886:	e05a      	b.n	800693e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2202      	movs	r2, #2
 8006894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a21      	ldr	r2, [pc, #132]	; (800694c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d022      	beq.n	8006912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d4:	d01d      	beq.n	8006912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a1d      	ldr	r2, [pc, #116]	; (8006950 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d018      	beq.n	8006912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a1b      	ldr	r2, [pc, #108]	; (8006954 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d013      	beq.n	8006912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a1a      	ldr	r2, [pc, #104]	; (8006958 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d00e      	beq.n	8006912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a18      	ldr	r2, [pc, #96]	; (800695c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d009      	beq.n	8006912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a17      	ldr	r2, [pc, #92]	; (8006960 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d004      	beq.n	8006912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a15      	ldr	r2, [pc, #84]	; (8006964 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d10c      	bne.n	800692c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006918:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	4313      	orrs	r3, r2
 8006922:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68ba      	ldr	r2, [r7, #8]
 800692a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3714      	adds	r7, #20
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	40010000 	.word	0x40010000
 8006950:	40000400 	.word	0x40000400
 8006954:	40000800 	.word	0x40000800
 8006958:	40000c00 	.word	0x40000c00
 800695c:	40010400 	.word	0x40010400
 8006960:	40014000 	.word	0x40014000
 8006964:	40001800 	.word	0x40001800

08006968 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006972:	2300      	movs	r3, #0
 8006974:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800697c:	2b01      	cmp	r3, #1
 800697e:	d101      	bne.n	8006984 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006980:	2302      	movs	r3, #2
 8006982:	e03d      	b.n	8006a00 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	4313      	orrs	r3, r2
 8006998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	695b      	ldr	r3, [r3, #20]
 80069dc:	4313      	orrs	r3, r2
 80069de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <__errno>:
 8006a34:	4b01      	ldr	r3, [pc, #4]	; (8006a3c <__errno+0x8>)
 8006a36:	6818      	ldr	r0, [r3, #0]
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	20000014 	.word	0x20000014

08006a40 <__libc_init_array>:
 8006a40:	b570      	push	{r4, r5, r6, lr}
 8006a42:	4d0d      	ldr	r5, [pc, #52]	; (8006a78 <__libc_init_array+0x38>)
 8006a44:	4c0d      	ldr	r4, [pc, #52]	; (8006a7c <__libc_init_array+0x3c>)
 8006a46:	1b64      	subs	r4, r4, r5
 8006a48:	10a4      	asrs	r4, r4, #2
 8006a4a:	2600      	movs	r6, #0
 8006a4c:	42a6      	cmp	r6, r4
 8006a4e:	d109      	bne.n	8006a64 <__libc_init_array+0x24>
 8006a50:	4d0b      	ldr	r5, [pc, #44]	; (8006a80 <__libc_init_array+0x40>)
 8006a52:	4c0c      	ldr	r4, [pc, #48]	; (8006a84 <__libc_init_array+0x44>)
 8006a54:	f000 f890 	bl	8006b78 <_init>
 8006a58:	1b64      	subs	r4, r4, r5
 8006a5a:	10a4      	asrs	r4, r4, #2
 8006a5c:	2600      	movs	r6, #0
 8006a5e:	42a6      	cmp	r6, r4
 8006a60:	d105      	bne.n	8006a6e <__libc_init_array+0x2e>
 8006a62:	bd70      	pop	{r4, r5, r6, pc}
 8006a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a68:	4798      	blx	r3
 8006a6a:	3601      	adds	r6, #1
 8006a6c:	e7ee      	b.n	8006a4c <__libc_init_array+0xc>
 8006a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a72:	4798      	blx	r3
 8006a74:	3601      	adds	r6, #1
 8006a76:	e7f2      	b.n	8006a5e <__libc_init_array+0x1e>
 8006a78:	080073b4 	.word	0x080073b4
 8006a7c:	080073b4 	.word	0x080073b4
 8006a80:	080073b4 	.word	0x080073b4
 8006a84:	080073b8 	.word	0x080073b8

08006a88 <memset>:
 8006a88:	4402      	add	r2, r0
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d100      	bne.n	8006a92 <memset+0xa>
 8006a90:	4770      	bx	lr
 8006a92:	f803 1b01 	strb.w	r1, [r3], #1
 8006a96:	e7f9      	b.n	8006a8c <memset+0x4>

08006a98 <round>:
 8006a98:	ec51 0b10 	vmov	r0, r1, d0
 8006a9c:	b570      	push	{r4, r5, r6, lr}
 8006a9e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8006aa2:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8006aa6:	2c13      	cmp	r4, #19
 8006aa8:	ee10 2a10 	vmov	r2, s0
 8006aac:	460b      	mov	r3, r1
 8006aae:	dc19      	bgt.n	8006ae4 <round+0x4c>
 8006ab0:	2c00      	cmp	r4, #0
 8006ab2:	da09      	bge.n	8006ac8 <round+0x30>
 8006ab4:	3401      	adds	r4, #1
 8006ab6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8006aba:	d103      	bne.n	8006ac4 <round+0x2c>
 8006abc:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006ac0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	e028      	b.n	8006b1a <round+0x82>
 8006ac8:	4d15      	ldr	r5, [pc, #84]	; (8006b20 <round+0x88>)
 8006aca:	4125      	asrs	r5, r4
 8006acc:	ea01 0605 	and.w	r6, r1, r5
 8006ad0:	4332      	orrs	r2, r6
 8006ad2:	d00e      	beq.n	8006af2 <round+0x5a>
 8006ad4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006ad8:	fa42 f404 	asr.w	r4, r2, r4
 8006adc:	4423      	add	r3, r4
 8006ade:	ea23 0305 	bic.w	r3, r3, r5
 8006ae2:	e7ef      	b.n	8006ac4 <round+0x2c>
 8006ae4:	2c33      	cmp	r4, #51	; 0x33
 8006ae6:	dd07      	ble.n	8006af8 <round+0x60>
 8006ae8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8006aec:	d101      	bne.n	8006af2 <round+0x5a>
 8006aee:	f7f9 fb71 	bl	80001d4 <__adddf3>
 8006af2:	ec41 0b10 	vmov	d0, r0, r1
 8006af6:	bd70      	pop	{r4, r5, r6, pc}
 8006af8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8006afc:	f04f 35ff 	mov.w	r5, #4294967295
 8006b00:	40f5      	lsrs	r5, r6
 8006b02:	4228      	tst	r0, r5
 8006b04:	d0f5      	beq.n	8006af2 <round+0x5a>
 8006b06:	2101      	movs	r1, #1
 8006b08:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8006b0c:	fa01 f404 	lsl.w	r4, r1, r4
 8006b10:	1912      	adds	r2, r2, r4
 8006b12:	bf28      	it	cs
 8006b14:	185b      	addcs	r3, r3, r1
 8006b16:	ea22 0105 	bic.w	r1, r2, r5
 8006b1a:	4608      	mov	r0, r1
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	e7e8      	b.n	8006af2 <round+0x5a>
 8006b20:	000fffff 	.word	0x000fffff

08006b24 <sqrtf>:
 8006b24:	b508      	push	{r3, lr}
 8006b26:	ed2d 8b02 	vpush	{d8}
 8006b2a:	eeb0 8a40 	vmov.f32	s16, s0
 8006b2e:	f000 f81f 	bl	8006b70 <__ieee754_sqrtf>
 8006b32:	4b0d      	ldr	r3, [pc, #52]	; (8006b68 <sqrtf+0x44>)
 8006b34:	f993 3000 	ldrsb.w	r3, [r3]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	d011      	beq.n	8006b60 <sqrtf+0x3c>
 8006b3c:	eeb4 8a48 	vcmp.f32	s16, s16
 8006b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b44:	d60c      	bvs.n	8006b60 <sqrtf+0x3c>
 8006b46:	eddf 8a09 	vldr	s17, [pc, #36]	; 8006b6c <sqrtf+0x48>
 8006b4a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b52:	d505      	bpl.n	8006b60 <sqrtf+0x3c>
 8006b54:	f7ff ff6e 	bl	8006a34 <__errno>
 8006b58:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006b5c:	2321      	movs	r3, #33	; 0x21
 8006b5e:	6003      	str	r3, [r0, #0]
 8006b60:	ecbd 8b02 	vpop	{d8}
 8006b64:	bd08      	pop	{r3, pc}
 8006b66:	bf00      	nop
 8006b68:	20000078 	.word	0x20000078
 8006b6c:	00000000 	.word	0x00000000

08006b70 <__ieee754_sqrtf>:
 8006b70:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006b74:	4770      	bx	lr
	...

08006b78 <_init>:
 8006b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b7a:	bf00      	nop
 8006b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b7e:	bc08      	pop	{r3}
 8006b80:	469e      	mov	lr, r3
 8006b82:	4770      	bx	lr

08006b84 <_fini>:
 8006b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b86:	bf00      	nop
 8006b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b8a:	bc08      	pop	{r3}
 8006b8c:	469e      	mov	lr, r3
 8006b8e:	4770      	bx	lr
